
ECGIHM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c080  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800c210  0800c210  0000d210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7d8  0800c7d8  0000e3b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c7d8  0800c7d8  0000d7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7e0  0800c7e0  0000e3b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7e0  0800c7e0  0000d7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7e4  0800c7e4  0000d7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003b8  20000000  0800c7e8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a384  200003b8  0800cba0  0000e3b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a73c  0800cba0  0000e73c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e3b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a89b  00000000  00000000  0000e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003958  00000000  00000000  00028c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  0002c5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001195  00000000  00000000  0002dca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e40  00000000  00000000  0002ee3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc89  00000000  00000000  00053c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df3f5  00000000  00000000  0006f906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ecfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007344  00000000  00000000  0014ed40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00156084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003b8 	.word	0x200003b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c1f8 	.word	0x0800c1f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003bc 	.word	0x200003bc
 80001cc:	0800c1f8 	.word	0x0800c1f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <SPI_TX_Byte>:
//-----------------------------[ Static Functions' Definitions ]----------------------------

// Static Functions Used By Library But Not Visible To User Who Include The Library (Driver)

static void SPI_TX_Byte(uint8_t au8_DATA)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(g_hspi, &au8_DATA, 1, 10);
 8000f7e:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <SPI_TX_Byte+0x20>)
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	1df9      	adds	r1, r7, #7
 8000f84:	230a      	movs	r3, #10
 8000f86:	2201      	movs	r2, #1
 8000f88:	f004 ff05 	bl	8005d96 <HAL_SPI_Transmit>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200003d4 	.word	0x200003d4

08000f98 <SS_ENABLE>:

static void SS_ENABLE(uint8_t au8_MATRIX_Instance)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_GPIO, DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_PIN, 0);
 8000fa2:	79fa      	ldrb	r2, [r7, #7]
 8000fa4:	490b      	ldr	r1, [pc, #44]	@ (8000fd4 <SS_ENABLE+0x3c>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	79fa      	ldrb	r2, [r7, #7]
 8000fb4:	4907      	ldr	r1, [pc, #28]	@ (8000fd4 <SS_ENABLE+0x3c>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f003 fc8c 	bl	80048e4 <HAL_GPIO_WritePin>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	0800c234 	.word	0x0800c234

08000fd8 <SS_DISABLE>:

static void SS_DISABLE(uint8_t au8_MATRIX_Instance)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_GPIO, DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_PIN, 1);
 8000fe2:	79fa      	ldrb	r2, [r7, #7]
 8000fe4:	490b      	ldr	r1, [pc, #44]	@ (8001014 <SS_DISABLE+0x3c>)
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	4907      	ldr	r1, [pc, #28]	@ (8001014 <SS_DISABLE+0x3c>)
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4413      	add	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	440b      	add	r3, r1
 8001000:	3304      	adds	r3, #4
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	2201      	movs	r2, #1
 8001006:	4619      	mov	r1, r3
 8001008:	f003 fc6c 	bl	80048e4 <HAL_GPIO_WritePin>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	0800c234 	.word	0x0800c234

08001018 <DisplayBuffer>:
	SPI_TX_Byte(au8_Val);
	SS_DISABLE(au8_MATRIX_Instance);
}

static void DisplayBuffer(uint8_t au8_MATRIX_Instance)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	73fb      	strb	r3, [r7, #15]

    for(i = 0; i<DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES; i++)
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e052      	b.n	80010d2 <DisplayBuffer+0xba>
    {
	    for(uint8_t j = 1; j < 9; j++)
 800102c:	2301      	movs	r3, #1
 800102e:	73bb      	strb	r3, [r7, #14]
 8001030:	e049      	b.n	80010c6 <DisplayBuffer+0xae>
	    {
	    	SS_ENABLE(au8_MATRIX_Instance);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ffaf 	bl	8000f98 <SS_ENABLE>
		   for(uint8_t k = 0; k < i; k++)
 800103a:	2300      	movs	r3, #0
 800103c:	737b      	strb	r3, [r7, #13]
 800103e:	e008      	b.n	8001052 <DisplayBuffer+0x3a>
		   {
			   SPI_TX_Byte(0x00);
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff ff97 	bl	8000f74 <SPI_TX_Byte>
		       SPI_TX_Byte(0x00);
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff ff94 	bl	8000f74 <SPI_TX_Byte>
		   for(uint8_t k = 0; k < i; k++)
 800104c:	7b7b      	ldrb	r3, [r7, #13]
 800104e:	3301      	adds	r3, #1
 8001050:	737b      	strb	r3, [r7, #13]
 8001052:	7b7a      	ldrb	r2, [r7, #13]
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3f2      	bcc.n	8001040 <DisplayBuffer+0x28>
		   }
		   SPI_TX_Byte(j);
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff89 	bl	8000f74 <SPI_TX_Byte>
		   SPI_TX_Byte(gs_MATRIX_info[au8_MATRIX_Instance].Buffer[j + i*8 - 1]);
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	7bb9      	ldrb	r1, [r7, #14]
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	1e59      	subs	r1, r3, #1
 800106e:	4821      	ldr	r0, [pc, #132]	@ (80010f4 <DisplayBuffer+0xdc>)
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4403      	add	r3, r0
 800107a:	440b      	add	r3, r1
 800107c:	330c      	adds	r3, #12
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff77 	bl	8000f74 <SPI_TX_Byte>
		   for(uint8_t k = DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES-1; k > i; k--)
 8001086:	79fa      	ldrb	r2, [r7, #7]
 8001088:	491b      	ldr	r1, [pc, #108]	@ (80010f8 <DisplayBuffer+0xe0>)
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	3308      	adds	r3, #8
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	3b01      	subs	r3, #1
 800109a:	733b      	strb	r3, [r7, #12]
 800109c:	e008      	b.n	80010b0 <DisplayBuffer+0x98>
		   {
			   SPI_TX_Byte(0x00);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff68 	bl	8000f74 <SPI_TX_Byte>
			   SPI_TX_Byte(0x00);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff ff65 	bl	8000f74 <SPI_TX_Byte>
		   for(uint8_t k = DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES-1; k > i; k--)
 80010aa:	7b3b      	ldrb	r3, [r7, #12]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	733b      	strb	r3, [r7, #12]
 80010b0:	7b3a      	ldrb	r2, [r7, #12]
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f2      	bhi.n	800109e <DisplayBuffer+0x86>
		   }
		   SS_DISABLE(au8_MATRIX_Instance);
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff8c 	bl	8000fd8 <SS_DISABLE>
	    for(uint8_t j = 1; j < 9; j++)
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	3301      	adds	r3, #1
 80010c4:	73bb      	strb	r3, [r7, #14]
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d9b2      	bls.n	8001032 <DisplayBuffer+0x1a>
    for(i = 0; i<DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES; i++)
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	3301      	adds	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	79fa      	ldrb	r2, [r7, #7]
 80010d4:	4908      	ldr	r1, [pc, #32]	@ (80010f8 <DisplayBuffer+0xe0>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	3308      	adds	r3, #8
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3a0      	bcc.n	800102c <DisplayBuffer+0x14>
	    }
    }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200003d8 	.word	0x200003d8
 80010f8:	0800c234 	.word	0x0800c234

080010fc <PushToBuffer>:

static void PushToBuffer(uint8_t au8_MATRIX_Instance, uint8_t au8_NewByte)
{
 80010fc:	b4b0      	push	{r4, r5, r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	460a      	mov	r2, r1
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

	for(i = 0; i < DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES*8 - 1; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e01a      	b.n	800114c <PushToBuffer+0x50>
	{
		gs_MATRIX_info[au8_MATRIX_Instance].Buffer[i] = gs_MATRIX_info[au8_MATRIX_Instance].Buffer[i+1];
 8001116:	79f9      	ldrb	r1, [r7, #7]
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	1c5c      	adds	r4, r3, #1
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	7bf8      	ldrb	r0, [r7, #15]
 8001120:	4d1f      	ldr	r5, [pc, #124]	@ (80011a0 <PushToBuffer+0xa4>)
 8001122:	460b      	mov	r3, r1
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	1a5b      	subs	r3, r3, r1
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	442b      	add	r3, r5
 800112c:	4423      	add	r3, r4
 800112e:	330c      	adds	r3, #12
 8001130:	781c      	ldrb	r4, [r3, #0]
 8001132:	491b      	ldr	r1, [pc, #108]	@ (80011a0 <PushToBuffer+0xa4>)
 8001134:	4613      	mov	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	1a9b      	subs	r3, r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	4403      	add	r3, r0
 8001140:	330c      	adds	r3, #12
 8001142:	4622      	mov	r2, r4
 8001144:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES*8 - 1; i++)
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	3301      	adds	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	7bf9      	ldrb	r1, [r7, #15]
 800114e:	79fa      	ldrb	r2, [r7, #7]
 8001150:	4814      	ldr	r0, [pc, #80]	@ (80011a4 <PushToBuffer+0xa8>)
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4403      	add	r3, r0
 800115c:	3308      	adds	r3, #8
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	3b01      	subs	r3, #1
 8001164:	4299      	cmp	r1, r3
 8001166:	dbd6      	blt.n	8001116 <PushToBuffer+0x1a>
	}
	gs_MATRIX_info[au8_MATRIX_Instance].Buffer[DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES*8 - 1] = au8_NewByte;
 8001168:	79fa      	ldrb	r2, [r7, #7]
 800116a:	79f9      	ldrb	r1, [r7, #7]
 800116c:	480d      	ldr	r0, [pc, #52]	@ (80011a4 <PushToBuffer+0xa8>)
 800116e:	460b      	mov	r3, r1
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	440b      	add	r3, r1
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4403      	add	r3, r0
 8001178:	3308      	adds	r3, #8
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	1e59      	subs	r1, r3, #1
 8001180:	4807      	ldr	r0, [pc, #28]	@ (80011a0 <PushToBuffer+0xa4>)
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	1a9b      	subs	r3, r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4403      	add	r3, r0
 800118c:	440b      	add	r3, r1
 800118e:	330c      	adds	r3, #12
 8001190:	79ba      	ldrb	r2, [r7, #6]
 8001192:	701a      	strb	r2, [r3, #0]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bcb0      	pop	{r4, r5, r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200003d8 	.word	0x200003d8
 80011a4:	0800c234 	.word	0x0800c234

080011a8 <DOT_MATRIX_Init>:
//----------------------------[ Library Functions' Definitions ]---------------------------

// Functions To Be Used By The User Who Include The Library (Driver)

void DOT_MATRIX_Init(SPI_HandleTypeDef * hspi)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	@ 0x30
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0318 	add.w	r3, r7, #24
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011c6:	2300      	movs	r3, #0
 80011c8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    g_hspi = hspi;
 80011cc:	4ab2      	ldr	r2, [pc, #712]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]

    /*--------[ Configure The SS GPIO Pins ]-------*/
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011d8:	e06e      	b.n	80012b8 <DOT_MATRIX_Init+0x110>
    {
    	if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOA)
 80011da:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80011de:	49af      	ldr	r1, [pc, #700]	@ (800149c <DOT_MATRIX_Init+0x2f4>)
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011f0:	d10c      	bne.n	800120c <DOT_MATRIX_Init+0x64>
    	{
    		__HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4bab      	ldr	r3, [pc, #684]	@ (80014a0 <DOT_MATRIX_Init+0x2f8>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	4aaa      	ldr	r2, [pc, #680]	@ (80014a0 <DOT_MATRIX_Init+0x2f8>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fe:	4ba8      	ldr	r3, [pc, #672]	@ (80014a0 <DOT_MATRIX_Init+0x2f8>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	e030      	b.n	800126e <DOT_MATRIX_Init+0xc6>
    	}
    	else if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOB)
 800120c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001210:	49a2      	ldr	r1, [pc, #648]	@ (800149c <DOT_MATRIX_Init+0x2f4>)
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4aa1      	ldr	r2, [pc, #644]	@ (80014a4 <DOT_MATRIX_Init+0x2fc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d10c      	bne.n	800123e <DOT_MATRIX_Init+0x96>
    	{
    		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	4b9e      	ldr	r3, [pc, #632]	@ (80014a0 <DOT_MATRIX_Init+0x2f8>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001228:	4a9d      	ldr	r2, [pc, #628]	@ (80014a0 <DOT_MATRIX_Init+0x2f8>)
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001230:	4b9b      	ldr	r3, [pc, #620]	@ (80014a0 <DOT_MATRIX_Init+0x2f8>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	e017      	b.n	800126e <DOT_MATRIX_Init+0xc6>
    	}
    	else if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOC)
 800123e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001242:	4996      	ldr	r1, [pc, #600]	@ (800149c <DOT_MATRIX_Init+0x2f4>)
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a95      	ldr	r2, [pc, #596]	@ (80014a8 <DOT_MATRIX_Init+0x300>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10b      	bne.n	800126e <DOT_MATRIX_Init+0xc6>
    	{
    		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	4b92      	ldr	r3, [pc, #584]	@ (80014a0 <DOT_MATRIX_Init+0x2f8>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	4a91      	ldr	r2, [pc, #580]	@ (80014a0 <DOT_MATRIX_Init+0x2f8>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001262:	4b8f      	ldr	r3, [pc, #572]	@ (80014a0 <DOT_MATRIX_Init+0x2f8>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    	}
    	GPIO_InitStruct.Pin = DOT_MATRIX_CfgParam[i].SS_PIN;
 800126e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001272:	498a      	ldr	r1, [pc, #552]	@ (800149c <DOT_MATRIX_Init+0x2f4>)
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	3304      	adds	r3, #4
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	61bb      	str	r3, [r7, #24]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
    	HAL_GPIO_Init(DOT_MATRIX_CfgParam[i].SS_GPIO, &GPIO_InitStruct);
 8001290:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001294:	4981      	ldr	r1, [pc, #516]	@ (800149c <DOT_MATRIX_Init+0x2f4>)
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f107 0218 	add.w	r2, r7, #24
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 f9b1 	bl	8004610 <HAL_GPIO_Init>
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 80012ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012b2:	3301      	adds	r3, #1
 80012b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d08c      	beq.n	80011da <DOT_MATRIX_Init+0x32>
    }
    /*--------[ Configure The SPI Peripheral ]-------*/
    g_hspi->Instance = DOT_MATRIX_SPI;
 80012c0:	4b75      	ldr	r3, [pc, #468]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a79      	ldr	r2, [pc, #484]	@ (80014ac <DOT_MATRIX_Init+0x304>)
 80012c6:	601a      	str	r2, [r3, #0]
    g_hspi->Init.Mode = SPI_MODE_MASTER;
 80012c8:	4b73      	ldr	r3, [pc, #460]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012d0:	605a      	str	r2, [r3, #4]
    g_hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80012d2:	4b71      	ldr	r3, [pc, #452]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
    g_hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80012da:	4b6f      	ldr	r3, [pc, #444]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012e2:	60da      	str	r2, [r3, #12]
    g_hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
    g_hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
    g_hspi->Init.NSS = SPI_NSS_SOFT;
 80012f4:	4b68      	ldr	r3, [pc, #416]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012fc:	619a      	str	r2, [r3, #24]
    g_hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80012fe:	4b66      	ldr	r3, [pc, #408]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2238      	movs	r2, #56	@ 0x38
 8001304:	61da      	str	r2, [r3, #28]
    g_hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001306:	4b64      	ldr	r3, [pc, #400]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
    g_hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800130e:	4b62      	ldr	r3, [pc, #392]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24
    g_hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001316:	4b60      	ldr	r3, [pc, #384]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	@ 0x28
    g_hspi->Init.CRCPolynomial = 10;
 800131e:	4b5e      	ldr	r3, [pc, #376]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	220a      	movs	r2, #10
 8001324:	62da      	str	r2, [r3, #44]	@ 0x2c
    HAL_SPI_Init(g_hspi);
 8001326:	4b5c      	ldr	r3, [pc, #368]	@ (8001498 <DOT_MATRIX_Init+0x2f0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f004 fc90 	bl	8005c50 <HAL_SPI_Init>

    /*--------[ Initialize & Configure The MAX7219 Devices ]-------*/
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 8001330:	2300      	movs	r3, #0
 8001332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001336:	e144      	b.n	80015c2 <DOT_MATRIX_Init+0x41a>
    {
    	// Set BCD Decode Mode
    	SS_ENABLE(i);
 8001338:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fe2b 	bl	8000f98 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8001342:	2300      	movs	r3, #0
 8001344:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001348:	e00a      	b.n	8001360 <DOT_MATRIX_Init+0x1b8>
    	{
    	    SPI_TX_Byte(0x09);
 800134a:	2009      	movs	r0, #9
 800134c:	f7ff fe12 	bl	8000f74 <SPI_TX_Byte>
    	    SPI_TX_Byte(0x00);
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fe0f 	bl	8000f74 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8001356:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800135a:	3301      	adds	r3, #1
 800135c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001360:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001364:	494d      	ldr	r1, [pc, #308]	@ (800149c <DOT_MATRIX_Init+0x2f4>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	3308      	adds	r3, #8
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001378:	429a      	cmp	r2, r3
 800137a:	d3e6      	bcc.n	800134a <DOT_MATRIX_Init+0x1a2>
    	}
    	SS_DISABLE(i);
 800137c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fe29 	bl	8000fd8 <SS_DISABLE>
    	// Set Dot Matrix Unit Brightness
    	SS_ENABLE(i);
 8001386:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe04 	bl	8000f98 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8001390:	2300      	movs	r3, #0
 8001392:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001396:	e014      	b.n	80013c2 <DOT_MATRIX_Init+0x21a>
    	{
    		SPI_TX_Byte(0x0A); // Select Intensity register
 8001398:	200a      	movs	r0, #10
 800139a:	f7ff fdeb 	bl	8000f74 <SPI_TX_Byte>
    		SPI_TX_Byte(DOT_MATRIX_CfgParam[i].BRIGHTNESS);
 800139e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80013a2:	493e      	ldr	r1, [pc, #248]	@ (800149c <DOT_MATRIX_Init+0x2f4>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	3309      	adds	r3, #9
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fdde 	bl	8000f74 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80013b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80013bc:	3301      	adds	r3, #1
 80013be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80013c2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80013c6:	4935      	ldr	r1, [pc, #212]	@ (800149c <DOT_MATRIX_Init+0x2f4>)
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	3308      	adds	r3, #8
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3dc      	bcc.n	8001398 <DOT_MATRIX_Init+0x1f0>
    	}
    	SS_DISABLE(i);
 80013de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fdf8 	bl	8000fd8 <SS_DISABLE>
    	// Set Display Refresh
    	SS_ENABLE(i);
 80013e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fdd3 	bl	8000f98 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80013f8:	e00a      	b.n	8001410 <DOT_MATRIX_Init+0x268>
    	{
    		SPI_TX_Byte(0x0B); // Select Scan-Limit register
 80013fa:	200b      	movs	r0, #11
 80013fc:	f7ff fdba 	bl	8000f74 <SPI_TX_Byte>
    		SPI_TX_Byte(0x07); // 1-7
 8001400:	2007      	movs	r0, #7
 8001402:	f7ff fdb7 	bl	8000f74 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8001406:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800140a:	3301      	adds	r3, #1
 800140c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001410:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001414:	4921      	ldr	r1, [pc, #132]	@ (800149c <DOT_MATRIX_Init+0x2f4>)
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	3308      	adds	r3, #8
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001428:	429a      	cmp	r2, r3
 800142a:	d3e6      	bcc.n	80013fa <DOT_MATRIX_Init+0x252>
    	}
    	SS_DISABLE(i);
 800142c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fdd1 	bl	8000fd8 <SS_DISABLE>
    	// Turn ON The Display
    	SS_ENABLE(i);
 8001436:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fdac 	bl	8000f98 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8001440:	2300      	movs	r3, #0
 8001442:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001446:	e00a      	b.n	800145e <DOT_MATRIX_Init+0x2b6>
    	{
    		SPI_TX_Byte(0x0C);
 8001448:	200c      	movs	r0, #12
 800144a:	f7ff fd93 	bl	8000f74 <SPI_TX_Byte>
    		SPI_TX_Byte(0x01);
 800144e:	2001      	movs	r0, #1
 8001450:	f7ff fd90 	bl	8000f74 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8001454:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001458:	3301      	adds	r3, #1
 800145a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800145e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001462:	490e      	ldr	r1, [pc, #56]	@ (800149c <DOT_MATRIX_Init+0x2f4>)
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	3308      	adds	r3, #8
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001476:	429a      	cmp	r2, r3
 8001478:	d3e6      	bcc.n	8001448 <DOT_MATRIX_Init+0x2a0>
    	}
    	SS_DISABLE(i);
 800147a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fdaa 	bl	8000fd8 <SS_DISABLE>
    	// Disable Display Test
    	SS_ENABLE(i);
 8001484:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fd85 	bl	8000f98 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 800148e:	2300      	movs	r3, #0
 8001490:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001494:	e017      	b.n	80014c6 <DOT_MATRIX_Init+0x31e>
 8001496:	bf00      	nop
 8001498:	200003d4 	.word	0x200003d4
 800149c:	0800c234 	.word	0x0800c234
 80014a0:	40021000 	.word	0x40021000
 80014a4:	48000400 	.word	0x48000400
 80014a8:	48000800 	.word	0x48000800
 80014ac:	40003c00 	.word	0x40003c00
    	{
    		SPI_TX_Byte(0x0F);
 80014b0:	200f      	movs	r0, #15
 80014b2:	f7ff fd5f 	bl	8000f74 <SPI_TX_Byte>
    		SPI_TX_Byte(0x00);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fd5c 	bl	8000f74 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80014bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80014c0:	3301      	adds	r3, #1
 80014c2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80014c6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014ca:	4943      	ldr	r1, [pc, #268]	@ (80015d8 <DOT_MATRIX_Init+0x430>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	3308      	adds	r3, #8
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3e6      	bcc.n	80014b0 <DOT_MATRIX_Init+0x308>
    	}
    	SS_DISABLE(i);
 80014e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fd76 	bl	8000fd8 <SS_DISABLE>

        // Initialize The Global Structure
        gs_MATRIX_info[i].Ticks = 0;
 80014ec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014f0:	493a      	ldr	r1, [pc, #232]	@ (80015dc <DOT_MATRIX_Init+0x434>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
        gs_MATRIX_info[i].BufferInit = 0;
 8001500:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001504:	4935      	ldr	r1, [pc, #212]	@ (80015dc <DOT_MATRIX_Init+0x434>)
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	330b      	adds	r3, #11
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
        gs_MATRIX_info[i].Arr_Index = 0;
 8001516:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800151a:	4930      	ldr	r1, [pc, #192]	@ (80015dc <DOT_MATRIX_Init+0x434>)
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3308      	adds	r3, #8
 8001528:	2200      	movs	r2, #0
 800152a:	801a      	strh	r2, [r3, #0]
        gs_MATRIX_info[i].Col_Index = 0;
 800152c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001530:	492a      	ldr	r1, [pc, #168]	@ (80015dc <DOT_MATRIX_Init+0x434>)
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	1a9b      	subs	r3, r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	330a      	adds	r3, #10
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
        gs_MATRIX_info[i].Max_Ticks = DOT_MATRIX_CfgParam[i].SCROLL_SPEED;
 8001542:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001546:	4924      	ldr	r1, [pc, #144]	@ (80015d8 <DOT_MATRIX_Init+0x430>)
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	3306      	adds	r3, #6
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800155a:	4618      	mov	r0, r3
 800155c:	491f      	ldr	r1, [pc, #124]	@ (80015dc <DOT_MATRIX_Init+0x434>)
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	3304      	adds	r3, #4
 800156a:	6018      	str	r0, [r3, #0]
        for(j = 0; j < DOT_MATRIX_CfgParam[i].CASCADED_DEVICES*8; j++)
 800156c:	2300      	movs	r3, #0
 800156e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001572:	e012      	b.n	800159a <DOT_MATRIX_Init+0x3f2>
        {
        	gs_MATRIX_info[i].Buffer[j] = 0x00;
 8001574:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001578:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800157c:	4817      	ldr	r0, [pc, #92]	@ (80015dc <DOT_MATRIX_Init+0x434>)
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4403      	add	r3, r0
 8001588:	440b      	add	r3, r1
 800158a:	330c      	adds	r3, #12
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < DOT_MATRIX_CfgParam[i].CASCADED_DEVICES*8; j++)
 8001590:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001594:	3301      	adds	r3, #1
 8001596:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800159a:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800159e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80015a2:	480d      	ldr	r0, [pc, #52]	@ (80015d8 <DOT_MATRIX_Init+0x430>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4403      	add	r3, r0
 80015ae:	3308      	adds	r3, #8
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4299      	cmp	r1, r3
 80015b6:	dbdd      	blt.n	8001574 <DOT_MATRIX_Init+0x3cc>
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 80015b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015bc:	3301      	adds	r3, #1
 80015be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80015c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f43f aeb6 	beq.w	8001338 <DOT_MATRIX_Init+0x190>
        }
    }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3730      	adds	r7, #48	@ 0x30
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	0800c234 	.word	0x0800c234
 80015dc:	200003d8 	.word	0x200003d8

080015e0 <DOT_MATRIX_Init_TMR>:

void DOT_MATRIX_Init_TMR(SPI_HandleTypeDef * hspi, TIM_HandleTypeDef* TMR_Handle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
    uint32_t ARR_Value = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24

	DOT_MATRIX_Init(hspi);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fdcd 	bl	80011a8 <DOT_MATRIX_Init>

	/*--------[ Configure The Matrix Timer Base If Enabled ]-------*/
    if(MATRIX_TIMER_EN == 1)
    {
    	ARR_Value = (MATRIX_TIMER_CLK * 10.0 * MATRIX_TIME_BASE);
 800160e:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    	TMR_Handle->Instance = MATRIX_TIMER;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800161a:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2263      	movs	r2, #99	@ 0x63
 8001620:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	1e5a      	subs	r2, r3, #1
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2280      	movs	r2, #128	@ 0x80
 800163a:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 800163c:	6838      	ldr	r0, [r7, #0]
 800163e:	f004 fe85 	bl	800634c <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001646:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	6838      	ldr	r0, [r7, #0]
 8001650:	f005 f90a 	bl	8006868 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4619      	mov	r1, r3
 8001662:	6838      	ldr	r0, [r7, #0]
 8001664:	f005 fd7a 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	f004 fec7 	bl	80063fc <HAL_TIM_Base_Start_IT>
    }
}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	@ 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <MATRIX_DisplayMessage>:
    }
    TxByte(au8_MATRIX_Instance, Column, 0x00);
}

void MATRIX_DisplayMessage(uint8_t au8_MATRIX_Instance, char* ArrayPointer, uint16_t ArraySize)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
 8001684:	4613      	mov	r3, r2
 8001686:	80bb      	strh	r3, [r7, #4]
	gs_MATRIX_info[au8_MATRIX_Instance].ArrPtr = ArrayPointer;
 8001688:	79fa      	ldrb	r2, [r7, #7]
 800168a:	4913      	ldr	r1, [pc, #76]	@ (80016d8 <MATRIX_DisplayMessage+0x60>)
 800168c:	4613      	mov	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	1a9b      	subs	r3, r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	3318      	adds	r3, #24
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	601a      	str	r2, [r3, #0]
	gs_MATRIX_info[au8_MATRIX_Instance].ArrSize = ArraySize-1;
 800169c:	79fa      	ldrb	r2, [r7, #7]
 800169e:	88bb      	ldrh	r3, [r7, #4]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	b298      	uxth	r0, r3
 80016a4:	490c      	ldr	r1, [pc, #48]	@ (80016d8 <MATRIX_DisplayMessage+0x60>)
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	3314      	adds	r3, #20
 80016b2:	4602      	mov	r2, r0
 80016b4:	801a      	strh	r2, [r3, #0]
	gs_MATRIX_info[au8_MATRIX_Instance].BufferInit = 1;
 80016b6:	79fa      	ldrb	r2, [r7, #7]
 80016b8:	4907      	ldr	r1, [pc, #28]	@ (80016d8 <MATRIX_DisplayMessage+0x60>)
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	1a9b      	subs	r3, r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	330b      	adds	r3, #11
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	200003d8 	.word	0x200003d8

080016dc <MATRIX_TMR_OVF_ISR>:
		}
	}
}

void MATRIX_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 80016dc:	b5b0      	push	{r4, r5, r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0, ch, space = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	2300      	movs	r3, #0
 80016ea:	73bb      	strb	r3, [r7, #14]

	if(htim->Instance == MATRIX_TIMER)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016f4:	f040 80dd 	bne.w	80018b2 <MATRIX_TMR_OVF_ISR+0x1d6>
	{
		for(i=0; i<DOT_MATRIX_UNITS; i++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e0d5      	b.n	80018aa <MATRIX_TMR_OVF_ISR+0x1ce>
		{
			if(gs_MATRIX_info[i].Ticks >= gs_MATRIX_info[i].Max_Ticks)
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	496e      	ldr	r1, [pc, #440]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	6819      	ldr	r1, [r3, #0]
 800170e:	7bfa      	ldrb	r2, [r7, #15]
 8001710:	486a      	ldr	r0, [pc, #424]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4403      	add	r3, r0
 800171c:	3304      	adds	r3, #4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4299      	cmp	r1, r3
 8001722:	f0c0 80af 	bcc.w	8001884 <MATRIX_TMR_OVF_ISR+0x1a8>
			{
				if(gs_MATRIX_info[i].BufferInit == 1 && DOT_MATRIX_CfgParam[i].SCROLL_Mode == SCROLL_MODE)
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	4964      	ldr	r1, [pc, #400]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	1a9b      	subs	r3, r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	440b      	add	r3, r1
 8001734:	330b      	adds	r3, #11
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	f040 8099 	bne.w	8001870 <MATRIX_TMR_OVF_ISR+0x194>
 800173e:	7bfa      	ldrb	r2, [r7, #15]
 8001740:	495f      	ldr	r1, [pc, #380]	@ (80018c0 <MATRIX_TMR_OVF_ISR+0x1e4>)
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	330a      	adds	r3, #10
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	f040 808d 	bne.w	8001870 <MATRIX_TMR_OVF_ISR+0x194>
				{
					if(gs_MATRIX_info[i].Col_Index == 5)
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	4958      	ldr	r1, [pc, #352]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	330a      	adds	r3, #10
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b05      	cmp	r3, #5
 800176a:	d11f      	bne.n	80017ac <MATRIX_TMR_OVF_ISR+0xd0>
					{
						gs_MATRIX_info[i].Arr_Index++;
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	4953      	ldr	r1, [pc, #332]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 8001770:	4613      	mov	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	1a9b      	subs	r3, r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	3308      	adds	r3, #8
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	b298      	uxth	r0, r3
 8001782:	494e      	ldr	r1, [pc, #312]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 8001784:	4613      	mov	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	1a9b      	subs	r3, r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	3308      	adds	r3, #8
 8001790:	4602      	mov	r2, r0
 8001792:	801a      	strh	r2, [r3, #0]
						gs_MATRIX_info[i].Col_Index = 0;
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	4949      	ldr	r1, [pc, #292]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 8001798:	4613      	mov	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	330a      	adds	r3, #10
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
						space = 1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73bb      	strb	r3, [r7, #14]
					}
					if(gs_MATRIX_info[i].Arr_Index == gs_MATRIX_info[i].ArrSize)
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	4943      	ldr	r1, [pc, #268]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	3308      	adds	r3, #8
 80017bc:	8819      	ldrh	r1, [r3, #0]
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	483e      	ldr	r0, [pc, #248]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4403      	add	r3, r0
 80017cc:	3314      	adds	r3, #20
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	4299      	cmp	r1, r3
 80017d2:	d109      	bne.n	80017e8 <MATRIX_TMR_OVF_ISR+0x10c>
					{
						gs_MATRIX_info[i].Arr_Index = 0;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	4939      	ldr	r1, [pc, #228]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	3308      	adds	r3, #8
 80017e4:	2200      	movs	r2, #0
 80017e6:	801a      	strh	r2, [r3, #0]
					}
					if(space)
 80017e8:	7bbb      	ldrb	r3, [r7, #14]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <MATRIX_TMR_OVF_ISR+0x11e>
					{
						PushToBuffer(i, 0x00); // Add White Space To Separate Characters
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fc82 	bl	80010fc <PushToBuffer>
 80017f8:	e036      	b.n	8001868 <MATRIX_TMR_OVF_ISR+0x18c>
					}
					else
					{
						ch = (*(gs_MATRIX_info[i].ArrPtr + gs_MATRIX_info[i].Arr_Index)-32);
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	492f      	ldr	r1, [pc, #188]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 80017fe:	4613      	mov	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	1a9b      	subs	r3, r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	3318      	adds	r3, #24
 800180a:	6819      	ldr	r1, [r3, #0]
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	482b      	ldr	r0, [pc, #172]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4403      	add	r3, r0
 800181a:	3308      	adds	r3, #8
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	440b      	add	r3, r1
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	3b20      	subs	r3, #32
 8001824:	737b      	strb	r3, [r7, #13]
						PushToBuffer(i, FONT_7x5[ch][gs_MATRIX_info[i].Col_Index++]);
 8001826:	7b79      	ldrb	r1, [r7, #13]
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	4824      	ldr	r0, [pc, #144]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4403      	add	r3, r0
 8001836:	330a      	adds	r3, #10
 8001838:	7818      	ldrb	r0, [r3, #0]
 800183a:	1c43      	adds	r3, r0, #1
 800183c:	b2dd      	uxtb	r5, r3
 800183e:	4c1f      	ldr	r4, [pc, #124]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4423      	add	r3, r4
 800184a:	330a      	adds	r3, #10
 800184c:	462a      	mov	r2, r5
 800184e:	701a      	strb	r2, [r3, #0]
 8001850:	4a1c      	ldr	r2, [pc, #112]	@ (80018c4 <MATRIX_TMR_OVF_ISR+0x1e8>)
 8001852:	460b      	mov	r3, r1
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	4413      	add	r3, r2
 800185a:	4403      	add	r3, r0
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fc4a 	bl	80010fc <PushToBuffer>
					}
					DisplayBuffer(i);
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fbd4 	bl	8001018 <DisplayBuffer>
				}
				gs_MATRIX_info[i].Ticks = 0;
 8001870:	7bfa      	ldrb	r2, [r7, #15]
 8001872:	4912      	ldr	r1, [pc, #72]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 8001874:	4613      	mov	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	1a9b      	subs	r3, r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e00f      	b.n	80018a4 <MATRIX_TMR_OVF_ISR+0x1c8>
			}
			else
			{
				gs_MATRIX_info[i].Ticks++;
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	490d      	ldr	r1, [pc, #52]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 8001888:	4613      	mov	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	1c59      	adds	r1, r3, #1
 8001896:	4809      	ldr	r0, [pc, #36]	@ (80018bc <MATRIX_TMR_OVF_ISR+0x1e0>)
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4403      	add	r3, r0
 80018a2:	6019      	str	r1, [r3, #0]
		for(i=0; i<DOT_MATRIX_UNITS; i++)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	3301      	adds	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f43f af26 	beq.w	80016fe <MATRIX_TMR_OVF_ISR+0x22>
			}
		}
	}
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200003d8 	.word	0x200003d8
 80018c0:	0800c234 	.word	0x0800c234
 80018c4:	20000000 	.word	0x20000000

080018c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ce:	463b      	mov	r3, r7
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018de:	4b2a      	ldr	r3, [pc, #168]	@ (8001988 <MX_ADC1_Init+0xc0>)
 80018e0:	4a2a      	ldr	r2, [pc, #168]	@ (800198c <MX_ADC1_Init+0xc4>)
 80018e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018e4:	4b28      	ldr	r3, [pc, #160]	@ (8001988 <MX_ADC1_Init+0xc0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018ea:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <MX_ADC1_Init+0xc0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018f0:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <MX_ADC1_Init+0xc0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018f6:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <MX_ADC1_Init+0xc0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018fc:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <MX_ADC1_Init+0xc0>)
 80018fe:	2204      	movs	r2, #4
 8001900:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001902:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <MX_ADC1_Init+0xc0>)
 8001904:	2200      	movs	r2, #0
 8001906:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001908:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <MX_ADC1_Init+0xc0>)
 800190a:	2200      	movs	r2, #0
 800190c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800190e:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <MX_ADC1_Init+0xc0>)
 8001910:	2201      	movs	r2, #1
 8001912:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001914:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <MX_ADC1_Init+0xc0>)
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 800191c:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <MX_ADC1_Init+0xc0>)
 800191e:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8001922:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <MX_ADC1_Init+0xc0>)
 8001926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800192c:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <MX_ADC1_Init+0xc0>)
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001934:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <MX_ADC1_Init+0xc0>)
 8001936:	2200      	movs	r2, #0
 8001938:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800193a:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <MX_ADC1_Init+0xc0>)
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001942:	4811      	ldr	r0, [pc, #68]	@ (8001988 <MX_ADC1_Init+0xc0>)
 8001944:	f001 fb82 	bl	800304c <HAL_ADC_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800194e:	f000 fcaf 	bl	80022b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001952:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <MX_ADC1_Init+0xc8>)
 8001954:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001956:	2306      	movs	r3, #6
 8001958:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800195a:	2305      	movs	r3, #5
 800195c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800195e:	237f      	movs	r3, #127	@ 0x7f
 8001960:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001962:	2304      	movs	r3, #4
 8001964:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800196a:	463b      	mov	r3, r7
 800196c:	4619      	mov	r1, r3
 800196e:	4806      	ldr	r0, [pc, #24]	@ (8001988 <MX_ADC1_Init+0xc0>)
 8001970:	f001 ff38 	bl	80037e4 <HAL_ADC_ConfigChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800197a:	f000 fc99 	bl	80022b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200003f4 	.word	0x200003f4
 800198c:	50040000 	.word	0x50040000
 8001990:	3ef08000 	.word	0x3ef08000

08001994 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b09e      	sub	sp, #120	@ 0x78
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	2254      	movs	r2, #84	@ 0x54
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f007 fad8 	bl	8008f6a <memset>
  if(adcHandle->Instance==ADC1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a21      	ldr	r2, [pc, #132]	@ (8001a44 <HAL_ADC_MspInit+0xb0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d13b      	bne.n	8001a3c <HAL_ADC_MspInit+0xa8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80019ca:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80019ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 fe53 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80019e0:	f000 fc66 	bl	80022b0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <HAL_ADC_MspInit+0xb4>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	4a17      	ldr	r2, [pc, #92]	@ (8001a48 <HAL_ADC_MspInit+0xb4>)
 80019ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <HAL_ADC_MspInit+0xb4>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <HAL_ADC_MspInit+0xb4>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a00:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <HAL_ADC_MspInit+0xb4>)
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a08:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <HAL_ADC_MspInit+0xb4>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ECG_Pin;
 8001a14:	2301      	movs	r3, #1
 8001a16:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a18:	230b      	movs	r3, #11
 8001a1a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(ECG_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a24:	4619      	mov	r1, r3
 8001a26:	4809      	ldr	r0, [pc, #36]	@ (8001a4c <HAL_ADC_MspInit+0xb8>)
 8001a28:	f002 fdf2 	bl	8004610 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2012      	movs	r0, #18
 8001a32:	f002 fd38 	bl	80044a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001a36:	2012      	movs	r0, #18
 8001a38:	f002 fd51 	bl	80044de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	3778      	adds	r7, #120	@ 0x78
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	50040000 	.word	0x50040000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	48000400 	.word	0x48000400

08001a50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	4b29      	ldr	r3, [pc, #164]	@ (8001b0c <MX_GPIO_Init+0xbc>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	4a28      	ldr	r2, [pc, #160]	@ (8001b0c <MX_GPIO_Init+0xbc>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a72:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <MX_GPIO_Init+0xbc>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b23      	ldr	r3, [pc, #140]	@ (8001b0c <MX_GPIO_Init+0xbc>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	4a22      	ldr	r2, [pc, #136]	@ (8001b0c <MX_GPIO_Init+0xbc>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8a:	4b20      	ldr	r3, [pc, #128]	@ (8001b0c <MX_GPIO_Init+0xbc>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	4b1d      	ldr	r3, [pc, #116]	@ (8001b0c <MX_GPIO_Init+0xbc>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b0c <MX_GPIO_Init+0xbc>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <MX_GPIO_Init+0xbc>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	4817      	ldr	r0, [pc, #92]	@ (8001b10 <MX_GPIO_Init+0xc0>)
 8001ab4:	f002 ff16 	bl	80048e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8001abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac2:	f002 ff0f 	bl	80048e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	4619      	mov	r1, r3
 8001adc:	480c      	ldr	r0, [pc, #48]	@ (8001b10 <MX_GPIO_Init+0xc0>)
 8001ade:	f002 fd97 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin;
 8001ae2:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8001ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4619      	mov	r1, r3
 8001afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001afe:	f002 fd87 	bl	8004610 <HAL_GPIO_Init>

}
 8001b02:	bf00      	nop
 8001b04:	3720      	adds	r7, #32
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	48000400 	.word	0x48000400

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b18:	f001 f823 	bl	8002b62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1c:	f000 f83c 	bl	8001b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b20:	f7ff ff96 	bl	8001a50 <MX_GPIO_Init>
  MX_TIM7_Init();
 8001b24:	f000 fdf8 	bl	8002718 <MX_TIM7_Init>
  MX_ADC1_Init();
 8001b28:	f7ff fece 	bl	80018c8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001b2c:	f000 ff60 	bl	80029f0 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8001b30:	f000 fe2a 	bl	8002788 <MX_TIM15_Init>
  MX_SPI3_Init();
 8001b34:	f000 fbc2 	bl	80022bc <MX_SPI3_Init>
  MX_TIM2_Init();
 8001b38:	f000 fda0 	bl	800267c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  lpf_compute_coeffs(LP_CUTOFF, SAMPLE_RATE);
 8001b3c:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8001b78 <main+0x64>
 8001b40:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001b7c <main+0x68>
 8001b44:	f000 f8b4 	bl	8001cb0 <lpf_compute_coeffs>

  HAL_TIM_Base_Start_IT(&htim7);
 8001b48:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <main+0x6c>)
 8001b4a:	f004 fc57 	bl	80063fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 8001b4e:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <main+0x70>)
 8001b50:	f004 fc54 	bl	80063fc <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001b54:	217f      	movs	r1, #127	@ 0x7f
 8001b56:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <main+0x74>)
 8001b58:	f002 fb38 	bl	80041cc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 8001b5c:	480a      	ldr	r0, [pc, #40]	@ (8001b88 <main+0x74>)
 8001b5e:	f001 fbb7 	bl	80032d0 <HAL_ADC_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim7);
  //HAL_SPI_Init(&hspi3);

  DOT_MATRIX_Init_TMR(&hspi3, &htim2);
 8001b62:	490a      	ldr	r1, [pc, #40]	@ (8001b8c <main+0x78>)
 8001b64:	480a      	ldr	r0, [pc, #40]	@ (8001b90 <main+0x7c>)
 8001b66:	f7ff fd3b 	bl	80015e0 <DOT_MATRIX_Init_TMR>
  MATRIX_DisplayMessage(MATRIX_DISPLAY_UNIT1, bpm_buffer, sizeof(bpm_buffer));
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	4909      	ldr	r1, [pc, #36]	@ (8001b94 <main+0x80>)
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff fd82 	bl	8001678 <MATRIX_DisplayMessage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <main+0x60>
 8001b78:	44bb8000 	.word	0x44bb8000
 8001b7c:	42340000 	.word	0x42340000
 8001b80:	2000a4cc 	.word	0x2000a4cc
 8001b84:	2000a518 	.word	0x2000a518
 8001b88:	200003f4 	.word	0x200003f4
 8001b8c:	2000a480 	.word	0x2000a480
 8001b90:	2000a418 	.word	0x2000a418
 8001b94:	2000a2c4 	.word	0x2000a2c4

08001b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b096      	sub	sp, #88	@ 0x58
 8001b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	2244      	movs	r2, #68	@ 0x44
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f007 f9df 	bl	8008f6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bac:	463b      	mov	r3, r7
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bbe:	f002 fed1 	bl	8004964 <HAL_PWREx_ControlVoltageScaling>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bc8:	f000 fb72 	bl	80022b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bd4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bde:	2302      	movs	r3, #2
 8001be0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001be2:	2301      	movs	r3, #1
 8001be4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001be6:	230a      	movs	r3, #10
 8001be8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bea:	2307      	movs	r3, #7
 8001bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 ff08 	bl	8004a10 <HAL_RCC_OscConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c06:	f000 fb53 	bl	80022b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c0a:	230f      	movs	r3, #15
 8001c0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c1e:	463b      	mov	r3, r7
 8001c20:	2104      	movs	r1, #4
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fb08 	bl	8005238 <HAL_RCC_ClockConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c2e:	f000 fb3f 	bl	80022b0 <Error_Handler>
  }
}
 8001c32:	bf00      	nop
 8001c34:	3758      	adds	r7, #88	@ 0x58
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// LED toggle
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a12      	ldr	r2, [pc, #72]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d103      	bne.n	8001c56 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//led clignote
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001c4e:	2102      	movs	r1, #2
 8001c50:	4811      	ldr	r0, [pc, #68]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001c52:	f002 fe5f 	bl	8004914 <HAL_GPIO_TogglePin>
	}

	//affichage bpm sur oled

	MATRIX_TMR_OVF_ISR(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fd40 	bl	80016dc <MATRIX_TMR_OVF_ISR>

	cnt_bpm++;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	4a0e      	ldr	r2, [pc, #56]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c64:	6013      	str	r3, [r2, #0]
	if (cnt_bpm>40) {
 8001c66:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b28      	cmp	r3, #40	@ 0x28
 8001c6c:	dd0d      	ble.n	8001c8a <HAL_TIM_PeriodElapsedCallback+0x4e>
		sprintf(bpm_buffer, "%dbpm", (int)bpm);
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c78:	ee17 2a90 	vmov	r2, s15
 8001c7c:	4909      	ldr	r1, [pc, #36]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c7e:	480a      	ldr	r0, [pc, #40]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c80:	f007 f90e 	bl	8008ea0 <siprintf>
		cnt_bpm = 0;
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
	}

}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40001400 	.word	0x40001400
 8001c98:	48000400 	.word	0x48000400
 8001c9c:	2000a2cc 	.word	0x2000a2cc
 8001ca0:	2000a2c0 	.word	0x2000a2c0
 8001ca4:	0800c210 	.word	0x0800c210
 8001ca8:	2000a2c4 	.word	0x2000a2c4
 8001cac:	00000000 	.word	0x00000000

08001cb0 <lpf_compute_coeffs>:

//calcul des coefs du passe bas
void lpf_compute_coeffs(float cutoff, float samplerate) {
 8001cb0:	b5b0      	push	{r4, r5, r7, lr}
 8001cb2:	b08a      	sub	sp, #40	@ 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cba:	edc7 0a00 	vstr	s1, [r7]
    // Calcul des coefficients d'un filtre FIR passe-bas avec fenêtre de Hamming
    float fc = cutoff / samplerate;  // Fréquence de coupure normalisée (0 à 0.5)
 8001cbe:	edd7 6a01 	vldr	s13, [r7, #4]
 8001cc2:	ed97 7a00 	vldr	s14, [r7]
 8001cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cca:	edc7 7a05 	vstr	s15, [r7, #20]
    int middle = FIR_ORDER / 2;
 8001cce:	2320      	movs	r3, #32
 8001cd0:	613b      	str	r3, [r7, #16]

    // Création du filtre FIR
    for (int i = 0; i <= FIR_ORDER; i++) {
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd6:	e083      	b.n	8001de0 <lpf_compute_coeffs+0x130>
        if (i == middle) {
 8001cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d10a      	bne.n	8001cf6 <lpf_compute_coeffs+0x46>
            // Cas spécial pour éviter la division par zéro
            fir_coeffs[i] = 2.0f * fc;
 8001ce0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ce4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ce8:	4a5f      	ldr	r2, [pc, #380]	@ (8001e68 <lpf_compute_coeffs+0x1b8>)
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	edc3 7a00 	vstr	s15, [r3]
 8001cf4:	e030      	b.n	8001d58 <lpf_compute_coeffs+0xa8>
        } else {
            // Formule du filtre sinus cardinal
            float x = 2.0f * PI * fc * (i - middle);
 8001cf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cfa:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001e6c <lpf_compute_coeffs+0x1bc>
 8001cfe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d14:	edc7 7a03 	vstr	s15, [r7, #12]
            fir_coeffs[i] = sin(x) / x;
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f7fe fc15 	bl	8000548 <__aeabi_f2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	ec43 2b10 	vmov	d0, r2, r3
 8001d26:	f009 fa43 	bl	800b1b0 <sin>
 8001d2a:	ec55 4b10 	vmov	r4, r5, d0
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f7fe fc0a 	bl	8000548 <__aeabi_f2d>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f7fe fd86 	bl	800084c <__aeabi_ddiv>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	f7fe ff2e 	bl	8000ba8 <__aeabi_d2f>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4946      	ldr	r1, [pc, #280]	@ (8001e68 <lpf_compute_coeffs+0x1b8>)
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	601a      	str	r2, [r3, #0]
        }

        // Application de la fenêtre de Hamming
        fir_coeffs[i] *= (0.54f - 0.46f * cos(2.0f * PI * i / FIR_ORDER));
 8001d58:	4a43      	ldr	r2, [pc, #268]	@ (8001e68 <lpf_compute_coeffs+0x1b8>)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fbf0 	bl	8000548 <__aeabi_f2d>
 8001d68:	4604      	mov	r4, r0
 8001d6a:	460d      	mov	r5, r1
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d76:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001e6c <lpf_compute_coeffs+0x1bc>
 8001d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001e70 <lpf_compute_coeffs+0x1c0>
 8001d82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d86:	ee16 0a90 	vmov	r0, s13
 8001d8a:	f7fe fbdd 	bl	8000548 <__aeabi_f2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	ec43 2b10 	vmov	d0, r2, r3
 8001d96:	f009 f9b7 	bl	800b108 <cos>
 8001d9a:	ec51 0b10 	vmov	r0, r1, d0
 8001d9e:	a32e      	add	r3, pc, #184	@ (adr r3, 8001e58 <lpf_compute_coeffs+0x1a8>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fc28 	bl	80005f8 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	a12c      	add	r1, pc, #176	@ (adr r1, 8001e60 <lpf_compute_coeffs+0x1b0>)
 8001dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001db2:	f7fe fa69 	bl	8000288 <__aeabi_dsub>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4620      	mov	r0, r4
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	f7fe fc1b 	bl	80005f8 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe feed 	bl	8000ba8 <__aeabi_d2f>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4925      	ldr	r1, [pc, #148]	@ (8001e68 <lpf_compute_coeffs+0x1b8>)
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i <= FIR_ORDER; i++) {
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	3301      	adds	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	2b40      	cmp	r3, #64	@ 0x40
 8001de4:	f77f af78 	ble.w	8001cd8 <lpf_compute_coeffs+0x28>
    }

    // Normalisation des coefficients pour un gain unitaire
    float sum = 0.0f;
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
    for (int i = 0; i <= FIR_ORDER; i++) {
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	e00e      	b.n	8001e12 <lpf_compute_coeffs+0x162>
        sum += fir_coeffs[i];
 8001df4:	4a1c      	ldr	r2, [pc, #112]	@ (8001e68 <lpf_compute_coeffs+0x1b8>)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e08:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i <= FIR_ORDER; i++) {
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	61fb      	str	r3, [r7, #28]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	2b40      	cmp	r3, #64	@ 0x40
 8001e16:	dded      	ble.n	8001df4 <lpf_compute_coeffs+0x144>
    }

    for (int i = 0; i <= FIR_ORDER; i++) {
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	e012      	b.n	8001e44 <lpf_compute_coeffs+0x194>
        fir_coeffs[i] /= sum;
 8001e1e:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <lpf_compute_coeffs+0x1b8>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	edd3 6a00 	vldr	s13, [r3]
 8001e2a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e32:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <lpf_compute_coeffs+0x1b8>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i <= FIR_ORDER; i++) {
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	3301      	adds	r3, #1
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b40      	cmp	r3, #64	@ 0x40
 8001e48:	dde9      	ble.n	8001e1e <lpf_compute_coeffs+0x16e>
    }
}
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	3728      	adds	r7, #40	@ 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bdb0      	pop	{r4, r5, r7, pc}
 8001e54:	f3af 8000 	nop.w
 8001e58:	e0000000 	.word	0xe0000000
 8001e5c:	3fdd70a3 	.word	0x3fdd70a3
 8001e60:	20000000 	.word	0x20000000
 8001e64:	3fe147ae 	.word	0x3fe147ae
 8001e68:	2000a09c 	.word	0x2000a09c
 8001e6c:	40c90fdb 	.word	0x40c90fdb
 8001e70:	42800000 	.word	0x42800000

08001e74 <apply_lpf_order2>:


/* filtre FIR */
float apply_lpf_order2(float input) {
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	ed87 0a01 	vstr	s0, [r7, #4]
    // Décalage du buffer
    for (int i = FIR_ORDER; i > 0; i--) {
 8001e7e:	2340      	movs	r3, #64	@ 0x40
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e00d      	b.n	8001ea0 <apply_lpf_order2+0x2c>
        fir_buffer[i] = fir_buffer[i-1];
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	4a1d      	ldr	r2, [pc, #116]	@ (8001f00 <apply_lpf_order2+0x8c>)
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	491b      	ldr	r1, [pc, #108]	@ (8001f00 <apply_lpf_order2+0x8c>)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	601a      	str	r2, [r3, #0]
    for (int i = FIR_ORDER; i > 0; i--) {
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dcee      	bgt.n	8001e84 <apply_lpf_order2+0x10>
    }
    fir_buffer[0] = input;
 8001ea6:	4a16      	ldr	r2, [pc, #88]	@ (8001f00 <apply_lpf_order2+0x8c>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6013      	str	r3, [r2, #0]

    // Application du filtre FIR
    float output = 0.0f;
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
    for (int i = 0; i <= FIR_ORDER; i++) {
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	e016      	b.n	8001ee6 <apply_lpf_order2+0x72>
        output += fir_coeffs[i] * fir_buffer[i];
 8001eb8:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <apply_lpf_order2+0x90>)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	ed93 7a00 	vldr	s14, [r3]
 8001ec4:	4a0e      	ldr	r2, [pc, #56]	@ (8001f00 <apply_lpf_order2+0x8c>)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001edc:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i <= FIR_ORDER; i++) {
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b40      	cmp	r3, #64	@ 0x40
 8001eea:	dde5      	ble.n	8001eb8 <apply_lpf_order2+0x44>
    }

    return output;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	ee07 3a90 	vmov	s15, r3
}
 8001ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	2000a1a0 	.word	0x2000a1a0
 8001f04:	2000a09c 	.word	0x2000a09c

08001f08 <apply_kalman_filter>:

/* Filtre de Kalman */
float apply_kalman_filter(float input) {
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Prédiction
    // x(k|k-1) = x(k-1|k-1) (modèle simple, pas de changement prédit)
    // P(k|k-1) = P(k-1|k-1) + Q
    kalman_p = kalman_p + KALMAN_Q;
 8001f12:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc4 <apply_kalman_filter+0xbc>)
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001fc8 <apply_kalman_filter+0xc0>
 8001f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f20:	4b28      	ldr	r3, [pc, #160]	@ (8001fc4 <apply_kalman_filter+0xbc>)
 8001f22:	edc3 7a00 	vstr	s15, [r3]

    // Mise à jour
    // K(k) = P(k|k-1) / (P(k|k-1) + R)
    kalman_k = kalman_p / (kalman_p + KALMAN_R);
 8001f26:	4b27      	ldr	r3, [pc, #156]	@ (8001fc4 <apply_kalman_filter+0xbc>)
 8001f28:	edd3 6a00 	vldr	s13, [r3]
 8001f2c:	4b25      	ldr	r3, [pc, #148]	@ (8001fc4 <apply_kalman_filter+0xbc>)
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
 8001f32:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001fcc <apply_kalman_filter+0xc4>
 8001f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f3e:	4b24      	ldr	r3, [pc, #144]	@ (8001fd0 <apply_kalman_filter+0xc8>)
 8001f40:	edc3 7a00 	vstr	s15, [r3]

    // x(k|k) = x(k|k-1) + K(k) * (z(k) - x(k|k-1))
    float innovation = input - kalman_x;
 8001f44:	4b23      	ldr	r3, [pc, #140]	@ (8001fd4 <apply_kalman_filter+0xcc>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f52:	edc7 7a03 	vstr	s15, [r7, #12]
    kalman_x = kalman_x + kalman_k * innovation;
 8001f56:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <apply_kalman_filter+0xc8>)
 8001f58:	ed93 7a00 	vldr	s14, [r3]
 8001f5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f64:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <apply_kalman_filter+0xcc>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6e:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <apply_kalman_filter+0xcc>)
 8001f70:	edc3 7a00 	vstr	s15, [r3]

    // P(k|k) = (1 - K(k)) * P(k|k-1)
    kalman_p = (1.0f - kalman_k) * kalman_p;
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <apply_kalman_filter+0xc8>)
 8001f76:	edd3 7a00 	vldr	s15, [r3]
 8001f7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f82:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <apply_kalman_filter+0xbc>)
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <apply_kalman_filter+0xbc>)
 8001f8e:	edc3 7a00 	vstr	s15, [r3]

    // Calculer la dérivée pour agir comme un filtre passe-haut
    float kalman_derivative = kalman_x - kalman_prev;
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <apply_kalman_filter+0xcc>)
 8001f94:	ed93 7a00 	vldr	s14, [r3]
 8001f98:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd8 <apply_kalman_filter+0xd0>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa2:	edc7 7a02 	vstr	s15, [r7, #8]
    kalman_prev = kalman_x;
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <apply_kalman_filter+0xcc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd8 <apply_kalman_filter+0xd0>)
 8001fac:	6013      	str	r3, [r2, #0]

    return kalman_derivative;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	ee07 3a90 	vmov	s15, r3
}
 8001fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	200001e0 	.word	0x200001e0
 8001fc8:	38d1b717 	.word	0x38d1b717
 8001fcc:	3ba3d70a 	.word	0x3ba3d70a
 8001fd0:	2000a2a8 	.word	0x2000a2a8
 8001fd4:	2000a2a4 	.word	0x2000a2a4
 8001fd8:	2000a2ac 	.word	0x2000a2ac

08001fdc <HAL_ADC_ConvCpltCallback>:

// ADC callback: collecte des données et calcul de la moyenne après K appels
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    uint16_t raw_val = HAL_ADC_GetValue(hadc);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f001 fa27 	bl	8003438 <HAL_ADC_GetValue>
 8001fea:	4603      	mov	r3, r0
 8001fec:	827b      	strh	r3, [r7, #18]

    // Stockage dans le buffer temporaire
    adc_buffer[adc_count] = raw_val;
 8001fee:	4b2a      	ldr	r3, [pc, #168]	@ (8002098 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4a29      	ldr	r2, [pc, #164]	@ (800209c <HAL_ADC_ConvCpltCallback+0xc0>)
 8001ff6:	8a7b      	ldrh	r3, [r7, #18]
 8001ff8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    adc_count++;
 8001ffc:	4b26      	ldr	r3, [pc, #152]	@ (8002098 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	b2da      	uxtb	r2, r3
 8002004:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <HAL_ADC_ConvCpltCallback+0xbc>)
 8002006:	701a      	strb	r2, [r3, #0]

    // Après K appels, calculer la moyenne et traiter
    if (adc_count >= K)
 8002008:	4b23      	ldr	r3, [pc, #140]	@ (8002098 <HAL_ADC_ConvCpltCallback+0xbc>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d93e      	bls.n	800208e <HAL_ADC_ConvCpltCallback+0xb2>
    {
        float sum = 0.0f;
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < K; i++)
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	e026      	b.n	800206a <HAL_ADC_ConvCpltCallback+0x8e>
        {
            // Appliquer la saturation
            float val;
            if (adc_buffer[i] < 800.0f)
 800201c:	4a1f      	ldr	r2, [pc, #124]	@ (800209c <HAL_ADC_ConvCpltCallback+0xc0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80020a0 <HAL_ADC_ConvCpltCallback+0xc4>
 8002030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002038:	d50a      	bpl.n	8002050 <HAL_ADC_ConvCpltCallback+0x74>
            {
                val = (float)adc_buffer[i];
 800203a:	4a18      	ldr	r2, [pc, #96]	@ (800209c <HAL_ADC_ConvCpltCallback+0xc0>)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204a:	edc7 7a05 	vstr	s15, [r7, #20]
 800204e:	e001      	b.n	8002054 <HAL_ADC_ConvCpltCallback+0x78>
            }
            else
            {
                val = 800.0f;
 8002050:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8002052:	617b      	str	r3, [r7, #20]
            }
            sum += val;
 8002054:	ed97 7a07 	vldr	s14, [r7, #28]
 8002058:	edd7 7a05 	vldr	s15, [r7, #20]
 800205c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002060:	edc7 7a07 	vstr	s15, [r7, #28]
        for (int i = 0; i < K; i++)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	3301      	adds	r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	2b02      	cmp	r3, #2
 800206e:	ddd5      	ble.n	800201c <HAL_ADC_ConvCpltCallback+0x40>
        }

        // Calculer la moyenne
        float avg_val = sum / K;
 8002070:	ed97 7a07 	vldr	s14, [r7, #28]
 8002074:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002078:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800207c:	edc7 7a03 	vstr	s15, [r7, #12]

        // Traiter et transmettre
        process_and_transmit(avg_val);
 8002080:	ed97 0a03 	vldr	s0, [r7, #12]
 8002084:	f000 f810 	bl	80020a8 <process_and_transmit>

        // Réinitialiser le compteur
        adc_count = 0;
 8002088:	4b03      	ldr	r3, [pc, #12]	@ (8002098 <HAL_ADC_ConvCpltCallback+0xbc>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
    }
}
 800208e:	bf00      	nop
 8002090:	3720      	adds	r7, #32
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000a2b6 	.word	0x2000a2b6
 800209c:	2000a2b0 	.word	0x2000a2b0
 80020a0:	44480000 	.word	0x44480000
 80020a4:	44480000 	.word	0x44480000

080020a8 <process_and_transmit>:

// Fonction pour traiter et transmettre la valeur moyenne
void process_and_transmit(float avg_val)
{
 80020a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ac:	b0a4      	sub	sp, #144	@ 0x90
 80020ae:	af08      	add	r7, sp, #32
 80020b0:	ed87 0a03 	vstr	s0, [r7, #12]
    // Filtre passe-bas (LP) ordre 2
    float lp_val = apply_lpf_order2(avg_val);
 80020b4:	ed97 0a03 	vldr	s0, [r7, #12]
 80020b8:	f7ff fedc 	bl	8001e74 <apply_lpf_order2>
 80020bc:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c

    // Filtre passe-haut (HP)
    float kalman_val = apply_kalman_filter(lp_val);
 80020c0:	ed97 0a1b 	vldr	s0, [r7, #108]	@ 0x6c
 80020c4:	f7ff ff20 	bl	8001f08 <apply_kalman_filter>
 80020c8:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68

    // Stockage circulaire
    filtered_buffer[buffer_index] = kalman_val;
 80020cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002278 <process_and_transmit+0x1d0>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	4a6a      	ldr	r2, [pc, #424]	@ (800227c <process_and_transmit+0x1d4>)
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80020da:	601a      	str	r2, [r3, #0]
    buffer_index = (buffer_index + 1) % BUFFER_SIZE;
 80020dc:	4b66      	ldr	r3, [pc, #408]	@ (8002278 <process_and_transmit+0x1d0>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	4a66      	ldr	r2, [pc, #408]	@ (8002280 <process_and_transmit+0x1d8>)
 80020e6:	fb82 1203 	smull	r1, r2, r2, r3
 80020ea:	1311      	asrs	r1, r2, #12
 80020ec:	17da      	asrs	r2, r3, #31
 80020ee:	1a8a      	subs	r2, r1, r2
 80020f0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80020f4:	fb01 f202 	mul.w	r2, r1, r2
 80020f8:	1a9a      	subs	r2, r3, r2
 80020fa:	b292      	uxth	r2, r2
 80020fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002278 <process_and_transmit+0x1d0>)
 80020fe:	801a      	strh	r2, [r3, #0]
    // Tableau pour stocker les horodatages des pics
    static uint32_t peak_times[NUM_PEAKS_FOR_BPM] = {0};
    static int peak_index = 0;

    // Élévation au carré
    squared_val = kalman_val * kalman_val;
 8002100:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002104:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002108:	4b5e      	ldr	r3, [pc, #376]	@ (8002284 <process_and_transmit+0x1dc>)
 800210a:	edc3 7a00 	vstr	s15, [r3]

    // Détection des pics
    if (squared_val > THRESHOLD_BPM) {
 800210e:	4b5d      	ldr	r3, [pc, #372]	@ (8002284 <process_and_transmit+0x1dc>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002288 <process_and_transmit+0x1e0>
 8002118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002120:	dd27      	ble.n	8002172 <process_and_transmit+0xca>
        uint32_t current_time = HAL_GetTick(); // Temps en ms
 8002122:	f000 fd87 	bl	8002c34 <HAL_GetTick>
 8002126:	6678      	str	r0, [r7, #100]	@ 0x64

        // Éviter la détection de plusieurs pics trop rapprochés
        if (current_time - last_peak_time > 300) {
 8002128:	4b58      	ldr	r3, [pc, #352]	@ (800228c <process_and_transmit+0x1e4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002134:	d91d      	bls.n	8002172 <process_and_transmit+0xca>
            // Enregistrer l'horodatage du pic actuel
            peak_times[peak_index] = current_time;
 8002136:	4b56      	ldr	r3, [pc, #344]	@ (8002290 <process_and_transmit+0x1e8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4956      	ldr	r1, [pc, #344]	@ (8002294 <process_and_transmit+0x1ec>)
 800213c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            peak_index = (peak_index + 1) % NUM_PEAKS_FOR_BPM; // Stockage circulaire
 8002142:	4b53      	ldr	r3, [pc, #332]	@ (8002290 <process_and_transmit+0x1e8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	1c59      	adds	r1, r3, #1
 8002148:	4b53      	ldr	r3, [pc, #332]	@ (8002298 <process_and_transmit+0x1f0>)
 800214a:	fb83 2301 	smull	r2, r3, r3, r1
 800214e:	115a      	asrs	r2, r3, #5
 8002150:	17cb      	asrs	r3, r1, #31
 8002152:	1ad2      	subs	r2, r2, r3
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	1aca      	subs	r2, r1, r3
 800215e:	4b4c      	ldr	r3, [pc, #304]	@ (8002290 <process_and_transmit+0x1e8>)
 8002160:	601a      	str	r2, [r3, #0]

            // Mettre à jour le dernier temps de pic
            last_peak_time = current_time;
 8002162:	4a4a      	ldr	r2, [pc, #296]	@ (800228c <process_and_transmit+0x1e4>)
 8002164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002166:	6013      	str	r3, [r2, #0]
            peak_count++;
 8002168:	4b4c      	ldr	r3, [pc, #304]	@ (800229c <process_and_transmit+0x1f4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3301      	adds	r3, #1
 800216e:	4a4b      	ldr	r2, [pc, #300]	@ (800229c <process_and_transmit+0x1f4>)
 8002170:	6013      	str	r3, [r2, #0]
        }
    }

    // Calcul du BPM basé sur les derniers pics (ou moins si pas assez de pics)
    if (peak_count >= 2) {  // Besoin d'au moins 2 pics pour calculer
 8002172:	4b4a      	ldr	r3, [pc, #296]	@ (800229c <process_and_transmit+0x1f4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	dd3e      	ble.n	80021f8 <process_and_transmit+0x150>
        int num_peaks_to_use = (peak_count < NUM_PEAKS_FOR_BPM) ? peak_count : NUM_PEAKS_FOR_BPM;
 800217a:	4b48      	ldr	r3, [pc, #288]	@ (800229c <process_and_transmit+0x1f4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002180:	dc02      	bgt.n	8002188 <process_and_transmit+0xe0>
 8002182:	4b46      	ldr	r3, [pc, #280]	@ (800229c <process_and_transmit+0x1f4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	e000      	b.n	800218a <process_and_transmit+0xe2>
 8002188:	2350      	movs	r3, #80	@ 0x50
 800218a:	663b      	str	r3, [r7, #96]	@ 0x60

        // Trouver le pic le plus ancien parmi ceux qu'on utilise
        int oldest_peak_idx = (peak_index - num_peaks_to_use + NUM_PEAKS_FOR_BPM) % NUM_PEAKS_FOR_BPM;
 800218c:	4b40      	ldr	r3, [pc, #256]	@ (8002290 <process_and_transmit+0x1e8>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8002198:	4b3f      	ldr	r3, [pc, #252]	@ (8002298 <process_and_transmit+0x1f0>)
 800219a:	fb83 1302 	smull	r1, r3, r3, r2
 800219e:	1159      	asrs	r1, r3, #5
 80021a0:	17d3      	asrs	r3, r2, #31
 80021a2:	1ac9      	subs	r1, r1, r3
 80021a4:	460b      	mov	r3, r1
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
        uint32_t oldest_time = peak_times[oldest_peak_idx];
 80021b0:	4a38      	ldr	r2, [pc, #224]	@ (8002294 <process_and_transmit+0x1ec>)
 80021b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	65bb      	str	r3, [r7, #88]	@ 0x58

        // Si l'horodatage le plus ancien est valide
        if (oldest_time > 0) {
 80021ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01b      	beq.n	80021f8 <process_and_transmit+0x150>
            // Calcul du BPM basé sur le temps entre le pic le plus ancien et le plus récent
            uint32_t time_span = last_peak_time - oldest_time;
 80021c0:	4b32      	ldr	r3, [pc, #200]	@ (800228c <process_and_transmit+0x1e4>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	657b      	str	r3, [r7, #84]	@ 0x54
            if (time_span > 0) {
 80021ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <process_and_transmit+0x150>
                // Nombre de battements dans cet intervalle est (num_peaks_to_use - 1)
                bpm = ((num_peaks_to_use - 1) * 60000.0f) / (float)time_span;
 80021d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021d2:	3b01      	subs	r3, #1
 80021d4:	ee07 3a90 	vmov	s15, r3
 80021d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021dc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80022a0 <process_and_transmit+0x1f8>
 80021e0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80021e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f2:	4b2c      	ldr	r3, [pc, #176]	@ (80022a4 <process_and_transmit+0x1fc>)
 80021f4:	edc3 7a00 	vstr	s15, [r3]
        }
    }

    // Transmission UART des valeurs pour Serial Plotter
    char tx_buffer[64];
    sprintf(tx_buffer, "%.2f %.2f %.2f %.2f %.2f\n", avg_val, lp_val, kalman_val, squared_val, bpm);
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f7fe f9a5 	bl	8000548 <__aeabi_f2d>
 80021fe:	e9c7 0100 	strd	r0, r1, [r7]
 8002202:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002204:	f7fe f9a0 	bl	8000548 <__aeabi_f2d>
 8002208:	4604      	mov	r4, r0
 800220a:	460d      	mov	r5, r1
 800220c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800220e:	f7fe f99b 	bl	8000548 <__aeabi_f2d>
 8002212:	4680      	mov	r8, r0
 8002214:	4689      	mov	r9, r1
 8002216:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <process_and_transmit+0x1dc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f994 	bl	8000548 <__aeabi_f2d>
 8002220:	4682      	mov	sl, r0
 8002222:	468b      	mov	fp, r1
 8002224:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <process_and_transmit+0x1fc>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe f98d 	bl	8000548 <__aeabi_f2d>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	f107 0014 	add.w	r0, r7, #20
 8002236:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800223a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800223e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002242:	e9cd 4500 	strd	r4, r5, [sp]
 8002246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800224a:	4917      	ldr	r1, [pc, #92]	@ (80022a8 <process_and_transmit+0x200>)
 800224c:	f006 fe28 	bl	8008ea0 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe f80b 	bl	8000270 <strlen>
 800225a:	4603      	mov	r3, r0
 800225c:	b29a      	uxth	r2, r3
 800225e:	f107 0114 	add.w	r1, r7, #20
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	4811      	ldr	r0, [pc, #68]	@ (80022ac <process_and_transmit+0x204>)
 8002268:	f005 f8c2 	bl	80073f0 <HAL_UART_Transmit>
}
 800226c:	bf00      	nop
 800226e:	3770      	adds	r7, #112	@ 0x70
 8002270:	46bd      	mov	sp, r7
 8002272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002276:	bf00      	nop
 8002278:	2000a098 	.word	0x2000a098
 800227c:	20000458 	.word	0x20000458
 8002280:	68db8bad 	.word	0x68db8bad
 8002284:	2000a2d0 	.word	0x2000a2d0
 8002288:	3dcccccd 	.word	0x3dcccccd
 800228c:	2000a2b8 	.word	0x2000a2b8
 8002290:	2000a2d4 	.word	0x2000a2d4
 8002294:	2000a2d8 	.word	0x2000a2d8
 8002298:	66666667 	.word	0x66666667
 800229c:	2000a2bc 	.word	0x2000a2bc
 80022a0:	476a6000 	.word	0x476a6000
 80022a4:	2000a2c0 	.word	0x2000a2c0
 80022a8:	0800c218 	.word	0x0800c218
 80022ac:	2000a564 	.word	0x2000a564

080022b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022b4:	b672      	cpsid	i
}
 80022b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <Error_Handler+0x8>

080022bc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <MX_SPI3_Init+0x74>)
 80022c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002334 <MX_SPI3_Init+0x78>)
 80022c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002330 <MX_SPI3_Init+0x74>)
 80022c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80022ce:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <MX_SPI3_Init+0x74>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80022d4:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <MX_SPI3_Init+0x74>)
 80022d6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80022da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022dc:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <MX_SPI3_Init+0x74>)
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022e2:	4b13      	ldr	r3, [pc, #76]	@ (8002330 <MX_SPI3_Init+0x74>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <MX_SPI3_Init+0x74>)
 80022ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80022f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <MX_SPI3_Init+0x74>)
 80022f2:	2238      	movs	r2, #56	@ 0x38
 80022f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <MX_SPI3_Init+0x74>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <MX_SPI3_Init+0x74>)
 80022fe:	2200      	movs	r2, #0
 8002300:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002302:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <MX_SPI3_Init+0x74>)
 8002304:	2200      	movs	r2, #0
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002308:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <MX_SPI3_Init+0x74>)
 800230a:	2207      	movs	r2, #7
 800230c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800230e:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <MX_SPI3_Init+0x74>)
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <MX_SPI3_Init+0x74>)
 8002316:	2208      	movs	r2, #8
 8002318:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800231a:	4805      	ldr	r0, [pc, #20]	@ (8002330 <MX_SPI3_Init+0x74>)
 800231c:	f003 fc98 	bl	8005c50 <HAL_SPI_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002326:	f7ff ffc3 	bl	80022b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	2000a418 	.word	0x2000a418
 8002334:	40003c00 	.word	0x40003c00

08002338 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	@ 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <HAL_SPI_MspInit+0x7c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d127      	bne.n	80023aa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800235a:	4b17      	ldr	r3, [pc, #92]	@ (80023b8 <HAL_SPI_MspInit+0x80>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235e:	4a16      	ldr	r2, [pc, #88]	@ (80023b8 <HAL_SPI_MspInit+0x80>)
 8002360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002364:	6593      	str	r3, [r2, #88]	@ 0x58
 8002366:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <HAL_SPI_MspInit+0x80>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002372:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_SPI_MspInit+0x80>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	4a10      	ldr	r2, [pc, #64]	@ (80023b8 <HAL_SPI_MspInit+0x80>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <HAL_SPI_MspInit+0x80>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800238a:	2328      	movs	r3, #40	@ 0x28
 800238c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800239a:	2306      	movs	r3, #6
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	4805      	ldr	r0, [pc, #20]	@ (80023bc <HAL_SPI_MspInit+0x84>)
 80023a6:	f002 f933 	bl	8004610 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80023aa:	bf00      	nop
 80023ac:	3728      	adds	r7, #40	@ 0x28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40003c00 	.word	0x40003c00
 80023b8:	40021000 	.word	0x40021000
 80023bc:	48000400 	.word	0x48000400

080023c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <HAL_MspInit+0x44>)
 80023c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002404 <HAL_MspInit+0x44>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80023d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <HAL_MspInit+0x44>)
 80023d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_MspInit+0x44>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	4a08      	ldr	r2, [pc, #32]	@ (8002404 <HAL_MspInit+0x44>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_MspInit+0x44>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000

08002408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <NMI_Handler+0x4>

08002410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <HardFault_Handler+0x4>

08002418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <MemManage_Handler+0x4>

08002420 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <BusFault_Handler+0x4>

08002428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <UsageFault_Handler+0x4>

08002430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800245e:	f000 fbd5 	bl	8002c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800246c:	4802      	ldr	r0, [pc, #8]	@ (8002478 <ADC1_IRQHandler+0x10>)
 800246e:	f000 fff0 	bl	8003452 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200003f4 	.word	0x200003f4

0800247c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002480:	4802      	ldr	r0, [pc, #8]	@ (800248c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002482:	f004 f870 	bl	8006566 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2000a518 	.word	0x2000a518

08002490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002494:	4802      	ldr	r0, [pc, #8]	@ (80024a0 <TIM2_IRQHandler+0x10>)
 8002496:	f004 f866 	bl	8006566 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000a480 	.word	0x2000a480

080024a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024a8:	4802      	ldr	r0, [pc, #8]	@ (80024b4 <USART1_IRQHandler+0x10>)
 80024aa:	f005 f82b 	bl	8007504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000a564 	.word	0x2000a564

080024b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80024bc:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <TIM7_IRQHandler+0x10>)
 80024be:	f004 f852 	bl	8006566 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000a4cc 	.word	0x2000a4cc

080024cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return 1;
 80024d0:	2301      	movs	r3, #1
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <_kill>:

int _kill(int pid, int sig)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024e6:	f006 fd93 	bl	8009010 <__errno>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2216      	movs	r2, #22
 80024ee:	601a      	str	r2, [r3, #0]
  return -1;
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_exit>:

void _exit (int status)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002504:	f04f 31ff 	mov.w	r1, #4294967295
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ffe7 	bl	80024dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800250e:	bf00      	nop
 8002510:	e7fd      	b.n	800250e <_exit+0x12>

08002512 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e00a      	b.n	800253a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002524:	f3af 8000 	nop.w
 8002528:	4601      	mov	r1, r0
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	60ba      	str	r2, [r7, #8]
 8002530:	b2ca      	uxtb	r2, r1
 8002532:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3301      	adds	r3, #1
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	429a      	cmp	r2, r3
 8002540:	dbf0      	blt.n	8002524 <_read+0x12>
  }

  return len;
 8002542:	687b      	ldr	r3, [r7, #4]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	e009      	b.n	8002572 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	60ba      	str	r2, [r7, #8]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	3301      	adds	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	429a      	cmp	r2, r3
 8002578:	dbf1      	blt.n	800255e <_write+0x12>
  }
  return len;
 800257a:	687b      	ldr	r3, [r7, #4]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <_close>:

int _close(int file)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025ac:	605a      	str	r2, [r3, #4]
  return 0;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_isatty>:

int _isatty(int file)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025c4:	2301      	movs	r3, #1
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f4:	4a14      	ldr	r2, [pc, #80]	@ (8002648 <_sbrk+0x5c>)
 80025f6:	4b15      	ldr	r3, [pc, #84]	@ (800264c <_sbrk+0x60>)
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002600:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002608:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <_sbrk+0x64>)
 800260a:	4a12      	ldr	r2, [pc, #72]	@ (8002654 <_sbrk+0x68>)
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260e:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	429a      	cmp	r2, r3
 800261a:	d207      	bcs.n	800262c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800261c:	f006 fcf8 	bl	8009010 <__errno>
 8002620:	4603      	mov	r3, r0
 8002622:	220c      	movs	r2, #12
 8002624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	e009      	b.n	8002640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800262c:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002632:	4b07      	ldr	r3, [pc, #28]	@ (8002650 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	4a05      	ldr	r2, [pc, #20]	@ (8002650 <_sbrk+0x64>)
 800263c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	2000c000 	.word	0x2000c000
 800264c:	00000400 	.word	0x00000400
 8002650:	2000a47c 	.word	0x2000a47c
 8002654:	2000a740 	.word	0x2000a740

08002658 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800265c:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <SystemInit+0x20>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002662:	4a05      	ldr	r2, [pc, #20]	@ (8002678 <SystemInit+0x20>)
 8002664:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002668:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002682:	f107 0310 	add.w	r3, r7, #16
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800269a:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <MX_TIM2_Init+0x98>)
 800269c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80026ae:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b6:	4b17      	ldr	r3, [pc, #92]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026bc:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026c2:	4814      	ldr	r0, [pc, #80]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026c4:	f003 fe42 	bl	800634c <HAL_TIM_Base_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80026ce:	f7ff fdef 	bl	80022b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	4619      	mov	r1, r3
 80026de:	480d      	ldr	r0, [pc, #52]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026e0:	f004 f8c2 	bl	8006868 <HAL_TIM_ConfigClockSource>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80026ea:	f7ff fde1 	bl	80022b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	4806      	ldr	r0, [pc, #24]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026fc:	f004 fd2e 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002706:	f7ff fdd3 	bl	80022b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800270a:	bf00      	nop
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	2000a480 	.word	0x2000a480

08002718 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002728:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <MX_TIM7_Init+0x68>)
 800272a:	4a16      	ldr	r2, [pc, #88]	@ (8002784 <MX_TIM7_Init+0x6c>)
 800272c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000-1;
 800272e:	4b14      	ldr	r3, [pc, #80]	@ (8002780 <MX_TIM7_Init+0x68>)
 8002730:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002734:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002736:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <MX_TIM7_Init+0x68>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 800273c:	4b10      	ldr	r3, [pc, #64]	@ (8002780 <MX_TIM7_Init+0x68>)
 800273e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002742:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002744:	4b0e      	ldr	r3, [pc, #56]	@ (8002780 <MX_TIM7_Init+0x68>)
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800274a:	480d      	ldr	r0, [pc, #52]	@ (8002780 <MX_TIM7_Init+0x68>)
 800274c:	f003 fdfe 	bl	800634c <HAL_TIM_Base_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002756:	f7ff fdab 	bl	80022b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	4619      	mov	r1, r3
 8002766:	4806      	ldr	r0, [pc, #24]	@ (8002780 <MX_TIM7_Init+0x68>)
 8002768:	f004 fcf8 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002772:	f7ff fd9d 	bl	80022b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	2000a4cc 	.word	0x2000a4cc
 8002784:	40001400 	.word	0x40001400

08002788 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b09a      	sub	sp, #104	@ 0x68
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800278e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800279c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
 80027b8:	615a      	str	r2, [r3, #20]
 80027ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	222c      	movs	r2, #44	@ 0x2c
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f006 fbd1 	bl	8008f6a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80027c8:	4b3e      	ldr	r3, [pc, #248]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 80027ca:	4a3f      	ldr	r2, [pc, #252]	@ (80028c8 <MX_TIM15_Init+0x140>)
 80027cc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 80027ce:	4b3d      	ldr	r3, [pc, #244]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 80027d0:	2263      	movs	r2, #99	@ 0x63
 80027d2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d4:	4b3b      	ldr	r3, [pc, #236]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 533-1;
 80027da:	4b3a      	ldr	r3, [pc, #232]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 80027dc:	f44f 7205 	mov.w	r2, #532	@ 0x214
 80027e0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e2:	4b38      	ldr	r3, [pc, #224]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80027e8:	4b36      	ldr	r3, [pc, #216]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ee:	4b35      	ldr	r3, [pc, #212]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80027f4:	4833      	ldr	r0, [pc, #204]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 80027f6:	f003 fda9 	bl	800634c <HAL_TIM_Base_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8002800:	f7ff fd56 	bl	80022b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002808:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800280a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800280e:	4619      	mov	r1, r3
 8002810:	482c      	ldr	r0, [pc, #176]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 8002812:	f004 f829 	bl	8006868 <HAL_TIM_ConfigClockSource>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800281c:	f7ff fd48 	bl	80022b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 8002820:	4828      	ldr	r0, [pc, #160]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 8002822:	f003 fe3f 	bl	80064a4 <HAL_TIM_OC_Init>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800282c:	f7ff fd40 	bl	80022b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002830:	2320      	movs	r3, #32
 8002832:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002838:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800283c:	4619      	mov	r1, r3
 800283e:	4821      	ldr	r0, [pc, #132]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 8002840:	f004 fc8c 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800284a:	f7ff fd31 	bl	80022b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800284e:	2300      	movs	r3, #0
 8002850:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002856:	2300      	movs	r3, #0
 8002858:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800285a:	2300      	movs	r3, #0
 800285c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800285e:	2300      	movs	r3, #0
 8002860:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800286a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800286e:	2200      	movs	r2, #0
 8002870:	4619      	mov	r1, r3
 8002872:	4814      	ldr	r0, [pc, #80]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 8002874:	f003 ff7e 	bl	8006774 <HAL_TIM_OC_ConfigChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800287e:	f7ff fd17 	bl	80022b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002896:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800289a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	4619      	mov	r1, r3
 80028a4:	4807      	ldr	r0, [pc, #28]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 80028a6:	f004 fcbf 	bl	8007228 <HAL_TIMEx_ConfigBreakDeadTime>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 80028b0:	f7ff fcfe 	bl	80022b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80028b4:	4803      	ldr	r0, [pc, #12]	@ (80028c4 <MX_TIM15_Init+0x13c>)
 80028b6:	f000 f865 	bl	8002984 <HAL_TIM_MspPostInit>

}
 80028ba:	bf00      	nop
 80028bc:	3768      	adds	r7, #104	@ 0x68
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2000a518 	.word	0x2000a518
 80028c8:	40014000 	.word	0x40014000

080028cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028dc:	d114      	bne.n	8002908 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028de:	4b26      	ldr	r3, [pc, #152]	@ (8002978 <HAL_TIM_Base_MspInit+0xac>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e2:	4a25      	ldr	r2, [pc, #148]	@ (8002978 <HAL_TIM_Base_MspInit+0xac>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ea:	4b23      	ldr	r3, [pc, #140]	@ (8002978 <HAL_TIM_Base_MspInit+0xac>)
 80028ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	201c      	movs	r0, #28
 80028fc:	f001 fdd3 	bl	80044a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002900:	201c      	movs	r0, #28
 8002902:	f001 fdec 	bl	80044de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002906:	e032      	b.n	800296e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1b      	ldr	r2, [pc, #108]	@ (800297c <HAL_TIM_Base_MspInit+0xb0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d114      	bne.n	800293c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002912:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <HAL_TIM_Base_MspInit+0xac>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002916:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <HAL_TIM_Base_MspInit+0xac>)
 8002918:	f043 0320 	orr.w	r3, r3, #32
 800291c:	6593      	str	r3, [r2, #88]	@ 0x58
 800291e:	4b16      	ldr	r3, [pc, #88]	@ (8002978 <HAL_TIM_Base_MspInit+0xac>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	2037      	movs	r0, #55	@ 0x37
 8002930:	f001 fdb9 	bl	80044a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002934:	2037      	movs	r0, #55	@ 0x37
 8002936:	f001 fdd2 	bl	80044de <HAL_NVIC_EnableIRQ>
}
 800293a:	e018      	b.n	800296e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM15)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0f      	ldr	r2, [pc, #60]	@ (8002980 <HAL_TIM_Base_MspInit+0xb4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d113      	bne.n	800296e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002946:	4b0c      	ldr	r3, [pc, #48]	@ (8002978 <HAL_TIM_Base_MspInit+0xac>)
 8002948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294a:	4a0b      	ldr	r2, [pc, #44]	@ (8002978 <HAL_TIM_Base_MspInit+0xac>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002950:	6613      	str	r3, [r2, #96]	@ 0x60
 8002952:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_TIM_Base_MspInit+0xac>)
 8002954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2100      	movs	r1, #0
 8002962:	2018      	movs	r0, #24
 8002964:	f001 fd9f 	bl	80044a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002968:	2018      	movs	r0, #24
 800296a:	f001 fdb8 	bl	80044de <HAL_NVIC_EnableIRQ>
}
 800296e:	bf00      	nop
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
 800297c:	40001400 	.word	0x40001400
 8002980:	40014000 	.word	0x40014000

08002984 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a11      	ldr	r2, [pc, #68]	@ (80029e8 <HAL_TIM_MspPostInit+0x64>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d11c      	bne.n	80029e0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <HAL_TIM_MspPostInit+0x68>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029aa:	4a10      	ldr	r2, [pc, #64]	@ (80029ec <HAL_TIM_MspPostInit+0x68>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b2:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <HAL_TIM_MspPostInit+0x68>)
 80029b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029be:	2304      	movs	r3, #4
 80029c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80029ce:	230e      	movs	r3, #14
 80029d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	4619      	mov	r1, r3
 80029d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029dc:	f001 fe18 	bl	8004610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80029e0:	bf00      	nop
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40014000 	.word	0x40014000
 80029ec:	40021000 	.word	0x40021000

080029f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029f4:	4b14      	ldr	r3, [pc, #80]	@ (8002a48 <MX_USART1_UART_Init+0x58>)
 80029f6:	4a15      	ldr	r2, [pc, #84]	@ (8002a4c <MX_USART1_UART_Init+0x5c>)
 80029f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029fa:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <MX_USART1_UART_Init+0x58>)
 80029fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a02:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <MX_USART1_UART_Init+0x58>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a08:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <MX_USART1_UART_Init+0x58>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <MX_USART1_UART_Init+0x58>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a14:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <MX_USART1_UART_Init+0x58>)
 8002a16:	220c      	movs	r2, #12
 8002a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <MX_USART1_UART_Init+0x58>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a20:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <MX_USART1_UART_Init+0x58>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a26:	4b08      	ldr	r3, [pc, #32]	@ (8002a48 <MX_USART1_UART_Init+0x58>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <MX_USART1_UART_Init+0x58>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a32:	4805      	ldr	r0, [pc, #20]	@ (8002a48 <MX_USART1_UART_Init+0x58>)
 8002a34:	f004 fc8e 	bl	8007354 <HAL_UART_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002a3e:	f7ff fc37 	bl	80022b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	2000a564 	.word	0x2000a564
 8002a4c:	40013800 	.word	0x40013800

08002a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b09e      	sub	sp, #120	@ 0x78
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a68:	f107 0310 	add.w	r3, r7, #16
 8002a6c:	2254      	movs	r2, #84	@ 0x54
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f006 fa7a 	bl	8008f6a <memset>
  if(uartHandle->Instance==USART1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a23      	ldr	r2, [pc, #140]	@ (8002b08 <HAL_UART_MspInit+0xb8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d13f      	bne.n	8002b00 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a80:	2301      	movs	r3, #1
 8002a82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a84:	2300      	movs	r3, #0
 8002a86:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f002 fdf7 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a98:	f7ff fc0a 	bl	80022b0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <HAL_UART_MspInit+0xbc>)
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b0c <HAL_UART_MspInit+0xbc>)
 8002aa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aa6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aa8:	4b18      	ldr	r3, [pc, #96]	@ (8002b0c <HAL_UART_MspInit+0xbc>)
 8002aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab4:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <HAL_UART_MspInit+0xbc>)
 8002ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab8:	4a14      	ldr	r2, [pc, #80]	@ (8002b0c <HAL_UART_MspInit+0xbc>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ac0:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <HAL_UART_MspInit+0xbc>)
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002acc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002ad0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ade:	2307      	movs	r3, #7
 8002ae0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aec:	f001 fd90 	bl	8004610 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2100      	movs	r1, #0
 8002af4:	2025      	movs	r0, #37	@ 0x25
 8002af6:	f001 fcd6 	bl	80044a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002afa:	2025      	movs	r0, #37	@ 0x25
 8002afc:	f001 fcef 	bl	80044de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b00:	bf00      	nop
 8002b02:	3778      	adds	r7, #120	@ 0x78
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40013800 	.word	0x40013800
 8002b0c:	40021000 	.word	0x40021000

08002b10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b14:	f7ff fda0 	bl	8002658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b18:	480c      	ldr	r0, [pc, #48]	@ (8002b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b1a:	490d      	ldr	r1, [pc, #52]	@ (8002b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <LoopForever+0xe>)
  movs r3, #0
 8002b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b20:	e002      	b.n	8002b28 <LoopCopyDataInit>

08002b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b26:	3304      	adds	r3, #4

08002b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b2c:	d3f9      	bcc.n	8002b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b30:	4c0a      	ldr	r4, [pc, #40]	@ (8002b5c <LoopForever+0x16>)
  movs r3, #0
 8002b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b34:	e001      	b.n	8002b3a <LoopFillZerobss>

08002b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b38:	3204      	adds	r2, #4

08002b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b3c:	d3fb      	bcc.n	8002b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b3e:	f006 fa6d 	bl	800901c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b42:	f7fe ffe7 	bl	8001b14 <main>

08002b46 <LoopForever>:

LoopForever:
    b LoopForever
 8002b46:	e7fe      	b.n	8002b46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b48:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b50:	200003b8 	.word	0x200003b8
  ldr r2, =_sidata
 8002b54:	0800c7e8 	.word	0x0800c7e8
  ldr r2, =_sbss
 8002b58:	200003b8 	.word	0x200003b8
  ldr r4, =_ebss
 8002b5c:	2000a73c 	.word	0x2000a73c

08002b60 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b60:	e7fe      	b.n	8002b60 <CAN1_RX0_IRQHandler>

08002b62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b6c:	2003      	movs	r0, #3
 8002b6e:	f001 fc8f 	bl	8004490 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b72:	200f      	movs	r0, #15
 8002b74:	f000 f80e 	bl	8002b94 <HAL_InitTick>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	71fb      	strb	r3, [r7, #7]
 8002b82:	e001      	b.n	8002b88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b84:	f7ff fc1c 	bl	80023c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b88:	79fb      	ldrb	r3, [r7, #7]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ba0:	4b17      	ldr	r3, [pc, #92]	@ (8002c00 <HAL_InitTick+0x6c>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d023      	beq.n	8002bf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ba8:	4b16      	ldr	r3, [pc, #88]	@ (8002c04 <HAL_InitTick+0x70>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <HAL_InitTick+0x6c>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f001 fc9b 	bl	80044fa <HAL_SYSTICK_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10f      	bne.n	8002bea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b0f      	cmp	r3, #15
 8002bce:	d809      	bhi.n	8002be4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	f001 fc65 	bl	80044a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002c08 <HAL_InitTick+0x74>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e007      	b.n	8002bf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e004      	b.n	8002bf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	e001      	b.n	8002bf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200001ec 	.word	0x200001ec
 8002c04:	200001e4 	.word	0x200001e4
 8002c08:	200001e8 	.word	0x200001e8

08002c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_IncTick+0x20>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <HAL_IncTick+0x24>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	4a04      	ldr	r2, [pc, #16]	@ (8002c30 <HAL_IncTick+0x24>)
 8002c1e:	6013      	str	r3, [r2, #0]
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	200001ec 	.word	0x200001ec
 8002c30:	2000a5ec 	.word	0x2000a5ec

08002c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return uwTick;
 8002c38:	4b03      	ldr	r3, [pc, #12]	@ (8002c48 <HAL_GetTick+0x14>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	2000a5ec 	.word	0x2000a5ec

08002c4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	609a      	str	r2, [r3, #8]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3360      	adds	r3, #96	@ 0x60
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <LL_ADC_SetOffset+0x44>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	03fff000 	.word	0x03fff000

08002cfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3360      	adds	r3, #96	@ 0x60
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3360      	adds	r3, #96	@ 0x60
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	3330      	adds	r3, #48	@ 0x30
 8002d94:	461a      	mov	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	4413      	add	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	211f      	movs	r1, #31
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	0e9b      	lsrs	r3, r3, #26
 8002dbc:	f003 011f 	and.w	r1, r3, #31
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dd0:	bf00      	nop
 8002dd2:	371c      	adds	r7, #28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b087      	sub	sp, #28
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3314      	adds	r3, #20
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	0e5b      	lsrs	r3, r3, #25
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	4413      	add	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	0d1b      	lsrs	r3, r3, #20
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2107      	movs	r1, #7
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	401a      	ands	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	0d1b      	lsrs	r3, r3, #20
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	431a      	orrs	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e70:	43db      	mvns	r3, r3
 8002e72:	401a      	ands	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0318 	and.w	r3, r3, #24
 8002e7a:	4908      	ldr	r1, [pc, #32]	@ (8002e9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e7c:	40d9      	lsrs	r1, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	400b      	ands	r3, r1
 8002e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e86:	431a      	orrs	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	0007ffff 	.word	0x0007ffff

08002ea0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002eb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6093      	str	r3, [r2, #8]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ed8:	d101      	bne.n	8002ede <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002efc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f28:	d101      	bne.n	8002f2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f78:	f043 0202 	orr.w	r2, r3, #2
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <LL_ADC_IsEnabled+0x18>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <LL_ADC_IsEnabled+0x1a>
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d101      	bne.n	8002fca <LL_ADC_IsDisableOngoing+0x18>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <LL_ADC_IsDisableOngoing+0x1a>
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fe8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fec:	f043 0204 	orr.w	r2, r3, #4
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b04      	cmp	r3, #4
 8003012:	d101      	bne.n	8003018 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b08      	cmp	r3, #8
 8003038:	d101      	bne.n	800303e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e126      	b.n	80032b4 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7fe fc8d 	bl	8001994 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff19 	bl	8002ec4 <LL_ADC_IsDeepPowerDownEnabled>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff feff 	bl	8002ea0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff34 	bl	8002f14 <LL_ADC_IsInternalRegulatorEnabled>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d115      	bne.n	80030de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ff18 	bl	8002eec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030bc:	4b7f      	ldr	r3, [pc, #508]	@ (80032bc <HAL_ADC_Init+0x270>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	4a7f      	ldr	r2, [pc, #508]	@ (80032c0 <HAL_ADC_Init+0x274>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	099b      	lsrs	r3, r3, #6
 80030ca:	3301      	adds	r3, #1
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80030d0:	e002      	b.n	80030d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f9      	bne.n	80030d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff16 	bl	8002f14 <LL_ADC_IsInternalRegulatorEnabled>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10d      	bne.n	800310a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f2:	f043 0210 	orr.w	r2, r3, #16
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff76 	bl	8003000 <LL_ADC_REG_IsConversionOngoing>
 8003114:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 80bf 	bne.w	80032a2 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 80bb 	bne.w	80032a2 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003130:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003134:	f043 0202 	orr.w	r2, r3, #2
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff23 	bl	8002f8c <LL_ADC_IsEnabled>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800314c:	485d      	ldr	r0, [pc, #372]	@ (80032c4 <HAL_ADC_Init+0x278>)
 800314e:	f7ff ff1d 	bl	8002f8c <LL_ADC_IsEnabled>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4619      	mov	r1, r3
 800315e:	485a      	ldr	r0, [pc, #360]	@ (80032c8 <HAL_ADC_Init+0x27c>)
 8003160:	f7ff fd74 	bl	8002c4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7e5b      	ldrb	r3, [r3, #25]
 8003168:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800316e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003174:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800317a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003182:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d106      	bne.n	80031a0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003196:	3b01      	subs	r3, #1
 8003198:	045b      	lsls	r3, r3, #17
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d009      	beq.n	80031bc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	4b42      	ldr	r3, [pc, #264]	@ (80032cc <HAL_ADC_Init+0x280>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	69b9      	ldr	r1, [r7, #24]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff26 	bl	8003026 <LL_ADC_INJ_IsConversionOngoing>
 80031da:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d13d      	bne.n	800325e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d13a      	bne.n	800325e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031ec:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031f4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003204:	f023 0302 	bic.w	r3, r3, #2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	69b9      	ldr	r1, [r7, #24]
 800320e:	430b      	orrs	r3, r1
 8003210:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003218:	2b01      	cmp	r3, #1
 800321a:	d118      	bne.n	800324e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003226:	f023 0304 	bic.w	r3, r3, #4
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003232:	4311      	orrs	r1, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003238:	4311      	orrs	r1, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800323e:	430a      	orrs	r2, r1
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	611a      	str	r2, [r3, #16]
 800324c:	e007      	b.n	800325e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d10c      	bne.n	8003280 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	f023 010f 	bic.w	r1, r3, #15
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	1e5a      	subs	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	631a      	str	r2, [r3, #48]	@ 0x30
 800327e:	e007      	b.n	8003290 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 020f 	bic.w	r2, r2, #15
 800328e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003294:	f023 0303 	bic.w	r3, r3, #3
 8003298:	f043 0201 	orr.w	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	655a      	str	r2, [r3, #84]	@ 0x54
 80032a0:	e007      	b.n	80032b2 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a6:	f043 0210 	orr.w	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	200001e4 	.word	0x200001e4
 80032c0:	053e2d63 	.word	0x053e2d63
 80032c4:	50040000 	.word	0x50040000
 80032c8:	50040300 	.word	0x50040300
 80032cc:	fff0c007 	.word	0xfff0c007

080032d0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fe8f 	bl	8003000 <LL_ADC_REG_IsConversionOngoing>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 80a0 	bne.w	800342a <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_Start_IT+0x28>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e09b      	b.n	8003430 <HAL_ADC_Start_IT+0x160>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fe51 	bl	8003fa8 <ADC_Enable>
 8003306:	4603      	mov	r3, r0
 8003308:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 8087 	bne.w	8003420 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003316:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d006      	beq.n	8003340 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003336:	f023 0206 	bic.w	r2, r3, #6
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	659a      	str	r2, [r3, #88]	@ 0x58
 800333e:	e002      	b.n	8003346 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	221c      	movs	r2, #28
 800334c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 021c 	bic.w	r2, r2, #28
 8003364:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	2b08      	cmp	r3, #8
 800336c:	d108      	bne.n	8003380 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0208 	orr.w	r2, r2, #8
 800337c:	605a      	str	r2, [r3, #4]
          break;
 800337e:	e008      	b.n	8003392 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0204 	orr.w	r2, r2, #4
 800338e:	605a      	str	r2, [r3, #4]
          break;
 8003390:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003396:	2b00      	cmp	r3, #0
 8003398:	d107      	bne.n	80033aa <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0210 	orr.w	r2, r2, #16
 80033a8:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02d      	beq.n	8003414 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033c0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d110      	bne.n	80033f2 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0220 	bic.w	r2, r2, #32
 80033de:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033ee:	605a      	str	r2, [r3, #4]
            break;
 80033f0:	e010      	b.n	8003414 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003400:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0220 	orr.w	r2, r2, #32
 8003410:	605a      	str	r2, [r3, #4]
            break;
 8003412:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fddd 	bl	8002fd8 <LL_ADC_REG_StartConversion>
 800341e:	e006      	b.n	800342e <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003428:	e001      	b.n	800342e <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800342a:	2302      	movs	r3, #2
 800342c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b088      	sub	sp, #32
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d017      	beq.n	80034a8 <HAL_ADC_IRQHandler+0x56>
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d012      	beq.n	80034a8 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d105      	bne.n	800349a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003492:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 ff1e 	bl	80042dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2202      	movs	r2, #2
 80034a6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d004      	beq.n	80034bc <HAL_ADC_IRQHandler+0x6a>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d05e      	beq.n	8003584 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d059      	beq.n	8003584 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fc36 	bl	8002d5e <LL_ADC_REG_IsTriggerSourceSWStart>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d03e      	beq.n	8003576 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d135      	bne.n	8003576 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b08      	cmp	r3, #8
 8003516:	d12e      	bne.n	8003576 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fd6f 	bl	8003000 <LL_ADC_REG_IsConversionOngoing>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d11a      	bne.n	800355e <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 020c 	bic.w	r2, r2, #12
 8003536:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003548:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d112      	bne.n	8003576 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003554:	f043 0201 	orr.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	655a      	str	r2, [r3, #84]	@ 0x54
 800355c:	e00b      	b.n	8003576 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003562:	f043 0210 	orr.w	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356e:	f043 0201 	orr.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fe fd30 	bl	8001fdc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	220c      	movs	r2, #12
 8003582:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <HAL_ADC_IRQHandler+0x146>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d072      	beq.n	8003688 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d06d      	beq.n	8003688 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035bc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fc07 	bl	8002ddc <LL_ADC_INJ_IsTriggerSourceSWStart>
 80035ce:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fbc2 	bl	8002d5e <LL_ADC_REG_IsTriggerSourceSWStart>
 80035da:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d047      	beq.n	800367a <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <HAL_ADC_IRQHandler+0x1b2>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d03f      	beq.n	800367a <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003600:	2b00      	cmp	r3, #0
 8003602:	d13a      	bne.n	800367a <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360e:	2b40      	cmp	r3, #64	@ 0x40
 8003610:	d133      	bne.n	800367a <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d12e      	bne.n	800367a <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fd00 	bl	8003026 <LL_ADC_INJ_IsConversionOngoing>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11a      	bne.n	8003662 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800363a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d112      	bne.n	800367a <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003660:	e00b      	b.n	800367a <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003666:	f043 0210 	orr.w	r2, r3, #16
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003672:	f043 0201 	orr.w	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fe06 	bl	800428c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2260      	movs	r2, #96	@ 0x60
 8003686:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368e:	2b00      	cmp	r3, #0
 8003690:	d011      	beq.n	80036b6 <HAL_ADC_IRQHandler+0x264>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00c      	beq.n	80036b6 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f886 	bl	80037ba <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2280      	movs	r2, #128	@ 0x80
 80036b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d012      	beq.n	80036e6 <HAL_ADC_IRQHandler+0x294>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00d      	beq.n	80036e6 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fdec 	bl	80042b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d012      	beq.n	8003716 <HAL_ADC_IRQHandler+0x2c4>
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fdde 	bl	80042c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003714:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d02a      	beq.n	8003776 <HAL_ADC_IRQHandler+0x324>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f003 0310 	and.w	r3, r3, #16
 8003726:	2b00      	cmp	r3, #0
 8003728:	d025      	beq.n	8003776 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8003732:	2301      	movs	r3, #1
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	e008      	b.n	800374a <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8003746:	2301      	movs	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10e      	bne.n	800376e <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003754:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003760:	f043 0202 	orr.w	r2, r3, #2
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f830 	bl	80037ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2210      	movs	r2, #16
 8003774:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800377c:	2b00      	cmp	r3, #0
 800377e:	d018      	beq.n	80037b2 <HAL_ADC_IRQHandler+0x360>
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003786:	2b00      	cmp	r3, #0
 8003788:	d013      	beq.n	80037b2 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379a:	f043 0208 	orr.w	r2, r3, #8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037aa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fd77 	bl	80042a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80037b2:	bf00      	nop
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b0b6      	sub	sp, #216	@ 0xd8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x22>
 8003802:	2302      	movs	r3, #2
 8003804:	e3bb      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x79a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff fbf4 	bl	8003000 <LL_ADC_REG_IsConversionOngoing>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	f040 83a0 	bne.w	8003f60 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b05      	cmp	r3, #5
 800382e:	d824      	bhi.n	800387a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	3b02      	subs	r3, #2
 8003836:	2b03      	cmp	r3, #3
 8003838:	d81b      	bhi.n	8003872 <HAL_ADC_ConfigChannel+0x8e>
 800383a:	a201      	add	r2, pc, #4	@ (adr r2, 8003840 <HAL_ADC_ConfigChannel+0x5c>)
 800383c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003840:	08003851 	.word	0x08003851
 8003844:	08003859 	.word	0x08003859
 8003848:	08003861 	.word	0x08003861
 800384c:	08003869 	.word	0x08003869
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003850:	230c      	movs	r3, #12
 8003852:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003856:	e010      	b.n	800387a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003858:	2312      	movs	r3, #18
 800385a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800385e:	e00c      	b.n	800387a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003860:	2318      	movs	r3, #24
 8003862:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003866:	e008      	b.n	800387a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003868:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800386c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003870:	e003      	b.n	800387a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003872:	2306      	movs	r3, #6
 8003874:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003878:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003888:	f7ff fa7c 	bl	8002d84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fbb5 	bl	8003000 <LL_ADC_REG_IsConversionOngoing>
 8003896:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fbc1 	bl	8003026 <LL_ADC_INJ_IsConversionOngoing>
 80038a4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f040 81a4 	bne.w	8003bfa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f040 819f 	bne.w	8003bfa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	6819      	ldr	r1, [r3, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	461a      	mov	r2, r3
 80038ca:	f7ff fa9a 	bl	8002e02 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	08db      	lsrs	r3, r3, #3
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d00a      	beq.n	8003906 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6919      	ldr	r1, [r3, #16]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003900:	f7ff f9d8 	bl	8002cb4 <LL_ADC_SetOffset>
 8003904:	e179      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff f9f5 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 8003912:	4603      	mov	r3, r0
 8003914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x14e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff f9ea 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 8003928:	4603      	mov	r3, r0
 800392a:	0e9b      	lsrs	r3, r3, #26
 800392c:	f003 021f 	and.w	r2, r3, #31
 8003930:	e01e      	b.n	8003970 <HAL_ADC_ConfigChannel+0x18c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff f9df 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 800393e:	4603      	mov	r3, r0
 8003940:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003948:	fa93 f3a3 	rbit	r3, r3
 800394c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003950:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003954:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003958:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003960:	2320      	movs	r3, #32
 8003962:	e004      	b.n	800396e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003964:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x1a4>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	0e9b      	lsrs	r3, r3, #26
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	e018      	b.n	80039ba <HAL_ADC_ConfigChannel+0x1d6>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003994:	fa93 f3a3 	rbit	r3, r3
 8003998:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800399c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80039a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80039ac:	2320      	movs	r3, #32
 80039ae:	e004      	b.n	80039ba <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80039b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039b4:	fab3 f383 	clz	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d106      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff f9ae 	bl	8002d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2101      	movs	r1, #1
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff f992 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 80039d8:	4603      	mov	r3, r0
 80039da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x214>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2101      	movs	r1, #1
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff f987 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 80039ee:	4603      	mov	r3, r0
 80039f0:	0e9b      	lsrs	r3, r3, #26
 80039f2:	f003 021f 	and.w	r2, r3, #31
 80039f6:	e01e      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x252>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2101      	movs	r1, #1
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff f97c 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003a16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003a1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003a26:	2320      	movs	r3, #32
 8003a28:	e004      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003a2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a2e:	fab3 f383 	clz	r3, r3
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d105      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x26a>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	0e9b      	lsrs	r3, r3, #26
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	e018      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x29c>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a5a:	fa93 f3a3 	rbit	r3, r3
 8003a5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003a62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a66:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003a6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003a72:	2320      	movs	r3, #32
 8003a74:	e004      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003a76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a7a:	fab3 f383 	clz	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d106      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff f94b 	bl	8002d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2102      	movs	r1, #2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff f92f 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x2da>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2102      	movs	r1, #2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff f924 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	0e9b      	lsrs	r3, r3, #26
 8003ab8:	f003 021f 	and.w	r2, r3, #31
 8003abc:	e01e      	b.n	8003afc <HAL_ADC_ConfigChannel+0x318>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff f919 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ad4:	fa93 f3a3 	rbit	r3, r3
 8003ad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ae0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003aec:	2320      	movs	r3, #32
 8003aee:	e004      	b.n	8003afa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003af4:	fab3 f383 	clz	r3, r3
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x330>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	0e9b      	lsrs	r3, r3, #26
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	e014      	b.n	8003b3e <HAL_ADC_ConfigChannel+0x35a>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b1c:	fa93 f3a3 	rbit	r3, r3
 8003b20:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003b22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003b30:	2320      	movs	r3, #32
 8003b32:	e004      	b.n	8003b3e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003b34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b38:	fab3 f383 	clz	r3, r3
 8003b3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d106      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2200      	movs	r2, #0
 8003b48:	2102      	movs	r1, #2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff f8ec 	bl	8002d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2103      	movs	r1, #3
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff f8d0 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2103      	movs	r1, #3
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff f8c5 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 8003b72:	4603      	mov	r3, r0
 8003b74:	0e9b      	lsrs	r3, r3, #26
 8003b76:	f003 021f 	and.w	r2, r3, #31
 8003b7a:	e017      	b.n	8003bac <HAL_ADC_ConfigChannel+0x3c8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2103      	movs	r1, #3
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f8ba 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003b94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b96:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003b98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	e003      	b.n	8003baa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003ba2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x3e0>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	0e9b      	lsrs	r3, r3, #26
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	e011      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x404>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003bd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003bd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003bdc:	2320      	movs	r3, #32
 8003bde:	e003      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003be0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d106      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2103      	movs	r1, #3
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff f897 	bl	8002d28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff f9c4 	bl	8002f8c <LL_ADC_IsEnabled>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f040 8140 	bne.w	8003e8c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6819      	ldr	r1, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f7ff f91d 	bl	8002e58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4a8f      	ldr	r2, [pc, #572]	@ (8003e60 <HAL_ADC_ConfigChannel+0x67c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	f040 8131 	bne.w	8003e8c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10b      	bne.n	8003c52 <HAL_ADC_ConfigChannel+0x46e>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	0e9b      	lsrs	r3, r3, #26
 8003c40:	3301      	adds	r3, #1
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2b09      	cmp	r3, #9
 8003c48:	bf94      	ite	ls
 8003c4a:	2301      	movls	r3, #1
 8003c4c:	2300      	movhi	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	e019      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x4a2>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003c64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003c6a:	2320      	movs	r3, #32
 8003c6c:	e003      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003c6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	3301      	adds	r3, #1
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2b09      	cmp	r3, #9
 8003c7e:	bf94      	ite	ls
 8003c80:	2301      	movls	r3, #1
 8003c82:	2300      	movhi	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d079      	beq.n	8003d7e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d107      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x4c2>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	0e9b      	lsrs	r3, r3, #26
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	069b      	lsls	r3, r3, #26
 8003ca0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ca4:	e015      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x4ee>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cb6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003cbe:	2320      	movs	r3, #32
 8003cc0:	e003      	b.n	8003cca <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cc4:	fab3 f383 	clz	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	069b      	lsls	r3, r3, #26
 8003cce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x50e>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	0e9b      	lsrs	r3, r3, #26
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2101      	movs	r1, #1
 8003cec:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf0:	e017      	b.n	8003d22 <HAL_ADC_ConfigChannel+0x53e>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d02:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003d0a:	2320      	movs	r3, #32
 8003d0c:	e003      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d10:	fab3 f383 	clz	r3, r3
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	3301      	adds	r3, #1
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	ea42 0103 	orr.w	r1, r2, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x564>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	0e9b      	lsrs	r3, r3, #26
 8003d38:	3301      	adds	r3, #1
 8003d3a:	f003 021f 	and.w	r2, r3, #31
 8003d3e:	4613      	mov	r3, r2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4413      	add	r3, r2
 8003d44:	051b      	lsls	r3, r3, #20
 8003d46:	e018      	b.n	8003d7a <HAL_ADC_ConfigChannel+0x596>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d58:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003d60:	2320      	movs	r3, #32
 8003d62:	e003      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d66:	fab3 f383 	clz	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	f003 021f 	and.w	r2, r3, #31
 8003d72:	4613      	mov	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	e081      	b.n	8003e82 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d107      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x5b6>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	0e9b      	lsrs	r3, r3, #26
 8003d90:	3301      	adds	r3, #1
 8003d92:	069b      	lsls	r3, r3, #26
 8003d94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d98:	e015      	b.n	8003dc6 <HAL_ADC_ConfigChannel+0x5e2>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003db2:	2320      	movs	r3, #32
 8003db4:	e003      	b.n	8003dbe <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db8:	fab3 f383 	clz	r3, r3
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	069b      	lsls	r3, r3, #26
 8003dc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x602>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	0e9b      	lsrs	r3, r3, #26
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2101      	movs	r1, #1
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	e017      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x632>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	61bb      	str	r3, [r7, #24]
  return result;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003dfe:	2320      	movs	r3, #32
 8003e00:	e003      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	fab3 f383 	clz	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	2101      	movs	r1, #1
 8003e12:	fa01 f303 	lsl.w	r3, r1, r3
 8003e16:	ea42 0103 	orr.w	r1, r2, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10d      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x65e>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	0e9b      	lsrs	r3, r3, #26
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	f003 021f 	and.w	r2, r3, #31
 8003e32:	4613      	mov	r3, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	4413      	add	r3, r2
 8003e38:	3b1e      	subs	r3, #30
 8003e3a:	051b      	lsls	r3, r3, #20
 8003e3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e40:	e01e      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x69c>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	fa93 f3a3 	rbit	r3, r3
 8003e4e:	60fb      	str	r3, [r7, #12]
  return result;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d104      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003e5a:	2320      	movs	r3, #32
 8003e5c:	e006      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x688>
 8003e5e:	bf00      	nop
 8003e60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	f003 021f 	and.w	r2, r3, #31
 8003e72:	4613      	mov	r3, r2
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4413      	add	r3, r2
 8003e78:	3b1e      	subs	r3, #30
 8003e7a:	051b      	lsls	r3, r3, #20
 8003e7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e86:	4619      	mov	r1, r3
 8003e88:	f7fe ffbb 	bl	8002e02 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b3d      	ldr	r3, [pc, #244]	@ (8003f88 <HAL_ADC_ConfigChannel+0x7a4>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d06c      	beq.n	8003f72 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e98:	483c      	ldr	r0, [pc, #240]	@ (8003f8c <HAL_ADC_ConfigChannel+0x7a8>)
 8003e9a:	f7fe fefd 	bl	8002c98 <LL_ADC_GetCommonPathInternalCh>
 8003e9e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a3a      	ldr	r2, [pc, #232]	@ (8003f90 <HAL_ADC_ConfigChannel+0x7ac>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d127      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003eb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d121      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a35      	ldr	r2, [pc, #212]	@ (8003f94 <HAL_ADC_ConfigChannel+0x7b0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d157      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ec2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ec6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003eca:	4619      	mov	r1, r3
 8003ecc:	482f      	ldr	r0, [pc, #188]	@ (8003f8c <HAL_ADC_ConfigChannel+0x7a8>)
 8003ece:	f7fe fed0 	bl	8002c72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ed2:	4b31      	ldr	r3, [pc, #196]	@ (8003f98 <HAL_ADC_ConfigChannel+0x7b4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	099b      	lsrs	r3, r3, #6
 8003ed8:	4a30      	ldr	r2, [pc, #192]	@ (8003f9c <HAL_ADC_ConfigChannel+0x7b8>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	099b      	lsrs	r3, r3, #6
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003eec:	e002      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f9      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003efa:	e03a      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a27      	ldr	r2, [pc, #156]	@ (8003fa0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d113      	bne.n	8003f2e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1f      	ldr	r2, [pc, #124]	@ (8003f94 <HAL_ADC_ConfigChannel+0x7b0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d12a      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f24:	4619      	mov	r1, r3
 8003f26:	4819      	ldr	r0, [pc, #100]	@ (8003f8c <HAL_ADC_ConfigChannel+0x7a8>)
 8003f28:	f7fe fea3 	bl	8002c72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f2c:	e021      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d11c      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d116      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a12      	ldr	r2, [pc, #72]	@ (8003f94 <HAL_ADC_ConfigChannel+0x7b0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d111      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f56:	4619      	mov	r1, r3
 8003f58:	480c      	ldr	r0, [pc, #48]	@ (8003f8c <HAL_ADC_ConfigChannel+0x7a8>)
 8003f5a:	f7fe fe8a 	bl	8002c72 <LL_ADC_SetCommonPathInternalCh>
 8003f5e:	e008      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f7a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	37d8      	adds	r7, #216	@ 0xd8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	80080000 	.word	0x80080000
 8003f8c:	50040300 	.word	0x50040300
 8003f90:	c7520000 	.word	0xc7520000
 8003f94:	50040000 	.word	0x50040000
 8003f98:	200001e4 	.word	0x200001e4
 8003f9c:	053e2d63 	.word	0x053e2d63
 8003fa0:	cb840000 	.word	0xcb840000
 8003fa4:	80000001 	.word	0x80000001

08003fa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe ffe7 	bl	8002f8c <LL_ADC_IsEnabled>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d169      	bne.n	8004098 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	4b36      	ldr	r3, [pc, #216]	@ (80040a4 <ADC_Enable+0xfc>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd6:	f043 0210 	orr.w	r2, r3, #16
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe2:	f043 0201 	orr.w	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e055      	b.n	800409a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe ffa2 	bl	8002f3c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ff8:	482b      	ldr	r0, [pc, #172]	@ (80040a8 <ADC_Enable+0x100>)
 8003ffa:	f7fe fe4d 	bl	8002c98 <LL_ADC_GetCommonPathInternalCh>
 8003ffe:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004004:	2b00      	cmp	r3, #0
 8004006:	d013      	beq.n	8004030 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004008:	4b28      	ldr	r3, [pc, #160]	@ (80040ac <ADC_Enable+0x104>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	099b      	lsrs	r3, r3, #6
 800400e:	4a28      	ldr	r2, [pc, #160]	@ (80040b0 <ADC_Enable+0x108>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	099b      	lsrs	r3, r3, #6
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004022:	e002      	b.n	800402a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	3b01      	subs	r3, #1
 8004028:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f9      	bne.n	8004024 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004030:	f7fe fe00 	bl	8002c34 <HAL_GetTick>
 8004034:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004036:	e028      	b.n	800408a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe ffa5 	bl	8002f8c <LL_ADC_IsEnabled>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7fe ff75 	bl	8002f3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004052:	f7fe fdef 	bl	8002c34 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d914      	bls.n	800408a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d00d      	beq.n	800408a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004072:	f043 0210 	orr.w	r2, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407e:	f043 0201 	orr.w	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e007      	b.n	800409a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b01      	cmp	r3, #1
 8004096:	d1cf      	bne.n	8004038 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	8000003f 	.word	0x8000003f
 80040a8:	50040300 	.word	0x50040300
 80040ac:	200001e4 	.word	0x200001e4
 80040b0:	053e2d63 	.word	0x053e2d63

080040b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fe ff76 	bl	8002fb2 <LL_ADC_IsDisableOngoing>
 80040c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe ff5d 	bl	8002f8c <LL_ADC_IsEnabled>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d047      	beq.n	8004168 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d144      	bne.n	8004168 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 030d 	and.w	r3, r3, #13
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d10c      	bne.n	8004106 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe ff37 	bl	8002f64 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2203      	movs	r2, #3
 80040fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040fe:	f7fe fd99 	bl	8002c34 <HAL_GetTick>
 8004102:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004104:	e029      	b.n	800415a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410a:	f043 0210 	orr.w	r2, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004116:	f043 0201 	orr.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e023      	b.n	800416a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004122:	f7fe fd87 	bl	8002c34 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d914      	bls.n	800415a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00d      	beq.n	800415a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004142:	f043 0210 	orr.w	r2, r3, #16
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414e:	f043 0201 	orr.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e007      	b.n	800416a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1dc      	bne.n	8004122 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <LL_ADC_StartCalibration>:
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004184:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800418e:	4313      	orrs	r3, r2
 8004190:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	609a      	str	r2, [r3, #8]
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <LL_ADC_IsCalibrationOnGoing>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041b8:	d101      	bne.n	80041be <LL_ADC_IsCalibrationOnGoing+0x1a>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_ADCEx_Calibration_Start+0x1c>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e04d      	b.n	8004284 <HAL_ADCEx_Calibration_Start+0xb8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ff5f 	bl	80040b4 <ADC_Disable>
 80041f6:	4603      	mov	r3, r0
 80041f8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d136      	bne.n	800426e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004204:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004208:	f023 0302 	bic.w	r3, r3, #2
 800420c:	f043 0202 	orr.w	r2, r3, #2
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6839      	ldr	r1, [r7, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff ffa9 	bl	8004172 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004220:	e014      	b.n	800424c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	3301      	adds	r3, #1
 8004226:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800422e:	d30d      	bcc.n	800424c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004234:	f023 0312 	bic.w	r3, r3, #18
 8004238:	f043 0210 	orr.w	r2, r3, #16
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e01b      	b.n	8004284 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff ffa7 	bl	80041a4 <LL_ADC_IsCalibrationOnGoing>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e2      	bne.n	8004222 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004260:	f023 0303 	bic.w	r3, r3, #3
 8004264:	f043 0201 	orr.w	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	655a      	str	r2, [r3, #84]	@ 0x54
 800426c:	e005      	b.n	800427a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004272:	f043 0210 	orr.w	r2, r3, #16
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004300:	4b0c      	ldr	r3, [pc, #48]	@ (8004334 <__NVIC_SetPriorityGrouping+0x44>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800430c:	4013      	ands	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004318:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800431c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004322:	4a04      	ldr	r2, [pc, #16]	@ (8004334 <__NVIC_SetPriorityGrouping+0x44>)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	60d3      	str	r3, [r2, #12]
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800433c:	4b04      	ldr	r3, [pc, #16]	@ (8004350 <__NVIC_GetPriorityGrouping+0x18>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	0a1b      	lsrs	r3, r3, #8
 8004342:	f003 0307 	and.w	r3, r3, #7
}
 8004346:	4618      	mov	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	2b00      	cmp	r3, #0
 8004364:	db0b      	blt.n	800437e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	f003 021f 	and.w	r2, r3, #31
 800436c:	4907      	ldr	r1, [pc, #28]	@ (800438c <__NVIC_EnableIRQ+0x38>)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2001      	movs	r0, #1
 8004376:	fa00 f202 	lsl.w	r2, r0, r2
 800437a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	e000e100 	.word	0xe000e100

08004390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	6039      	str	r1, [r7, #0]
 800439a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800439c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	db0a      	blt.n	80043ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	490c      	ldr	r1, [pc, #48]	@ (80043dc <__NVIC_SetPriority+0x4c>)
 80043aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ae:	0112      	lsls	r2, r2, #4
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	440b      	add	r3, r1
 80043b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043b8:	e00a      	b.n	80043d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4908      	ldr	r1, [pc, #32]	@ (80043e0 <__NVIC_SetPriority+0x50>)
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	3b04      	subs	r3, #4
 80043c8:	0112      	lsls	r2, r2, #4
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	440b      	add	r3, r1
 80043ce:	761a      	strb	r2, [r3, #24]
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	e000e100 	.word	0xe000e100
 80043e0:	e000ed00 	.word	0xe000ed00

080043e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b089      	sub	sp, #36	@ 0x24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f1c3 0307 	rsb	r3, r3, #7
 80043fe:	2b04      	cmp	r3, #4
 8004400:	bf28      	it	cs
 8004402:	2304      	movcs	r3, #4
 8004404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3304      	adds	r3, #4
 800440a:	2b06      	cmp	r3, #6
 800440c:	d902      	bls.n	8004414 <NVIC_EncodePriority+0x30>
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	3b03      	subs	r3, #3
 8004412:	e000      	b.n	8004416 <NVIC_EncodePriority+0x32>
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004418:	f04f 32ff 	mov.w	r2, #4294967295
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	43da      	mvns	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	401a      	ands	r2, r3
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800442c:	f04f 31ff 	mov.w	r1, #4294967295
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	fa01 f303 	lsl.w	r3, r1, r3
 8004436:	43d9      	mvns	r1, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800443c:	4313      	orrs	r3, r2
         );
}
 800443e:	4618      	mov	r0, r3
 8004440:	3724      	adds	r7, #36	@ 0x24
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3b01      	subs	r3, #1
 8004458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800445c:	d301      	bcc.n	8004462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800445e:	2301      	movs	r3, #1
 8004460:	e00f      	b.n	8004482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004462:	4a0a      	ldr	r2, [pc, #40]	@ (800448c <SysTick_Config+0x40>)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3b01      	subs	r3, #1
 8004468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800446a:	210f      	movs	r1, #15
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	f7ff ff8e 	bl	8004390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004474:	4b05      	ldr	r3, [pc, #20]	@ (800448c <SysTick_Config+0x40>)
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800447a:	4b04      	ldr	r3, [pc, #16]	@ (800448c <SysTick_Config+0x40>)
 800447c:	2207      	movs	r2, #7
 800447e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	e000e010 	.word	0xe000e010

08004490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ff29 	bl	80042f0 <__NVIC_SetPriorityGrouping>
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b086      	sub	sp, #24
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	4603      	mov	r3, r0
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044b8:	f7ff ff3e 	bl	8004338 <__NVIC_GetPriorityGrouping>
 80044bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	6978      	ldr	r0, [r7, #20]
 80044c4:	f7ff ff8e 	bl	80043e4 <NVIC_EncodePriority>
 80044c8:	4602      	mov	r2, r0
 80044ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff ff5d 	bl	8004390 <__NVIC_SetPriority>
}
 80044d6:	bf00      	nop
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	4603      	mov	r3, r0
 80044e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff31 	bl	8004354 <__NVIC_EnableIRQ>
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff ffa2 	bl	800444c <SysTick_Config>
 8004508:	4603      	mov	r3, r0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d008      	beq.n	800453c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2204      	movs	r2, #4
 800452e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e022      	b.n	8004582 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 020e 	bic.w	r2, r2, #14
 800454a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0201 	bic.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004560:	f003 021c 	and.w	r2, r3, #28
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	2101      	movs	r1, #1
 800456a:	fa01 f202 	lsl.w	r2, r1, r2
 800456e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d005      	beq.n	80045b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2204      	movs	r2, #4
 80045aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	e029      	b.n	8004606 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 020e 	bic.w	r2, r2, #14
 80045c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d6:	f003 021c 	and.w	r2, r3, #28
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	2101      	movs	r1, #1
 80045e0:	fa01 f202 	lsl.w	r2, r1, r2
 80045e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	4798      	blx	r3
    }
  }
  return status;
 8004606:	7bfb      	ldrb	r3, [r7, #15]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800461e:	e148      	b.n	80048b2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	2101      	movs	r1, #1
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	fa01 f303 	lsl.w	r3, r1, r3
 800462c:	4013      	ands	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 813a 	beq.w	80048ac <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d005      	beq.n	8004650 <HAL_GPIO_Init+0x40>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d130      	bne.n	80046b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	2203      	movs	r2, #3
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4013      	ands	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004686:	2201      	movs	r2, #1
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4013      	ands	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	f003 0201 	and.w	r2, r3, #1
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d017      	beq.n	80046ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	2203      	movs	r2, #3
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4013      	ands	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d123      	bne.n	8004742 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	08da      	lsrs	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3208      	adds	r2, #8
 8004702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004706:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	220f      	movs	r2, #15
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43db      	mvns	r3, r3
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4013      	ands	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	08da      	lsrs	r2, r3, #3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3208      	adds	r2, #8
 800473c:	6939      	ldr	r1, [r7, #16]
 800473e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	2203      	movs	r2, #3
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43db      	mvns	r3, r3
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4013      	ands	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f003 0203 	and.w	r2, r3, #3
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 8094 	beq.w	80048ac <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004784:	4b52      	ldr	r3, [pc, #328]	@ (80048d0 <HAL_GPIO_Init+0x2c0>)
 8004786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004788:	4a51      	ldr	r2, [pc, #324]	@ (80048d0 <HAL_GPIO_Init+0x2c0>)
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004790:	4b4f      	ldr	r3, [pc, #316]	@ (80048d0 <HAL_GPIO_Init+0x2c0>)
 8004792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800479c:	4a4d      	ldr	r2, [pc, #308]	@ (80048d4 <HAL_GPIO_Init+0x2c4>)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	089b      	lsrs	r3, r3, #2
 80047a2:	3302      	adds	r3, #2
 80047a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	220f      	movs	r2, #15
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	43db      	mvns	r3, r3
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4013      	ands	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80047c6:	d00d      	beq.n	80047e4 <HAL_GPIO_Init+0x1d4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a43      	ldr	r2, [pc, #268]	@ (80048d8 <HAL_GPIO_Init+0x2c8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d007      	beq.n	80047e0 <HAL_GPIO_Init+0x1d0>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a42      	ldr	r2, [pc, #264]	@ (80048dc <HAL_GPIO_Init+0x2cc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <HAL_GPIO_Init+0x1cc>
 80047d8:	2302      	movs	r3, #2
 80047da:	e004      	b.n	80047e6 <HAL_GPIO_Init+0x1d6>
 80047dc:	2307      	movs	r3, #7
 80047de:	e002      	b.n	80047e6 <HAL_GPIO_Init+0x1d6>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_GPIO_Init+0x1d6>
 80047e4:	2300      	movs	r3, #0
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	f002 0203 	and.w	r2, r2, #3
 80047ec:	0092      	lsls	r2, r2, #2
 80047ee:	4093      	lsls	r3, r2
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047f6:	4937      	ldr	r1, [pc, #220]	@ (80048d4 <HAL_GPIO_Init+0x2c4>)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	3302      	adds	r3, #2
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004804:	4b36      	ldr	r3, [pc, #216]	@ (80048e0 <HAL_GPIO_Init+0x2d0>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	43db      	mvns	r3, r3
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004828:	4a2d      	ldr	r2, [pc, #180]	@ (80048e0 <HAL_GPIO_Init+0x2d0>)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800482e:	4b2c      	ldr	r3, [pc, #176]	@ (80048e0 <HAL_GPIO_Init+0x2d0>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	43db      	mvns	r3, r3
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4013      	ands	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004852:	4a23      	ldr	r2, [pc, #140]	@ (80048e0 <HAL_GPIO_Init+0x2d0>)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004858:	4b21      	ldr	r3, [pc, #132]	@ (80048e0 <HAL_GPIO_Init+0x2d0>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	43db      	mvns	r3, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800487c:	4a18      	ldr	r2, [pc, #96]	@ (80048e0 <HAL_GPIO_Init+0x2d0>)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004882:	4b17      	ldr	r3, [pc, #92]	@ (80048e0 <HAL_GPIO_Init+0x2d0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	43db      	mvns	r3, r3
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4013      	ands	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048a6:	4a0e      	ldr	r2, [pc, #56]	@ (80048e0 <HAL_GPIO_Init+0x2d0>)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3301      	adds	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f47f aeaf 	bne.w	8004620 <HAL_GPIO_Init+0x10>
  }
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40010000 	.word	0x40010000
 80048d8:	48000400 	.word	0x48000400
 80048dc:	48000800 	.word	0x48000800
 80048e0:	40010400 	.word	0x40010400

080048e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	807b      	strh	r3, [r7, #2]
 80048f0:	4613      	mov	r3, r2
 80048f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048f4:	787b      	ldrb	r3, [r7, #1]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048fa:	887a      	ldrh	r2, [r7, #2]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004900:	e002      	b.n	8004908 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004902:	887a      	ldrh	r2, [r7, #2]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004926:	887a      	ldrh	r2, [r7, #2]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4013      	ands	r3, r2
 800492c:	041a      	lsls	r2, r3, #16
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	43d9      	mvns	r1, r3
 8004932:	887b      	ldrh	r3, [r7, #2]
 8004934:	400b      	ands	r3, r1
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	619a      	str	r2, [r3, #24]
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800494c:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <HAL_PWREx_GetVoltageRange+0x18>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40007000 	.word	0x40007000

08004964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004972:	d130      	bne.n	80049d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004974:	4b23      	ldr	r3, [pc, #140]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800497c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004980:	d038      	beq.n	80049f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004982:	4b20      	ldr	r3, [pc, #128]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800498a:	4a1e      	ldr	r2, [pc, #120]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800498c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004990:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004992:	4b1d      	ldr	r3, [pc, #116]	@ (8004a08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2232      	movs	r2, #50	@ 0x32
 8004998:	fb02 f303 	mul.w	r3, r2, r3
 800499c:	4a1b      	ldr	r2, [pc, #108]	@ (8004a0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	0c9b      	lsrs	r3, r3, #18
 80049a4:	3301      	adds	r3, #1
 80049a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049a8:	e002      	b.n	80049b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049b0:	4b14      	ldr	r3, [pc, #80]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049bc:	d102      	bne.n	80049c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f2      	bne.n	80049aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049d0:	d110      	bne.n	80049f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e00f      	b.n	80049f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80049d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049e2:	d007      	beq.n	80049f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049e4:	4b07      	ldr	r3, [pc, #28]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049ec:	4a05      	ldr	r2, [pc, #20]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40007000 	.word	0x40007000
 8004a08:	200001e4 	.word	0x200001e4
 8004a0c:	431bde83 	.word	0x431bde83

08004a10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d102      	bne.n	8004a24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f000 bc02 	b.w	8005228 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a24:	4b96      	ldr	r3, [pc, #600]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 030c 	and.w	r3, r3, #12
 8004a2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a2e:	4b94      	ldr	r3, [pc, #592]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0310 	and.w	r3, r3, #16
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80e4 	beq.w	8004c0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <HAL_RCC_OscConfig+0x4c>
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	f040 808b 	bne.w	8004b6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	f040 8087 	bne.w	8004b6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a5c:	4b88      	ldr	r3, [pc, #544]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCC_OscConfig+0x64>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e3d9      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	4b81      	ldr	r3, [pc, #516]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <HAL_RCC_OscConfig+0x7e>
 8004a84:	4b7e      	ldr	r3, [pc, #504]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a8c:	e005      	b.n	8004a9a <HAL_RCC_OscConfig+0x8a>
 8004a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d223      	bcs.n	8004ae6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fd8c 	bl	80055c0 <RCC_SetFlashLatencyFromMSIRange>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e3ba      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ab2:	4b73      	ldr	r3, [pc, #460]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a72      	ldr	r2, [pc, #456]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ab8:	f043 0308 	orr.w	r3, r3, #8
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	4b70      	ldr	r3, [pc, #448]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	496d      	ldr	r1, [pc, #436]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	021b      	lsls	r3, r3, #8
 8004ade:	4968      	ldr	r1, [pc, #416]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]
 8004ae4:	e025      	b.n	8004b32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ae6:	4b66      	ldr	r3, [pc, #408]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a65      	ldr	r2, [pc, #404]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004aec:	f043 0308 	orr.w	r3, r3, #8
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b63      	ldr	r3, [pc, #396]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	4960      	ldr	r1, [pc, #384]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b04:	4b5e      	ldr	r3, [pc, #376]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	495b      	ldr	r1, [pc, #364]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fd4c 	bl	80055c0 <RCC_SetFlashLatencyFromMSIRange>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e37a      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b32:	f000 fc81 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 8004b36:	4602      	mov	r2, r0
 8004b38:	4b51      	ldr	r3, [pc, #324]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	4950      	ldr	r1, [pc, #320]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004b44:	5ccb      	ldrb	r3, [r1, r3]
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4e:	4a4e      	ldr	r2, [pc, #312]	@ (8004c88 <HAL_RCC_OscConfig+0x278>)
 8004b50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b52:	4b4e      	ldr	r3, [pc, #312]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe f81c 	bl	8002b94 <HAL_InitTick>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d052      	beq.n	8004c0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	e35e      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d032      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b72:	4b43      	ldr	r3, [pc, #268]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a42      	ldr	r2, [pc, #264]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004b78:	f043 0301 	orr.w	r3, r3, #1
 8004b7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b7e:	f7fe f859 	bl	8002c34 <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b86:	f7fe f855 	bl	8002c34 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e347      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b98:	4b39      	ldr	r3, [pc, #228]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0f0      	beq.n	8004b86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ba4:	4b36      	ldr	r3, [pc, #216]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a35      	ldr	r2, [pc, #212]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004baa:	f043 0308 	orr.w	r3, r3, #8
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	4b33      	ldr	r3, [pc, #204]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	4930      	ldr	r1, [pc, #192]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	492b      	ldr	r1, [pc, #172]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	604b      	str	r3, [r1, #4]
 8004bd6:	e01a      	b.n	8004c0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bd8:	4b29      	ldr	r3, [pc, #164]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a28      	ldr	r2, [pc, #160]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004be4:	f7fe f826 	bl	8002c34 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bec:	f7fe f822 	bl	8002c34 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e314      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bfe:	4b20      	ldr	r3, [pc, #128]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x1dc>
 8004c0a:	e000      	b.n	8004c0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d073      	beq.n	8004d02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d005      	beq.n	8004c2c <HAL_RCC_OscConfig+0x21c>
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b0c      	cmp	r3, #12
 8004c24:	d10e      	bne.n	8004c44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d10b      	bne.n	8004c44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2c:	4b14      	ldr	r3, [pc, #80]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d063      	beq.n	8004d00 <HAL_RCC_OscConfig+0x2f0>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d15f      	bne.n	8004d00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e2f1      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c4c:	d106      	bne.n	8004c5c <HAL_RCC_OscConfig+0x24c>
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a0b      	ldr	r2, [pc, #44]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e025      	b.n	8004ca8 <HAL_RCC_OscConfig+0x298>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c64:	d114      	bne.n	8004c90 <HAL_RCC_OscConfig+0x280>
 8004c66:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a05      	ldr	r2, [pc, #20]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	4b03      	ldr	r3, [pc, #12]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a02      	ldr	r2, [pc, #8]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e013      	b.n	8004ca8 <HAL_RCC_OscConfig+0x298>
 8004c80:	40021000 	.word	0x40021000
 8004c84:	0800c240 	.word	0x0800c240
 8004c88:	200001e4 	.word	0x200001e4
 8004c8c:	200001e8 	.word	0x200001e8
 8004c90:	4ba0      	ldr	r3, [pc, #640]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a9f      	ldr	r2, [pc, #636]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	4b9d      	ldr	r3, [pc, #628]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a9c      	ldr	r2, [pc, #624]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d013      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fd ffc0 	bl	8002c34 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb8:	f7fd ffbc 	bl	8002c34 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b64      	cmp	r3, #100	@ 0x64
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e2ae      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cca:	4b92      	ldr	r3, [pc, #584]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x2a8>
 8004cd6:	e014      	b.n	8004d02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7fd ffac 	bl	8002c34 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce0:	f7fd ffa8 	bl	8002c34 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b64      	cmp	r3, #100	@ 0x64
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e29a      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cf2:	4b88      	ldr	r3, [pc, #544]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x2d0>
 8004cfe:	e000      	b.n	8004d02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d060      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d005      	beq.n	8004d20 <HAL_RCC_OscConfig+0x310>
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b0c      	cmp	r3, #12
 8004d18:	d119      	bne.n	8004d4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d116      	bne.n	8004d4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d20:	4b7c      	ldr	r3, [pc, #496]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <HAL_RCC_OscConfig+0x328>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e277      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d38:	4b76      	ldr	r3, [pc, #472]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	061b      	lsls	r3, r3, #24
 8004d46:	4973      	ldr	r1, [pc, #460]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d4c:	e040      	b.n	8004dd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d023      	beq.n	8004d9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d56:	4b6f      	ldr	r3, [pc, #444]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a6e      	ldr	r2, [pc, #440]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d62:	f7fd ff67 	bl	8002c34 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d6a:	f7fd ff63 	bl	8002c34 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e255      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d7c:	4b65      	ldr	r3, [pc, #404]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f0      	beq.n	8004d6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d88:	4b62      	ldr	r3, [pc, #392]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	061b      	lsls	r3, r3, #24
 8004d96:	495f      	ldr	r1, [pc, #380]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	604b      	str	r3, [r1, #4]
 8004d9c:	e018      	b.n	8004dd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a5c      	ldr	r2, [pc, #368]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fd ff43 	bl	8002c34 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db2:	f7fd ff3f 	bl	8002c34 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e231      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dc4:	4b53      	ldr	r3, [pc, #332]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f0      	bne.n	8004db2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d03c      	beq.n	8004e56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01c      	beq.n	8004e1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de4:	4b4b      	ldr	r3, [pc, #300]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dea:	4a4a      	ldr	r2, [pc, #296]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df4:	f7fd ff1e 	bl	8002c34 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dfc:	f7fd ff1a 	bl	8002c34 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e20c      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e0e:	4b41      	ldr	r3, [pc, #260]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ef      	beq.n	8004dfc <HAL_RCC_OscConfig+0x3ec>
 8004e1c:	e01b      	b.n	8004e56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e24:	4a3b      	ldr	r2, [pc, #236]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2e:	f7fd ff01 	bl	8002c34 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e36:	f7fd fefd 	bl	8002c34 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e1ef      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e48:	4b32      	ldr	r3, [pc, #200]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1ef      	bne.n	8004e36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 80a6 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e64:	2300      	movs	r3, #0
 8004e66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e68:	4b2a      	ldr	r3, [pc, #168]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10d      	bne.n	8004e90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e74:	4b27      	ldr	r3, [pc, #156]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e78:	4a26      	ldr	r2, [pc, #152]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e80:	4b24      	ldr	r3, [pc, #144]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e90:	4b21      	ldr	r3, [pc, #132]	@ (8004f18 <HAL_RCC_OscConfig+0x508>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d118      	bne.n	8004ece <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f18 <HAL_RCC_OscConfig+0x508>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f18 <HAL_RCC_OscConfig+0x508>)
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea8:	f7fd fec4 	bl	8002c34 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb0:	f7fd fec0 	bl	8002c34 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e1b2      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ec2:	4b15      	ldr	r3, [pc, #84]	@ (8004f18 <HAL_RCC_OscConfig+0x508>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d108      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x4d8>
 8004ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004edc:	4a0d      	ldr	r2, [pc, #52]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ee6:	e029      	b.n	8004f3c <HAL_RCC_OscConfig+0x52c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b05      	cmp	r3, #5
 8004eee:	d115      	bne.n	8004f1c <HAL_RCC_OscConfig+0x50c>
 8004ef0:	4b08      	ldr	r3, [pc, #32]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef6:	4a07      	ldr	r2, [pc, #28]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004ef8:	f043 0304 	orr.w	r3, r3, #4
 8004efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f00:	4b04      	ldr	r3, [pc, #16]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f06:	4a03      	ldr	r2, [pc, #12]	@ (8004f14 <HAL_RCC_OscConfig+0x504>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f10:	e014      	b.n	8004f3c <HAL_RCC_OscConfig+0x52c>
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40007000 	.word	0x40007000
 8004f1c:	4b9a      	ldr	r3, [pc, #616]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f22:	4a99      	ldr	r2, [pc, #612]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f2c:	4b96      	ldr	r3, [pc, #600]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8004f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f32:	4a95      	ldr	r2, [pc, #596]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8004f34:	f023 0304 	bic.w	r3, r3, #4
 8004f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d016      	beq.n	8004f72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7fd fe76 	bl	8002c34 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4a:	e00a      	b.n	8004f62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4c:	f7fd fe72 	bl	8002c34 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e162      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f62:	4b89      	ldr	r3, [pc, #548]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0ed      	beq.n	8004f4c <HAL_RCC_OscConfig+0x53c>
 8004f70:	e015      	b.n	8004f9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f72:	f7fd fe5f 	bl	8002c34 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f78:	e00a      	b.n	8004f90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7a:	f7fd fe5b 	bl	8002c34 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e14b      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f90:	4b7d      	ldr	r3, [pc, #500]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1ed      	bne.n	8004f7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f9e:	7ffb      	ldrb	r3, [r7, #31]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d105      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa4:	4b78      	ldr	r3, [pc, #480]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa8:	4a77      	ldr	r2, [pc, #476]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8004faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d03c      	beq.n	8005036 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01c      	beq.n	8004ffe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fc4:	4b70      	ldr	r3, [pc, #448]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8004fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fca:	4a6f      	ldr	r2, [pc, #444]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd4:	f7fd fe2e 	bl	8002c34 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fdc:	f7fd fe2a 	bl	8002c34 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e11c      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fee:	4b66      	ldr	r3, [pc, #408]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8004ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0ef      	beq.n	8004fdc <HAL_RCC_OscConfig+0x5cc>
 8004ffc:	e01b      	b.n	8005036 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ffe:	4b62      	ldr	r3, [pc, #392]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8005000:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005004:	4a60      	ldr	r2, [pc, #384]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8005006:	f023 0301 	bic.w	r3, r3, #1
 800500a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500e:	f7fd fe11 	bl	8002c34 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005016:	f7fd fe0d 	bl	8002c34 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e0ff      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005028:	4b57      	ldr	r3, [pc, #348]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 800502a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1ef      	bne.n	8005016 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80f3 	beq.w	8005226 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005044:	2b02      	cmp	r3, #2
 8005046:	f040 80c9 	bne.w	80051dc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800504a:	4b4f      	ldr	r3, [pc, #316]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f003 0203 	and.w	r2, r3, #3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	429a      	cmp	r2, r3
 800505c:	d12c      	bne.n	80050b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005068:	3b01      	subs	r3, #1
 800506a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800506c:	429a      	cmp	r2, r3
 800506e:	d123      	bne.n	80050b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800507a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800507c:	429a      	cmp	r2, r3
 800507e:	d11b      	bne.n	80050b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800508c:	429a      	cmp	r2, r3
 800508e:	d113      	bne.n	80050b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509a:	085b      	lsrs	r3, r3, #1
 800509c:	3b01      	subs	r3, #1
 800509e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d109      	bne.n	80050b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	3b01      	subs	r3, #1
 80050b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d06b      	beq.n	8005190 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b0c      	cmp	r3, #12
 80050bc:	d062      	beq.n	8005184 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050be:	4b32      	ldr	r3, [pc, #200]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e0ac      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050ce:	4b2e      	ldr	r3, [pc, #184]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a2d      	ldr	r2, [pc, #180]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 80050d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050da:	f7fd fdab 	bl	8002c34 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e2:	f7fd fda7 	bl	8002c34 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e099      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f4:	4b24      	ldr	r3, [pc, #144]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f0      	bne.n	80050e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005100:	4b21      	ldr	r3, [pc, #132]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	4b21      	ldr	r3, [pc, #132]	@ (800518c <HAL_RCC_OscConfig+0x77c>)
 8005106:	4013      	ands	r3, r2
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005110:	3a01      	subs	r2, #1
 8005112:	0112      	lsls	r2, r2, #4
 8005114:	4311      	orrs	r1, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800511a:	0212      	lsls	r2, r2, #8
 800511c:	4311      	orrs	r1, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005122:	0852      	lsrs	r2, r2, #1
 8005124:	3a01      	subs	r2, #1
 8005126:	0552      	lsls	r2, r2, #21
 8005128:	4311      	orrs	r1, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800512e:	0852      	lsrs	r2, r2, #1
 8005130:	3a01      	subs	r2, #1
 8005132:	0652      	lsls	r2, r2, #25
 8005134:	4311      	orrs	r1, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800513a:	06d2      	lsls	r2, r2, #27
 800513c:	430a      	orrs	r2, r1
 800513e:	4912      	ldr	r1, [pc, #72]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8005140:	4313      	orrs	r3, r2
 8005142:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005144:	4b10      	ldr	r3, [pc, #64]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a0f      	ldr	r2, [pc, #60]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 800514a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800514e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005150:	4b0d      	ldr	r3, [pc, #52]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a0c      	ldr	r2, [pc, #48]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8005156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800515a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800515c:	f7fd fd6a 	bl	8002c34 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005164:	f7fd fd66 	bl	8002c34 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e058      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005176:	4b04      	ldr	r3, [pc, #16]	@ (8005188 <HAL_RCC_OscConfig+0x778>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005182:	e050      	b.n	8005226 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e04f      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
 8005188:	40021000 	.word	0x40021000
 800518c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005190:	4b27      	ldr	r3, [pc, #156]	@ (8005230 <HAL_RCC_OscConfig+0x820>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d144      	bne.n	8005226 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800519c:	4b24      	ldr	r3, [pc, #144]	@ (8005230 <HAL_RCC_OscConfig+0x820>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a23      	ldr	r2, [pc, #140]	@ (8005230 <HAL_RCC_OscConfig+0x820>)
 80051a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051a8:	4b21      	ldr	r3, [pc, #132]	@ (8005230 <HAL_RCC_OscConfig+0x820>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4a20      	ldr	r2, [pc, #128]	@ (8005230 <HAL_RCC_OscConfig+0x820>)
 80051ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051b4:	f7fd fd3e 	bl	8002c34 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051bc:	f7fd fd3a 	bl	8002c34 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e02c      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ce:	4b18      	ldr	r3, [pc, #96]	@ (8005230 <HAL_RCC_OscConfig+0x820>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0x7ac>
 80051da:	e024      	b.n	8005226 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b0c      	cmp	r3, #12
 80051e0:	d01f      	beq.n	8005222 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e2:	4b13      	ldr	r3, [pc, #76]	@ (8005230 <HAL_RCC_OscConfig+0x820>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a12      	ldr	r2, [pc, #72]	@ (8005230 <HAL_RCC_OscConfig+0x820>)
 80051e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ee:	f7fd fd21 	bl	8002c34 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f6:	f7fd fd1d 	bl	8002c34 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e00f      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005208:	4b09      	ldr	r3, [pc, #36]	@ (8005230 <HAL_RCC_OscConfig+0x820>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1f0      	bne.n	80051f6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005214:	4b06      	ldr	r3, [pc, #24]	@ (8005230 <HAL_RCC_OscConfig+0x820>)
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	4905      	ldr	r1, [pc, #20]	@ (8005230 <HAL_RCC_OscConfig+0x820>)
 800521a:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <HAL_RCC_OscConfig+0x824>)
 800521c:	4013      	ands	r3, r2
 800521e:	60cb      	str	r3, [r1, #12]
 8005220:	e001      	b.n	8005226 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40021000 	.word	0x40021000
 8005234:	feeefffc 	.word	0xfeeefffc

08005238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0e7      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800524c:	4b75      	ldr	r3, [pc, #468]	@ (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d910      	bls.n	800527c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525a:	4b72      	ldr	r3, [pc, #456]	@ (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 0207 	bic.w	r2, r3, #7
 8005262:	4970      	ldr	r1, [pc, #448]	@ (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	4313      	orrs	r3, r2
 8005268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526a:	4b6e      	ldr	r3, [pc, #440]	@ (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d001      	beq.n	800527c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e0cf      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d010      	beq.n	80052aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	4b66      	ldr	r3, [pc, #408]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005294:	429a      	cmp	r2, r3
 8005296:	d908      	bls.n	80052aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005298:	4b63      	ldr	r3, [pc, #396]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4960      	ldr	r1, [pc, #384]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d04c      	beq.n	8005350 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d107      	bne.n	80052ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052be:	4b5a      	ldr	r3, [pc, #360]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d121      	bne.n	800530e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e0a6      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d107      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052d6:	4b54      	ldr	r3, [pc, #336]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d115      	bne.n	800530e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e09a      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d107      	bne.n	80052fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052ee:	4b4e      	ldr	r3, [pc, #312]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e08e      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e086      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800530e:	4b46      	ldr	r3, [pc, #280]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f023 0203 	bic.w	r2, r3, #3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4943      	ldr	r1, [pc, #268]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 800531c:	4313      	orrs	r3, r2
 800531e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005320:	f7fd fc88 	bl	8002c34 <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005326:	e00a      	b.n	800533e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005328:	f7fd fc84 	bl	8002c34 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e06e      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533e:	4b3a      	ldr	r3, [pc, #232]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 020c 	and.w	r2, r3, #12
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	429a      	cmp	r2, r3
 800534e:	d1eb      	bne.n	8005328 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d010      	beq.n	800537e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	4b31      	ldr	r3, [pc, #196]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005368:	429a      	cmp	r2, r3
 800536a:	d208      	bcs.n	800537e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800536c:	4b2e      	ldr	r3, [pc, #184]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	492b      	ldr	r1, [pc, #172]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 800537a:	4313      	orrs	r3, r2
 800537c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800537e:	4b29      	ldr	r3, [pc, #164]	@ (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d210      	bcs.n	80053ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538c:	4b25      	ldr	r3, [pc, #148]	@ (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 0207 	bic.w	r2, r3, #7
 8005394:	4923      	ldr	r1, [pc, #140]	@ (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	4313      	orrs	r3, r2
 800539a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539c:	4b21      	ldr	r3, [pc, #132]	@ (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d001      	beq.n	80053ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e036      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	4918      	ldr	r1, [pc, #96]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d009      	beq.n	80053ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053d8:	4b13      	ldr	r3, [pc, #76]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4910      	ldr	r1, [pc, #64]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053ec:	f000 f824 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 80053f0:	4602      	mov	r2, r0
 80053f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	091b      	lsrs	r3, r3, #4
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	490b      	ldr	r1, [pc, #44]	@ (800542c <HAL_RCC_ClockConfig+0x1f4>)
 80053fe:	5ccb      	ldrb	r3, [r1, r3]
 8005400:	f003 031f 	and.w	r3, r3, #31
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
 8005408:	4a09      	ldr	r2, [pc, #36]	@ (8005430 <HAL_RCC_ClockConfig+0x1f8>)
 800540a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800540c:	4b09      	ldr	r3, [pc, #36]	@ (8005434 <HAL_RCC_ClockConfig+0x1fc>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f7fd fbbf 	bl	8002b94 <HAL_InitTick>
 8005416:	4603      	mov	r3, r0
 8005418:	72fb      	strb	r3, [r7, #11]

  return status;
 800541a:	7afb      	ldrb	r3, [r7, #11]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40022000 	.word	0x40022000
 8005428:	40021000 	.word	0x40021000
 800542c:	0800c240 	.word	0x0800c240
 8005430:	200001e4 	.word	0x200001e4
 8005434:	200001e8 	.word	0x200001e8

08005438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005438:	b480      	push	{r7}
 800543a:	b089      	sub	sp, #36	@ 0x24
 800543c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	2300      	movs	r3, #0
 8005444:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005446:	4b3e      	ldr	r3, [pc, #248]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 030c 	and.w	r3, r3, #12
 800544e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005450:	4b3b      	ldr	r3, [pc, #236]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_RCC_GetSysClockFreq+0x34>
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2b0c      	cmp	r3, #12
 8005464:	d121      	bne.n	80054aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d11e      	bne.n	80054aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800546c:	4b34      	ldr	r3, [pc, #208]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d107      	bne.n	8005488 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005478:	4b31      	ldr	r3, [pc, #196]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 800547a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800547e:	0a1b      	lsrs	r3, r3, #8
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	e005      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005488:	4b2d      	ldr	r3, [pc, #180]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005494:	4a2b      	ldr	r2, [pc, #172]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10d      	bne.n	80054c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054a8:	e00a      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d102      	bne.n	80054b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054b0:	4b25      	ldr	r3, [pc, #148]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x110>)
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	e004      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054bc:	4b23      	ldr	r3, [pc, #140]	@ (800554c <HAL_RCC_GetSysClockFreq+0x114>)
 80054be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b0c      	cmp	r3, #12
 80054c4:	d134      	bne.n	8005530 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d003      	beq.n	80054de <HAL_RCC_GetSysClockFreq+0xa6>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d003      	beq.n	80054e4 <HAL_RCC_GetSysClockFreq+0xac>
 80054dc:	e005      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054de:	4b1a      	ldr	r3, [pc, #104]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x110>)
 80054e0:	617b      	str	r3, [r7, #20]
      break;
 80054e2:	e005      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054e4:	4b19      	ldr	r3, [pc, #100]	@ (800554c <HAL_RCC_GetSysClockFreq+0x114>)
 80054e6:	617b      	str	r3, [r7, #20]
      break;
 80054e8:	e002      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	617b      	str	r3, [r7, #20]
      break;
 80054ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054f0:	4b13      	ldr	r3, [pc, #76]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	3301      	adds	r3, #1
 80054fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054fe:	4b10      	ldr	r3, [pc, #64]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	fb03 f202 	mul.w	r2, r3, r2
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005516:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	0e5b      	lsrs	r3, r3, #25
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	3301      	adds	r3, #1
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	fbb2 f3f3 	udiv	r3, r2, r3
 800552e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005530:	69bb      	ldr	r3, [r7, #24]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3724      	adds	r7, #36	@ 0x24
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40021000 	.word	0x40021000
 8005544:	0800c258 	.word	0x0800c258
 8005548:	00f42400 	.word	0x00f42400
 800554c:	007a1200 	.word	0x007a1200

08005550 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005554:	4b03      	ldr	r3, [pc, #12]	@ (8005564 <HAL_RCC_GetHCLKFreq+0x14>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	200001e4 	.word	0x200001e4

08005568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800556c:	f7ff fff0 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b06      	ldr	r3, [pc, #24]	@ (800558c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4904      	ldr	r1, [pc, #16]	@ (8005590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40021000 	.word	0x40021000
 8005590:	0800c250 	.word	0x0800c250

08005594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005598:	f7ff ffda 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	0adb      	lsrs	r3, r3, #11
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4904      	ldr	r1, [pc, #16]	@ (80055bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40021000 	.word	0x40021000
 80055bc:	0800c250 	.word	0x0800c250

080055c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055d8:	f7ff f9b6 	bl	8004948 <HAL_PWREx_GetVoltageRange>
 80055dc:	6178      	str	r0, [r7, #20]
 80055de:	e014      	b.n	800560a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055e0:	4b25      	ldr	r3, [pc, #148]	@ (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e4:	4a24      	ldr	r2, [pc, #144]	@ (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80055ec:	4b22      	ldr	r3, [pc, #136]	@ (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055f8:	f7ff f9a6 	bl	8004948 <HAL_PWREx_GetVoltageRange>
 80055fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005602:	4a1d      	ldr	r2, [pc, #116]	@ (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005608:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005610:	d10b      	bne.n	800562a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b80      	cmp	r3, #128	@ 0x80
 8005616:	d919      	bls.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2ba0      	cmp	r3, #160	@ 0xa0
 800561c:	d902      	bls.n	8005624 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800561e:	2302      	movs	r3, #2
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e013      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005624:	2301      	movs	r3, #1
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	e010      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b80      	cmp	r3, #128	@ 0x80
 800562e:	d902      	bls.n	8005636 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005630:	2303      	movs	r3, #3
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	e00a      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b80      	cmp	r3, #128	@ 0x80
 800563a:	d102      	bne.n	8005642 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800563c:	2302      	movs	r3, #2
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	e004      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b70      	cmp	r3, #112	@ 0x70
 8005646:	d101      	bne.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005648:	2301      	movs	r3, #1
 800564a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800564c:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f023 0207 	bic.w	r2, r3, #7
 8005654:	4909      	ldr	r1, [pc, #36]	@ (800567c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800565c:	4b07      	ldr	r3, [pc, #28]	@ (800567c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	d001      	beq.n	800566e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40021000 	.word	0x40021000
 800567c:	40022000 	.word	0x40022000

08005680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005688:	2300      	movs	r3, #0
 800568a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800568c:	2300      	movs	r3, #0
 800568e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005698:	2b00      	cmp	r3, #0
 800569a:	d031      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056a4:	d01a      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80056a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056aa:	d814      	bhi.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d009      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056b4:	d10f      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80056b6:	4b5d      	ldr	r3, [pc, #372]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	4a5c      	ldr	r2, [pc, #368]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056c2:	e00c      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3304      	adds	r3, #4
 80056c8:	2100      	movs	r1, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f9ce 	bl	8005a6c <RCCEx_PLLSAI1_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056d4:	e003      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	74fb      	strb	r3, [r7, #19]
      break;
 80056da:	e000      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80056dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056de:	7cfb      	ldrb	r3, [r7, #19]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10b      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056e4:	4b51      	ldr	r3, [pc, #324]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f2:	494e      	ldr	r1, [pc, #312]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80056fa:	e001      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 809e 	beq.w	800584a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800570e:	2300      	movs	r3, #0
 8005710:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005712:	4b46      	ldr	r3, [pc, #280]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00d      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005728:	4b40      	ldr	r3, [pc, #256]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800572a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572c:	4a3f      	ldr	r2, [pc, #252]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800572e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005732:	6593      	str	r3, [r2, #88]	@ 0x58
 8005734:	4b3d      	ldr	r3, [pc, #244]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005740:	2301      	movs	r3, #1
 8005742:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005744:	4b3a      	ldr	r3, [pc, #232]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a39      	ldr	r2, [pc, #228]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800574a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800574e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005750:	f7fd fa70 	bl	8002c34 <HAL_GetTick>
 8005754:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005756:	e009      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005758:	f7fd fa6c 	bl	8002c34 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d902      	bls.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	74fb      	strb	r3, [r7, #19]
        break;
 800576a:	e005      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800576c:	4b30      	ldr	r3, [pc, #192]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ef      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005778:	7cfb      	ldrb	r3, [r7, #19]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d15a      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800577e:	4b2b      	ldr	r3, [pc, #172]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005784:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005788:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01e      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	429a      	cmp	r2, r3
 8005798:	d019      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800579a:	4b24      	ldr	r3, [pc, #144]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800579c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057a6:	4b21      	ldr	r3, [pc, #132]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ac:	4a1f      	ldr	r2, [pc, #124]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057b6:	4b1d      	ldr	r3, [pc, #116]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057bc:	4a1b      	ldr	r2, [pc, #108]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057c6:	4a19      	ldr	r2, [pc, #100]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d016      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fd fa2c 	bl	8002c34 <HAL_GetTick>
 80057dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057de:	e00b      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e0:	f7fd fa28 	bl	8002c34 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d902      	bls.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	74fb      	strb	r3, [r7, #19]
            break;
 80057f6:	e006      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f8:	4b0c      	ldr	r3, [pc, #48]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0ec      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005806:	7cfb      	ldrb	r3, [r7, #19]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10b      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800580c:	4b07      	ldr	r3, [pc, #28]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005812:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581a:	4904      	ldr	r1, [pc, #16]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005822:	e009      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	74bb      	strb	r3, [r7, #18]
 8005828:	e006      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800582a:	bf00      	nop
 800582c:	40021000 	.word	0x40021000
 8005830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005838:	7c7b      	ldrb	r3, [r7, #17]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d105      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800583e:	4b8a      	ldr	r3, [pc, #552]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005842:	4a89      	ldr	r2, [pc, #548]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005848:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005856:	4b84      	ldr	r3, [pc, #528]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585c:	f023 0203 	bic.w	r2, r3, #3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	4980      	ldr	r1, [pc, #512]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005878:	4b7b      	ldr	r3, [pc, #492]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587e:	f023 020c 	bic.w	r2, r3, #12
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005886:	4978      	ldr	r1, [pc, #480]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800589a:	4b73      	ldr	r3, [pc, #460]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a8:	496f      	ldr	r1, [pc, #444]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058bc:	4b6a      	ldr	r3, [pc, #424]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ca:	4967      	ldr	r1, [pc, #412]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058de:	4b62      	ldr	r3, [pc, #392]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ec:	495e      	ldr	r1, [pc, #376]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005900:	4b59      	ldr	r3, [pc, #356]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005906:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590e:	4956      	ldr	r1, [pc, #344]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005922:	4b51      	ldr	r3, [pc, #324]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005928:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005930:	494d      	ldr	r1, [pc, #308]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d028      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005944:	4b48      	ldr	r3, [pc, #288]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005952:	4945      	ldr	r1, [pc, #276]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005962:	d106      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005964:	4b40      	ldr	r3, [pc, #256]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	4a3f      	ldr	r2, [pc, #252]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800596a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800596e:	60d3      	str	r3, [r2, #12]
 8005970:	e011      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800597a:	d10c      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3304      	adds	r3, #4
 8005980:	2101      	movs	r1, #1
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f872 	bl	8005a6c <RCCEx_PLLSAI1_Config>
 8005988:	4603      	mov	r3, r0
 800598a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800598c:	7cfb      	ldrb	r3, [r7, #19]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005992:	7cfb      	ldrb	r3, [r7, #19]
 8005994:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d028      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059a2:	4b31      	ldr	r3, [pc, #196]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b0:	492d      	ldr	r1, [pc, #180]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059c0:	d106      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059c2:	4b29      	ldr	r3, [pc, #164]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	4a28      	ldr	r2, [pc, #160]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059cc:	60d3      	str	r3, [r2, #12]
 80059ce:	e011      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059d8:	d10c      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3304      	adds	r3, #4
 80059de:	2101      	movs	r1, #1
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 f843 	bl	8005a6c <RCCEx_PLLSAI1_Config>
 80059e6:	4603      	mov	r3, r0
 80059e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059ea:	7cfb      	ldrb	r3, [r7, #19]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80059f0:	7cfb      	ldrb	r3, [r7, #19]
 80059f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01c      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a00:	4b19      	ldr	r3, [pc, #100]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a0e:	4916      	ldr	r1, [pc, #88]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a1e:	d10c      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3304      	adds	r3, #4
 8005a24:	2102      	movs	r1, #2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 f820 	bl	8005a6c <RCCEx_PLLSAI1_Config>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a30:	7cfb      	ldrb	r3, [r7, #19]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005a36:	7cfb      	ldrb	r3, [r7, #19]
 8005a38:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a46:	4b08      	ldr	r3, [pc, #32]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a54:	4904      	ldr	r1, [pc, #16]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40021000 	.word	0x40021000

08005a6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a7a:	4b74      	ldr	r3, [pc, #464]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d018      	beq.n	8005ab8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a86:	4b71      	ldr	r3, [pc, #452]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f003 0203 	and.w	r2, r3, #3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d10d      	bne.n	8005ab2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
       ||
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a9e:	4b6b      	ldr	r3, [pc, #428]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	091b      	lsrs	r3, r3, #4
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
       ||
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d047      	beq.n	8005b42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
 8005ab6:	e044      	b.n	8005b42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d018      	beq.n	8005af2 <RCCEx_PLLSAI1_Config+0x86>
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d825      	bhi.n	8005b10 <RCCEx_PLLSAI1_Config+0xa4>
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d002      	beq.n	8005ace <RCCEx_PLLSAI1_Config+0x62>
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d009      	beq.n	8005ae0 <RCCEx_PLLSAI1_Config+0x74>
 8005acc:	e020      	b.n	8005b10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ace:	4b5f      	ldr	r3, [pc, #380]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d11d      	bne.n	8005b16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ade:	e01a      	b.n	8005b16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d116      	bne.n	8005b1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005af0:	e013      	b.n	8005b1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005af2:	4b56      	ldr	r3, [pc, #344]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10f      	bne.n	8005b1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005afe:	4b53      	ldr	r3, [pc, #332]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b0e:	e006      	b.n	8005b1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	73fb      	strb	r3, [r7, #15]
      break;
 8005b14:	e004      	b.n	8005b20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b16:	bf00      	nop
 8005b18:	e002      	b.n	8005b20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b1a:	bf00      	nop
 8005b1c:	e000      	b.n	8005b20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10d      	bne.n	8005b42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b26:	4b49      	ldr	r3, [pc, #292]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6819      	ldr	r1, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	4943      	ldr	r1, [pc, #268]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d17c      	bne.n	8005c42 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b48:	4b40      	ldr	r3, [pc, #256]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b54:	f7fd f86e 	bl	8002c34 <HAL_GetTick>
 8005b58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b5a:	e009      	b.n	8005b70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b5c:	f7fd f86a 	bl	8002c34 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d902      	bls.n	8005b70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	73fb      	strb	r3, [r7, #15]
        break;
 8005b6e:	e005      	b.n	8005b7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b70:	4b36      	ldr	r3, [pc, #216]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1ef      	bne.n	8005b5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d15f      	bne.n	8005c42 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d110      	bne.n	8005baa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b88:	4b30      	ldr	r3, [pc, #192]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005b90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6892      	ldr	r2, [r2, #8]
 8005b98:	0211      	lsls	r1, r2, #8
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	68d2      	ldr	r2, [r2, #12]
 8005b9e:	06d2      	lsls	r2, r2, #27
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	492a      	ldr	r1, [pc, #168]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	610b      	str	r3, [r1, #16]
 8005ba8:	e027      	b.n	8005bfa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d112      	bne.n	8005bd6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bb0:	4b26      	ldr	r3, [pc, #152]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005bb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6892      	ldr	r2, [r2, #8]
 8005bc0:	0211      	lsls	r1, r2, #8
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6912      	ldr	r2, [r2, #16]
 8005bc6:	0852      	lsrs	r2, r2, #1
 8005bc8:	3a01      	subs	r2, #1
 8005bca:	0552      	lsls	r2, r2, #21
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	491f      	ldr	r1, [pc, #124]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	610b      	str	r3, [r1, #16]
 8005bd4:	e011      	b.n	8005bfa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005bde:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6892      	ldr	r2, [r2, #8]
 8005be6:	0211      	lsls	r1, r2, #8
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6952      	ldr	r2, [r2, #20]
 8005bec:	0852      	lsrs	r2, r2, #1
 8005bee:	3a01      	subs	r2, #1
 8005bf0:	0652      	lsls	r2, r2, #25
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	4915      	ldr	r1, [pc, #84]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bfa:	4b14      	ldr	r3, [pc, #80]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a13      	ldr	r2, [pc, #76]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c06:	f7fd f815 	bl	8002c34 <HAL_GetTick>
 8005c0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c0c:	e009      	b.n	8005c22 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c0e:	f7fd f811 	bl	8002c34 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d902      	bls.n	8005c22 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	73fb      	strb	r3, [r7, #15]
          break;
 8005c20:	e005      	b.n	8005c2e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c22:	4b0a      	ldr	r3, [pc, #40]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0ef      	beq.n	8005c0e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d106      	bne.n	8005c42 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c34:	4b05      	ldr	r3, [pc, #20]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	4903      	ldr	r1, [pc, #12]	@ (8005c4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40021000 	.word	0x40021000

08005c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e095      	b.n	8005d8e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d108      	bne.n	8005c7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c72:	d009      	beq.n	8005c88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	61da      	str	r2, [r3, #28]
 8005c7a:	e005      	b.n	8005c88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fc fb48 	bl	8002338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cc8:	d902      	bls.n	8005cd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	e002      	b.n	8005cd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005cde:	d007      	beq.n	8005cf0 <HAL_SPI_Init+0xa0>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ce8:	d002      	beq.n	8005cf0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d32:	ea42 0103 	orr.w	r1, r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	0c1b      	lsrs	r3, r3, #16
 8005d4c:	f003 0204 	and.w	r2, r3, #4
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d6c:	ea42 0103 	orr.w	r1, r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b088      	sub	sp, #32
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	603b      	str	r3, [r7, #0]
 8005da2:	4613      	mov	r3, r2
 8005da4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005da6:	f7fc ff45 	bl	8002c34 <HAL_GetTick>
 8005daa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005dac:	88fb      	ldrh	r3, [r7, #6]
 8005dae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d001      	beq.n	8005dc0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e15c      	b.n	800607a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_SPI_Transmit+0x36>
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e154      	b.n	800607a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_SPI_Transmit+0x48>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e14d      	b.n	800607a <HAL_SPI_Transmit+0x2e4>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2203      	movs	r2, #3
 8005dea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	88fa      	ldrh	r2, [r7, #6]
 8005dfe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	88fa      	ldrh	r2, [r7, #6]
 8005e04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e30:	d10f      	bne.n	8005e52 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5c:	2b40      	cmp	r3, #64	@ 0x40
 8005e5e:	d007      	beq.n	8005e70 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e78:	d952      	bls.n	8005f20 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <HAL_SPI_Transmit+0xf2>
 8005e82:	8b7b      	ldrh	r3, [r7, #26]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d145      	bne.n	8005f14 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8c:	881a      	ldrh	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e98:	1c9a      	adds	r2, r3, #2
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005eac:	e032      	b.n	8005f14 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d112      	bne.n	8005ee2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec0:	881a      	ldrh	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ecc:	1c9a      	adds	r2, r3, #2
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ee0:	e018      	b.n	8005f14 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ee2:	f7fc fea7 	bl	8002c34 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d803      	bhi.n	8005efa <HAL_SPI_Transmit+0x164>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef8:	d102      	bne.n	8005f00 <HAL_SPI_Transmit+0x16a>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d109      	bne.n	8005f14 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e0b2      	b.n	800607a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1c7      	bne.n	8005eae <HAL_SPI_Transmit+0x118>
 8005f1e:	e083      	b.n	8006028 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <HAL_SPI_Transmit+0x198>
 8005f28:	8b7b      	ldrh	r3, [r7, #26]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d177      	bne.n	800601e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d912      	bls.n	8005f5e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	881a      	ldrh	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f48:	1c9a      	adds	r2, r3, #2
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	3b02      	subs	r3, #2
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f5c:	e05f      	b.n	800601e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	330c      	adds	r3, #12
 8005f68:	7812      	ldrb	r2, [r2, #0]
 8005f6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f84:	e04b      	b.n	800601e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d12b      	bne.n	8005fec <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d912      	bls.n	8005fc4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa2:	881a      	ldrh	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fae:	1c9a      	adds	r2, r3, #2
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b02      	subs	r3, #2
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fc2:	e02c      	b.n	800601e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	330c      	adds	r3, #12
 8005fce:	7812      	ldrb	r2, [r2, #0]
 8005fd0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fea:	e018      	b.n	800601e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fec:	f7fc fe22 	bl	8002c34 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d803      	bhi.n	8006004 <HAL_SPI_Transmit+0x26e>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006002:	d102      	bne.n	800600a <HAL_SPI_Transmit+0x274>
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e02d      	b.n	800607a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1ae      	bne.n	8005f86 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f947 	bl	80062c0 <SPI_EndRxTxTransaction>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006078:	2300      	movs	r3, #0
  }
}
 800607a:	4618      	mov	r0, r3
 800607c:	3720      	adds	r7, #32
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	4613      	mov	r3, r2
 8006092:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006094:	f7fc fdce 	bl	8002c34 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609c:	1a9b      	subs	r3, r3, r2
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	4413      	add	r3, r2
 80060a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060a4:	f7fc fdc6 	bl	8002c34 <HAL_GetTick>
 80060a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060aa:	4b39      	ldr	r3, [pc, #228]	@ (8006190 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	015b      	lsls	r3, r3, #5
 80060b0:	0d1b      	lsrs	r3, r3, #20
 80060b2:	69fa      	ldr	r2, [r7, #28]
 80060b4:	fb02 f303 	mul.w	r3, r2, r3
 80060b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ba:	e054      	b.n	8006166 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c2:	d050      	beq.n	8006166 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060c4:	f7fc fdb6 	bl	8002c34 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	69fa      	ldr	r2, [r7, #28]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d902      	bls.n	80060da <SPI_WaitFlagStateUntilTimeout+0x56>
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d13d      	bne.n	8006156 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060f2:	d111      	bne.n	8006118 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060fc:	d004      	beq.n	8006108 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006106:	d107      	bne.n	8006118 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006116:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006120:	d10f      	bne.n	8006142 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006140:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e017      	b.n	8006186 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	3b01      	subs	r3, #1
 8006164:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4013      	ands	r3, r2
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	429a      	cmp	r2, r3
 8006174:	bf0c      	ite	eq
 8006176:	2301      	moveq	r3, #1
 8006178:	2300      	movne	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	429a      	cmp	r2, r3
 8006182:	d19b      	bne.n	80060bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3720      	adds	r7, #32
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	200001e4 	.word	0x200001e4

08006194 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08a      	sub	sp, #40	@ 0x28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80061a2:	2300      	movs	r3, #0
 80061a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061a6:	f7fc fd45 	bl	8002c34 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ae:	1a9b      	subs	r3, r3, r2
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	4413      	add	r3, r2
 80061b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80061b6:	f7fc fd3d 	bl	8002c34 <HAL_GetTick>
 80061ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	330c      	adds	r3, #12
 80061c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061c4:	4b3d      	ldr	r3, [pc, #244]	@ (80062bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	00da      	lsls	r2, r3, #3
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	0d1b      	lsrs	r3, r3, #20
 80061d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d6:	fb02 f303 	mul.w	r3, r2, r3
 80061da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061dc:	e060      	b.n	80062a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80061e4:	d107      	bne.n	80061f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d050      	beq.n	80062a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061fe:	f7fc fd19 	bl	8002c34 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800620a:	429a      	cmp	r2, r3
 800620c:	d902      	bls.n	8006214 <SPI_WaitFifoStateUntilTimeout+0x80>
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	2b00      	cmp	r3, #0
 8006212:	d13d      	bne.n	8006290 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006222:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800622c:	d111      	bne.n	8006252 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006236:	d004      	beq.n	8006242 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006240:	d107      	bne.n	8006252 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006250:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800625a:	d10f      	bne.n	800627c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800627a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e010      	b.n	80062b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	3b01      	subs	r3, #1
 800629e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	4013      	ands	r3, r2
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d196      	bne.n	80061de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3728      	adds	r7, #40	@ 0x28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	200001e4 	.word	0x200001e4

080062c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7ff ff5b 	bl	8006194 <SPI_WaitFifoStateUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d007      	beq.n	80062f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062e8:	f043 0220 	orr.w	r2, r3, #32
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e027      	b.n	8006344 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2200      	movs	r2, #0
 80062fc:	2180      	movs	r1, #128	@ 0x80
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f7ff fec0 	bl	8006084 <SPI_WaitFlagStateUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800630e:	f043 0220 	orr.w	r2, r3, #32
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e014      	b.n	8006344 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2200      	movs	r2, #0
 8006322:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f7ff ff34 	bl	8006194 <SPI_WaitFifoStateUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006336:	f043 0220 	orr.w	r2, r3, #32
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e000      	b.n	8006344 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e049      	b.n	80063f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d106      	bne.n	8006378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fc faaa 	bl	80028cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3304      	adds	r3, #4
 8006388:	4619      	mov	r1, r3
 800638a:	4610      	mov	r0, r2
 800638c:	f000 fb5e 	bl	8006a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	d001      	beq.n	8006414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e03b      	b.n	800648c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a19      	ldr	r2, [pc, #100]	@ (8006498 <HAL_TIM_Base_Start_IT+0x9c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d009      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x4e>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800643e:	d004      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x4e>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a15      	ldr	r2, [pc, #84]	@ (800649c <HAL_TIM_Base_Start_IT+0xa0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d115      	bne.n	8006476 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	4b13      	ldr	r3, [pc, #76]	@ (80064a0 <HAL_TIM_Base_Start_IT+0xa4>)
 8006452:	4013      	ands	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b06      	cmp	r3, #6
 800645a:	d015      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x8c>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006462:	d011      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006474:	e008      	b.n	8006488 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0201 	orr.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	e000      	b.n	800648a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006488:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	40012c00 	.word	0x40012c00
 800649c:	40014000 	.word	0x40014000
 80064a0:	00010007 	.word	0x00010007

080064a4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e049      	b.n	800654a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f841 	bl	8006552 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	4619      	mov	r1, r3
 80064e2:	4610      	mov	r0, r2
 80064e4:	f000 fab2 	bl	8006a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d020      	beq.n	80065ca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01b      	beq.n	80065ca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f06f 0202 	mvn.w	r2, #2
 800659a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fa2c 	bl	8006a0e <HAL_TIM_IC_CaptureCallback>
 80065b6:	e005      	b.n	80065c4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fa1e 	bl	80069fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fa2f 	bl	8006a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d020      	beq.n	8006616 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d01b      	beq.n	8006616 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f06f 0204 	mvn.w	r2, #4
 80065e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fa06 	bl	8006a0e <HAL_TIM_IC_CaptureCallback>
 8006602:	e005      	b.n	8006610 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f9f8 	bl	80069fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fa09 	bl	8006a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d020      	beq.n	8006662 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01b      	beq.n	8006662 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f06f 0208 	mvn.w	r2, #8
 8006632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2204      	movs	r2, #4
 8006638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f9e0 	bl	8006a0e <HAL_TIM_IC_CaptureCallback>
 800664e:	e005      	b.n	800665c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f9d2 	bl	80069fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f9e3 	bl	8006a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b00      	cmp	r3, #0
 800666a:	d020      	beq.n	80066ae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f003 0310 	and.w	r3, r3, #16
 8006672:	2b00      	cmp	r3, #0
 8006674:	d01b      	beq.n	80066ae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f06f 0210 	mvn.w	r2, #16
 800667e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2208      	movs	r2, #8
 8006684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f9ba 	bl	8006a0e <HAL_TIM_IC_CaptureCallback>
 800669a:	e005      	b.n	80066a8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f9ac 	bl	80069fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f9bd 	bl	8006a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00c      	beq.n	80066d2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d007      	beq.n	80066d2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f06f 0201 	mvn.w	r2, #1
 80066ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7fb fab5 	bl	8001c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d104      	bne.n	80066e6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00c      	beq.n	8006700 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80066f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fe16 	bl	800732c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00c      	beq.n	8006724 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800671c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fe0e 	bl	8007340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00c      	beq.n	8006748 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f977 	bl	8006a36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00c      	beq.n	800676c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b00      	cmp	r3, #0
 800675a:	d007      	beq.n	800676c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0220 	mvn.w	r2, #32
 8006764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fdd6 	bl	8007318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_TIM_OC_ConfigChannel+0x1e>
 800678e:	2302      	movs	r3, #2
 8006790:	e066      	b.n	8006860 <HAL_TIM_OC_ConfigChannel+0xec>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b14      	cmp	r3, #20
 800679e:	d857      	bhi.n	8006850 <HAL_TIM_OC_ConfigChannel+0xdc>
 80067a0:	a201      	add	r2, pc, #4	@ (adr r2, 80067a8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80067a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a6:	bf00      	nop
 80067a8:	080067fd 	.word	0x080067fd
 80067ac:	08006851 	.word	0x08006851
 80067b0:	08006851 	.word	0x08006851
 80067b4:	08006851 	.word	0x08006851
 80067b8:	0800680b 	.word	0x0800680b
 80067bc:	08006851 	.word	0x08006851
 80067c0:	08006851 	.word	0x08006851
 80067c4:	08006851 	.word	0x08006851
 80067c8:	08006819 	.word	0x08006819
 80067cc:	08006851 	.word	0x08006851
 80067d0:	08006851 	.word	0x08006851
 80067d4:	08006851 	.word	0x08006851
 80067d8:	08006827 	.word	0x08006827
 80067dc:	08006851 	.word	0x08006851
 80067e0:	08006851 	.word	0x08006851
 80067e4:	08006851 	.word	0x08006851
 80067e8:	08006835 	.word	0x08006835
 80067ec:	08006851 	.word	0x08006851
 80067f0:	08006851 	.word	0x08006851
 80067f4:	08006851 	.word	0x08006851
 80067f8:	08006843 	.word	0x08006843
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 f992 	bl	8006b2c <TIM_OC1_SetConfig>
      break;
 8006808:	e025      	b.n	8006856 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fa07 	bl	8006c24 <TIM_OC2_SetConfig>
      break;
 8006816:	e01e      	b.n	8006856 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fa7a 	bl	8006d18 <TIM_OC3_SetConfig>
      break;
 8006824:	e017      	b.n	8006856 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	4618      	mov	r0, r3
 800682e:	f000 faeb 	bl	8006e08 <TIM_OC4_SetConfig>
      break;
 8006832:	e010      	b.n	8006856 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fb42 	bl	8006ec4 <TIM_OC5_SetConfig>
      break;
 8006840:	e009      	b.n	8006856 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fb93 	bl	8006f74 <TIM_OC6_SetConfig>
      break;
 800684e:	e002      	b.n	8006856 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	75fb      	strb	r3, [r7, #23]
      break;
 8006854:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800685e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800687c:	2b01      	cmp	r3, #1
 800687e:	d101      	bne.n	8006884 <HAL_TIM_ConfigClockSource+0x1c>
 8006880:	2302      	movs	r3, #2
 8006882:	e0b6      	b.n	80069f2 <HAL_TIM_ConfigClockSource+0x18a>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80068a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068c0:	d03e      	beq.n	8006940 <HAL_TIM_ConfigClockSource+0xd8>
 80068c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068c6:	f200 8087 	bhi.w	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 80068ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ce:	f000 8086 	beq.w	80069de <HAL_TIM_ConfigClockSource+0x176>
 80068d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d6:	d87f      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 80068d8:	2b70      	cmp	r3, #112	@ 0x70
 80068da:	d01a      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0xaa>
 80068dc:	2b70      	cmp	r3, #112	@ 0x70
 80068de:	d87b      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 80068e0:	2b60      	cmp	r3, #96	@ 0x60
 80068e2:	d050      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x11e>
 80068e4:	2b60      	cmp	r3, #96	@ 0x60
 80068e6:	d877      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 80068e8:	2b50      	cmp	r3, #80	@ 0x50
 80068ea:	d03c      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0xfe>
 80068ec:	2b50      	cmp	r3, #80	@ 0x50
 80068ee:	d873      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 80068f0:	2b40      	cmp	r3, #64	@ 0x40
 80068f2:	d058      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x13e>
 80068f4:	2b40      	cmp	r3, #64	@ 0x40
 80068f6:	d86f      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 80068f8:	2b30      	cmp	r3, #48	@ 0x30
 80068fa:	d064      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x15e>
 80068fc:	2b30      	cmp	r3, #48	@ 0x30
 80068fe:	d86b      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 8006900:	2b20      	cmp	r3, #32
 8006902:	d060      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x15e>
 8006904:	2b20      	cmp	r3, #32
 8006906:	d867      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d05c      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x15e>
 800690c:	2b10      	cmp	r3, #16
 800690e:	d05a      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x15e>
 8006910:	e062      	b.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006922:	f000 fbfb 	bl	800711c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	609a      	str	r2, [r3, #8]
      break;
 800693e:	e04f      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006950:	f000 fbe4 	bl	800711c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006962:	609a      	str	r2, [r3, #8]
      break;
 8006964:	e03c      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006972:	461a      	mov	r2, r3
 8006974:	f000 fb58 	bl	8007028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2150      	movs	r1, #80	@ 0x50
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fbb1 	bl	80070e6 <TIM_ITRx_SetConfig>
      break;
 8006984:	e02c      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006992:	461a      	mov	r2, r3
 8006994:	f000 fb77 	bl	8007086 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2160      	movs	r1, #96	@ 0x60
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fba1 	bl	80070e6 <TIM_ITRx_SetConfig>
      break;
 80069a4:	e01c      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b2:	461a      	mov	r2, r3
 80069b4:	f000 fb38 	bl	8007028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2140      	movs	r1, #64	@ 0x40
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fb91 	bl	80070e6 <TIM_ITRx_SetConfig>
      break;
 80069c4:	e00c      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4619      	mov	r1, r3
 80069d0:	4610      	mov	r0, r2
 80069d2:	f000 fb88 	bl	80070e6 <TIM_ITRx_SetConfig>
      break;
 80069d6:	e003      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
      break;
 80069dc:	e000      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80069de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
	...

08006a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a30      	ldr	r2, [pc, #192]	@ (8006b20 <TIM_Base_SetConfig+0xd4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d003      	beq.n	8006a6c <TIM_Base_SetConfig+0x20>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a6a:	d108      	bne.n	8006a7e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a27      	ldr	r2, [pc, #156]	@ (8006b20 <TIM_Base_SetConfig+0xd4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00b      	beq.n	8006a9e <TIM_Base_SetConfig+0x52>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a8c:	d007      	beq.n	8006a9e <TIM_Base_SetConfig+0x52>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a24      	ldr	r2, [pc, #144]	@ (8006b24 <TIM_Base_SetConfig+0xd8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d003      	beq.n	8006a9e <TIM_Base_SetConfig+0x52>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a23      	ldr	r2, [pc, #140]	@ (8006b28 <TIM_Base_SetConfig+0xdc>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d108      	bne.n	8006ab0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a12      	ldr	r2, [pc, #72]	@ (8006b20 <TIM_Base_SetConfig+0xd4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d007      	beq.n	8006aec <TIM_Base_SetConfig+0xa0>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a11      	ldr	r2, [pc, #68]	@ (8006b24 <TIM_Base_SetConfig+0xd8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d003      	beq.n	8006aec <TIM_Base_SetConfig+0xa0>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a10      	ldr	r2, [pc, #64]	@ (8006b28 <TIM_Base_SetConfig+0xdc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d103      	bne.n	8006af4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d105      	bne.n	8006b12 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	f023 0201 	bic.w	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	611a      	str	r2, [r3, #16]
  }
}
 8006b12:	bf00      	nop
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40012c00 	.word	0x40012c00
 8006b24:	40014000 	.word	0x40014000
 8006b28:	40014400 	.word	0x40014400

08006b2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	f023 0201 	bic.w	r2, r3, #1
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0303 	bic.w	r3, r3, #3
 8006b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f023 0302 	bic.w	r3, r3, #2
 8006b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a24      	ldr	r2, [pc, #144]	@ (8006c18 <TIM_OC1_SetConfig+0xec>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d007      	beq.n	8006b9c <TIM_OC1_SetConfig+0x70>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a23      	ldr	r2, [pc, #140]	@ (8006c1c <TIM_OC1_SetConfig+0xf0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d003      	beq.n	8006b9c <TIM_OC1_SetConfig+0x70>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a22      	ldr	r2, [pc, #136]	@ (8006c20 <TIM_OC1_SetConfig+0xf4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d10c      	bne.n	8006bb6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f023 0308 	bic.w	r3, r3, #8
 8006ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f023 0304 	bic.w	r3, r3, #4
 8006bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a17      	ldr	r2, [pc, #92]	@ (8006c18 <TIM_OC1_SetConfig+0xec>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d007      	beq.n	8006bce <TIM_OC1_SetConfig+0xa2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a16      	ldr	r2, [pc, #88]	@ (8006c1c <TIM_OC1_SetConfig+0xf0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d003      	beq.n	8006bce <TIM_OC1_SetConfig+0xa2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a15      	ldr	r2, [pc, #84]	@ (8006c20 <TIM_OC1_SetConfig+0xf4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d111      	bne.n	8006bf2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	621a      	str	r2, [r3, #32]
}
 8006c0c:	bf00      	nop
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40014000 	.word	0x40014000
 8006c20:	40014400 	.word	0x40014400

08006c24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	f023 0210 	bic.w	r2, r3, #16
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f023 0320 	bic.w	r3, r3, #32
 8006c72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a22      	ldr	r2, [pc, #136]	@ (8006d0c <TIM_OC2_SetConfig+0xe8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d10d      	bne.n	8006ca4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ca2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a19      	ldr	r2, [pc, #100]	@ (8006d0c <TIM_OC2_SetConfig+0xe8>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d007      	beq.n	8006cbc <TIM_OC2_SetConfig+0x98>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a18      	ldr	r2, [pc, #96]	@ (8006d10 <TIM_OC2_SetConfig+0xec>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_OC2_SetConfig+0x98>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a17      	ldr	r2, [pc, #92]	@ (8006d14 <TIM_OC2_SetConfig+0xf0>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d113      	bne.n	8006ce4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	621a      	str	r2, [r3, #32]
}
 8006cfe:	bf00      	nop
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	40014000 	.word	0x40014000
 8006d14:	40014400 	.word	0x40014400

08006d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0303 	bic.w	r3, r3, #3
 8006d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	021b      	lsls	r3, r3, #8
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a21      	ldr	r2, [pc, #132]	@ (8006dfc <TIM_OC3_SetConfig+0xe4>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d10d      	bne.n	8006d96 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	021b      	lsls	r3, r3, #8
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a18      	ldr	r2, [pc, #96]	@ (8006dfc <TIM_OC3_SetConfig+0xe4>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d007      	beq.n	8006dae <TIM_OC3_SetConfig+0x96>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a17      	ldr	r2, [pc, #92]	@ (8006e00 <TIM_OC3_SetConfig+0xe8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d003      	beq.n	8006dae <TIM_OC3_SetConfig+0x96>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a16      	ldr	r2, [pc, #88]	@ (8006e04 <TIM_OC3_SetConfig+0xec>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d113      	bne.n	8006dd6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	621a      	str	r2, [r3, #32]
}
 8006df0:	bf00      	nop
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	40012c00 	.word	0x40012c00
 8006e00:	40014000 	.word	0x40014000
 8006e04:	40014400 	.word	0x40014400

08006e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	021b      	lsls	r3, r3, #8
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	031b      	lsls	r3, r3, #12
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a14      	ldr	r2, [pc, #80]	@ (8006eb8 <TIM_OC4_SetConfig+0xb0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d007      	beq.n	8006e7c <TIM_OC4_SetConfig+0x74>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a13      	ldr	r2, [pc, #76]	@ (8006ebc <TIM_OC4_SetConfig+0xb4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d003      	beq.n	8006e7c <TIM_OC4_SetConfig+0x74>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a12      	ldr	r2, [pc, #72]	@ (8006ec0 <TIM_OC4_SetConfig+0xb8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d109      	bne.n	8006e90 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	019b      	lsls	r3, r3, #6
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	621a      	str	r2, [r3, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	40012c00 	.word	0x40012c00
 8006ebc:	40014000 	.word	0x40014000
 8006ec0:	40014400 	.word	0x40014400

08006ec4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	041b      	lsls	r3, r3, #16
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a13      	ldr	r2, [pc, #76]	@ (8006f68 <TIM_OC5_SetConfig+0xa4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d007      	beq.n	8006f2e <TIM_OC5_SetConfig+0x6a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a12      	ldr	r2, [pc, #72]	@ (8006f6c <TIM_OC5_SetConfig+0xa8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d003      	beq.n	8006f2e <TIM_OC5_SetConfig+0x6a>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a11      	ldr	r2, [pc, #68]	@ (8006f70 <TIM_OC5_SetConfig+0xac>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d109      	bne.n	8006f42 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	621a      	str	r2, [r3, #32]
}
 8006f5c:	bf00      	nop
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40012c00 	.word	0x40012c00
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	40014400 	.word	0x40014400

08006f74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	051b      	lsls	r3, r3, #20
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a14      	ldr	r2, [pc, #80]	@ (800701c <TIM_OC6_SetConfig+0xa8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d007      	beq.n	8006fe0 <TIM_OC6_SetConfig+0x6c>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a13      	ldr	r2, [pc, #76]	@ (8007020 <TIM_OC6_SetConfig+0xac>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d003      	beq.n	8006fe0 <TIM_OC6_SetConfig+0x6c>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a12      	ldr	r2, [pc, #72]	@ (8007024 <TIM_OC6_SetConfig+0xb0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d109      	bne.n	8006ff4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	029b      	lsls	r3, r3, #10
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	621a      	str	r2, [r3, #32]
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40012c00 	.word	0x40012c00
 8007020:	40014000 	.word	0x40014000
 8007024:	40014400 	.word	0x40014400

08007028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	f023 0201 	bic.w	r2, r3, #1
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f023 030a 	bic.w	r3, r3, #10
 8007064:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	621a      	str	r2, [r3, #32]
}
 800707a:	bf00      	nop
 800707c:	371c      	adds	r7, #28
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007086:	b480      	push	{r7}
 8007088:	b087      	sub	sp, #28
 800708a:	af00      	add	r7, sp, #0
 800708c:	60f8      	str	r0, [r7, #12]
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	f023 0210 	bic.w	r2, r3, #16
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	031b      	lsls	r3, r3, #12
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	bf00      	nop
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	f043 0307 	orr.w	r3, r3, #7
 8007108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	609a      	str	r2, [r3, #8]
}
 8007110:	bf00      	nop
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007136:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	021a      	lsls	r2, r3, #8
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	431a      	orrs	r2, r3
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4313      	orrs	r3, r2
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	609a      	str	r2, [r3, #8]
}
 8007150:	bf00      	nop
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007170:	2302      	movs	r3, #2
 8007172:	e04f      	b.n	8007214 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a21      	ldr	r2, [pc, #132]	@ (8007220 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d108      	bne.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80071a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a14      	ldr	r2, [pc, #80]	@ (8007220 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d009      	beq.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071dc:	d004      	beq.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a10      	ldr	r2, [pc, #64]	@ (8007224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d10c      	bne.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	40012c00 	.word	0x40012c00
 8007224:	40014000 	.word	0x40014000

08007228 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007240:	2302      	movs	r3, #2
 8007242:	e060      	b.n	8007306 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4313      	orrs	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	041b      	lsls	r3, r3, #16
 80072ba:	4313      	orrs	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a14      	ldr	r2, [pc, #80]	@ (8007314 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d115      	bne.n	80072f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d2:	051b      	lsls	r3, r3, #20
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40012c00 	.word	0x40012c00

08007318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e040      	b.n	80073e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7fb fb6a 	bl	8002a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2224      	movs	r2, #36	@ 0x24
 8007380:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 0201 	bic.w	r2, r2, #1
 8007390:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fe04 	bl	8007fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fbd5 	bl	8007b50 <UART_SetConfig>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e01b      	b.n	80073e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689a      	ldr	r2, [r3, #8]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0201 	orr.w	r2, r2, #1
 80073de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fe83 	bl	80080ec <UART_CheckIdleState>
 80073e6:	4603      	mov	r3, r0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08a      	sub	sp, #40	@ 0x28
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	4613      	mov	r3, r2
 80073fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007404:	2b20      	cmp	r3, #32
 8007406:	d177      	bne.n	80074f8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <HAL_UART_Transmit+0x24>
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e070      	b.n	80074fa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2221      	movs	r2, #33	@ 0x21
 8007424:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007426:	f7fb fc05 	bl	8002c34 <HAL_GetTick>
 800742a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007444:	d108      	bne.n	8007458 <HAL_UART_Transmit+0x68>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d104      	bne.n	8007458 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e003      	b.n	8007460 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007460:	e02f      	b.n	80074c2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2200      	movs	r2, #0
 800746a:	2180      	movs	r1, #128	@ 0x80
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fee5 	bl	800823c <UART_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d004      	beq.n	8007482 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2220      	movs	r2, #32
 800747c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e03b      	b.n	80074fa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10b      	bne.n	80074a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	881a      	ldrh	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007494:	b292      	uxth	r2, r2
 8007496:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	3302      	adds	r3, #2
 800749c:	61bb      	str	r3, [r7, #24]
 800749e:	e007      	b.n	80074b0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	781a      	ldrb	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	3301      	adds	r3, #1
 80074ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1c9      	bne.n	8007462 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2200      	movs	r2, #0
 80074d6:	2140      	movs	r1, #64	@ 0x40
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 feaf 	bl	800823c <UART_WaitOnFlagUntilTimeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d004      	beq.n	80074ee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2220      	movs	r2, #32
 80074e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e005      	b.n	80074fa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2220      	movs	r2, #32
 80074f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	e000      	b.n	80074fa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80074f8:	2302      	movs	r3, #2
  }
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3720      	adds	r7, #32
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b0ba      	sub	sp, #232	@ 0xe8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800752a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800752e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007532:	4013      	ands	r3, r2
 8007534:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800753c:	2b00      	cmp	r3, #0
 800753e:	d115      	bne.n	800756c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007544:	f003 0320 	and.w	r3, r3, #32
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00f      	beq.n	800756c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800754c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d009      	beq.n	800756c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 82ca 	beq.w	8007af6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
      }
      return;
 800756a:	e2c4      	b.n	8007af6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800756c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8117 	beq.w	80077a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d106      	bne.n	8007590 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007582:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007586:	4b85      	ldr	r3, [pc, #532]	@ (800779c <HAL_UART_IRQHandler+0x298>)
 8007588:	4013      	ands	r3, r2
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 810a 	beq.w	80077a4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d011      	beq.n	80075c0 <HAL_UART_IRQHandler+0xbc>
 800759c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2201      	movs	r2, #1
 80075ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075b6:	f043 0201 	orr.w	r2, r3, #1
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d011      	beq.n	80075f0 <HAL_UART_IRQHandler+0xec>
 80075cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00b      	beq.n	80075f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2202      	movs	r2, #2
 80075de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075e6:	f043 0204 	orr.w	r2, r3, #4
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d011      	beq.n	8007620 <HAL_UART_IRQHandler+0x11c>
 80075fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2204      	movs	r2, #4
 800760e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007616:	f043 0202 	orr.w	r2, r3, #2
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b00      	cmp	r3, #0
 800762a:	d017      	beq.n	800765c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800762c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007630:	f003 0320 	and.w	r3, r3, #32
 8007634:	2b00      	cmp	r3, #0
 8007636:	d105      	bne.n	8007644 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800763c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2208      	movs	r2, #8
 800764a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007652:	f043 0208 	orr.w	r2, r3, #8
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800765c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007664:	2b00      	cmp	r3, #0
 8007666:	d012      	beq.n	800768e <HAL_UART_IRQHandler+0x18a>
 8007668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800766c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00c      	beq.n	800768e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800767c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007684:	f043 0220 	orr.w	r2, r3, #32
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 8230 	beq.w	8007afa <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800769a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800769e:	f003 0320 	and.w	r3, r3, #32
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00d      	beq.n	80076c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076aa:	f003 0320 	and.w	r3, r3, #32
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d007      	beq.n	80076c2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076d6:	2b40      	cmp	r3, #64	@ 0x40
 80076d8:	d005      	beq.n	80076e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d04f      	beq.n	8007786 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fe15 	bl	8008316 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f6:	2b40      	cmp	r3, #64	@ 0x40
 80076f8:	d141      	bne.n	800777e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007704:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007710:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007714:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007718:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3308      	adds	r3, #8
 8007722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007726:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800772a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800773e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1d9      	bne.n	80076fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800774a:	2b00      	cmp	r3, #0
 800774c:	d013      	beq.n	8007776 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007752:	4a13      	ldr	r2, [pc, #76]	@ (80077a0 <HAL_UART_IRQHandler+0x29c>)
 8007754:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800775a:	4618      	mov	r0, r3
 800775c:	f7fc ff17 	bl	800458e <HAL_DMA_Abort_IT>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d017      	beq.n	8007796 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800776a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007770:	4610      	mov	r0, r2
 8007772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	e00f      	b.n	8007796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9d4 	bl	8007b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777c:	e00b      	b.n	8007796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f9d0 	bl	8007b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007784:	e007      	b.n	8007796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f9cc 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007794:	e1b1      	b.n	8007afa <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007796:	bf00      	nop
    return;
 8007798:	e1af      	b.n	8007afa <HAL_UART_IRQHandler+0x5f6>
 800779a:	bf00      	nop
 800779c:	04000120 	.word	0x04000120
 80077a0:	080083df 	.word	0x080083df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	f040 816a 	bne.w	8007a82 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077b2:	f003 0310 	and.w	r3, r3, #16
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 8163 	beq.w	8007a82 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 815c 	beq.w	8007a82 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2210      	movs	r2, #16
 80077d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077dc:	2b40      	cmp	r3, #64	@ 0x40
 80077de:	f040 80d4 	bne.w	800798a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 80ad 	beq.w	8007952 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80077fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007802:	429a      	cmp	r2, r3
 8007804:	f080 80a5 	bcs.w	8007952 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800780e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b00      	cmp	r3, #0
 8007820:	f040 8086 	bne.w	8007930 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007838:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800783c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007840:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800784e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007852:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800785a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007866:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1da      	bne.n	8007824 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007876:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800787e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007880:	f023 0301 	bic.w	r3, r3, #1
 8007884:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007892:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007896:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800789a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80078a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e1      	bne.n	800786e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3308      	adds	r3, #8
 80078b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80078ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3308      	adds	r3, #8
 80078ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80078ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80078d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80078d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80078dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e3      	bne.n	80078aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007900:	f023 0310 	bic.w	r3, r3, #16
 8007904:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	461a      	mov	r2, r3
 800790e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007912:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007914:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007918:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e4      	bne.n	80078f0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800792a:	4618      	mov	r0, r3
 800792c:	f7fc fdf1 	bl	8004512 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007942:	b29b      	uxth	r3, r3
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	b29b      	uxth	r3, r3
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f8f4 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007950:	e0d5      	b.n	8007afe <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007958:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800795c:	429a      	cmp	r2, r3
 800795e:	f040 80ce 	bne.w	8007afe <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b20      	cmp	r3, #32
 8007970:	f040 80c5 	bne.w	8007afe <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f8d8 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
      return;
 8007988:	e0b9      	b.n	8007afe <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007996:	b29b      	uxth	r3, r3
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 80ab 	beq.w	8007b02 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80079ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 80a6 	beq.w	8007b02 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80079da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e4      	bne.n	80079b6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3308      	adds	r3, #8
 80079f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	623b      	str	r3, [r7, #32]
   return(result);
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	f023 0301 	bic.w	r3, r3, #1
 8007a02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a10:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e3      	bne.n	80079ec <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f023 0310 	bic.w	r3, r3, #16
 8007a4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a5a:	61fb      	str	r3, [r7, #28]
 8007a5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5e:	69b9      	ldr	r1, [r7, #24]
 8007a60:	69fa      	ldr	r2, [r7, #28]
 8007a62:	e841 2300 	strex	r3, r2, [r1]
 8007a66:	617b      	str	r3, [r7, #20]
   return(result);
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1e4      	bne.n	8007a38 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f85c 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a80:	e03f      	b.n	8007b02 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00e      	beq.n	8007aac <HAL_UART_IRQHandler+0x5a8>
 8007a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d008      	beq.n	8007aac <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007aa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fcda 	bl	800845e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aaa:	e02d      	b.n	8007b08 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00e      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d008      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01c      	beq.n	8007b06 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	4798      	blx	r3
    }
    return;
 8007ad4:	e017      	b.n	8007b06 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d012      	beq.n	8007b08 <HAL_UART_IRQHandler+0x604>
 8007ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00c      	beq.n	8007b08 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fc8b 	bl	800840a <UART_EndTransmit_IT>
    return;
 8007af4:	e008      	b.n	8007b08 <HAL_UART_IRQHandler+0x604>
      return;
 8007af6:	bf00      	nop
 8007af8:	e006      	b.n	8007b08 <HAL_UART_IRQHandler+0x604>
    return;
 8007afa:	bf00      	nop
 8007afc:	e004      	b.n	8007b08 <HAL_UART_IRQHandler+0x604>
      return;
 8007afe:	bf00      	nop
 8007b00:	e002      	b.n	8007b08 <HAL_UART_IRQHandler+0x604>
      return;
 8007b02:	bf00      	nop
 8007b04:	e000      	b.n	8007b08 <HAL_UART_IRQHandler+0x604>
    return;
 8007b06:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007b08:	37e8      	adds	r7, #232	@ 0xe8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop

08007b10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b54:	b08a      	sub	sp, #40	@ 0x28
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	4bb4      	ldr	r3, [pc, #720]	@ (8007e50 <UART_SetConfig+0x300>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4aa9      	ldr	r2, [pc, #676]	@ (8007e54 <UART_SetConfig+0x304>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d004      	beq.n	8007bbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4aa0      	ldr	r2, [pc, #640]	@ (8007e58 <UART_SetConfig+0x308>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d126      	bne.n	8007c28 <UART_SetConfig+0xd8>
 8007bda:	4ba0      	ldr	r3, [pc, #640]	@ (8007e5c <UART_SetConfig+0x30c>)
 8007bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be0:	f003 0303 	and.w	r3, r3, #3
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d81b      	bhi.n	8007c20 <UART_SetConfig+0xd0>
 8007be8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <UART_SetConfig+0xa0>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c01 	.word	0x08007c01
 8007bf4:	08007c11 	.word	0x08007c11
 8007bf8:	08007c09 	.word	0x08007c09
 8007bfc:	08007c19 	.word	0x08007c19
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c06:	e080      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c0e:	e07c      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007c10:	2304      	movs	r3, #4
 8007c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c16:	e078      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007c18:	2308      	movs	r3, #8
 8007c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c1e:	e074      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007c20:	2310      	movs	r3, #16
 8007c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c26:	e070      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a8c      	ldr	r2, [pc, #560]	@ (8007e60 <UART_SetConfig+0x310>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d138      	bne.n	8007ca4 <UART_SetConfig+0x154>
 8007c32:	4b8a      	ldr	r3, [pc, #552]	@ (8007e5c <UART_SetConfig+0x30c>)
 8007c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c38:	f003 030c 	and.w	r3, r3, #12
 8007c3c:	2b0c      	cmp	r3, #12
 8007c3e:	d82d      	bhi.n	8007c9c <UART_SetConfig+0x14c>
 8007c40:	a201      	add	r2, pc, #4	@ (adr r2, 8007c48 <UART_SetConfig+0xf8>)
 8007c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c46:	bf00      	nop
 8007c48:	08007c7d 	.word	0x08007c7d
 8007c4c:	08007c9d 	.word	0x08007c9d
 8007c50:	08007c9d 	.word	0x08007c9d
 8007c54:	08007c9d 	.word	0x08007c9d
 8007c58:	08007c8d 	.word	0x08007c8d
 8007c5c:	08007c9d 	.word	0x08007c9d
 8007c60:	08007c9d 	.word	0x08007c9d
 8007c64:	08007c9d 	.word	0x08007c9d
 8007c68:	08007c85 	.word	0x08007c85
 8007c6c:	08007c9d 	.word	0x08007c9d
 8007c70:	08007c9d 	.word	0x08007c9d
 8007c74:	08007c9d 	.word	0x08007c9d
 8007c78:	08007c95 	.word	0x08007c95
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c82:	e042      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007c84:	2302      	movs	r3, #2
 8007c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c8a:	e03e      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007c8c:	2304      	movs	r3, #4
 8007c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c92:	e03a      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007c94:	2308      	movs	r3, #8
 8007c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c9a:	e036      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ca2:	e032      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8007e54 <UART_SetConfig+0x304>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d12a      	bne.n	8007d04 <UART_SetConfig+0x1b4>
 8007cae:	4b6b      	ldr	r3, [pc, #428]	@ (8007e5c <UART_SetConfig+0x30c>)
 8007cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007cb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cbc:	d01a      	beq.n	8007cf4 <UART_SetConfig+0x1a4>
 8007cbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cc2:	d81b      	bhi.n	8007cfc <UART_SetConfig+0x1ac>
 8007cc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cc8:	d00c      	beq.n	8007ce4 <UART_SetConfig+0x194>
 8007cca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cce:	d815      	bhi.n	8007cfc <UART_SetConfig+0x1ac>
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <UART_SetConfig+0x18c>
 8007cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cd8:	d008      	beq.n	8007cec <UART_SetConfig+0x19c>
 8007cda:	e00f      	b.n	8007cfc <UART_SetConfig+0x1ac>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ce2:	e012      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cea:	e00e      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007cec:	2304      	movs	r3, #4
 8007cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cf2:	e00a      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007cf4:	2308      	movs	r3, #8
 8007cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cfa:	e006      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007cfc:	2310      	movs	r3, #16
 8007cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d02:	e002      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007d04:	2310      	movs	r3, #16
 8007d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a51      	ldr	r2, [pc, #324]	@ (8007e54 <UART_SetConfig+0x304>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d17a      	bne.n	8007e0a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d824      	bhi.n	8007d66 <UART_SetConfig+0x216>
 8007d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d24 <UART_SetConfig+0x1d4>)
 8007d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d22:	bf00      	nop
 8007d24:	08007d49 	.word	0x08007d49
 8007d28:	08007d67 	.word	0x08007d67
 8007d2c:	08007d51 	.word	0x08007d51
 8007d30:	08007d67 	.word	0x08007d67
 8007d34:	08007d57 	.word	0x08007d57
 8007d38:	08007d67 	.word	0x08007d67
 8007d3c:	08007d67 	.word	0x08007d67
 8007d40:	08007d67 	.word	0x08007d67
 8007d44:	08007d5f 	.word	0x08007d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d48:	f7fd fc0e 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8007d4c:	61f8      	str	r0, [r7, #28]
        break;
 8007d4e:	e010      	b.n	8007d72 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d50:	4b44      	ldr	r3, [pc, #272]	@ (8007e64 <UART_SetConfig+0x314>)
 8007d52:	61fb      	str	r3, [r7, #28]
        break;
 8007d54:	e00d      	b.n	8007d72 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d56:	f7fd fb6f 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 8007d5a:	61f8      	str	r0, [r7, #28]
        break;
 8007d5c:	e009      	b.n	8007d72 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d62:	61fb      	str	r3, [r7, #28]
        break;
 8007d64:	e005      	b.n	8007d72 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 8107 	beq.w	8007f88 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	4413      	add	r3, r2
 8007d84:	69fa      	ldr	r2, [r7, #28]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d305      	bcc.n	8007d96 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d90:	69fa      	ldr	r2, [r7, #28]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d903      	bls.n	8007d9e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d9c:	e0f4      	b.n	8007f88 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	2200      	movs	r2, #0
 8007da2:	461c      	mov	r4, r3
 8007da4:	4615      	mov	r5, r2
 8007da6:	f04f 0200 	mov.w	r2, #0
 8007daa:	f04f 0300 	mov.w	r3, #0
 8007dae:	022b      	lsls	r3, r5, #8
 8007db0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007db4:	0222      	lsls	r2, r4, #8
 8007db6:	68f9      	ldr	r1, [r7, #12]
 8007db8:	6849      	ldr	r1, [r1, #4]
 8007dba:	0849      	lsrs	r1, r1, #1
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	4688      	mov	r8, r1
 8007dc0:	4681      	mov	r9, r0
 8007dc2:	eb12 0a08 	adds.w	sl, r2, r8
 8007dc6:	eb43 0b09 	adc.w	fp, r3, r9
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	603b      	str	r3, [r7, #0]
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dd8:	4650      	mov	r0, sl
 8007dda:	4659      	mov	r1, fp
 8007ddc:	f7f8 ff34 	bl	8000c48 <__aeabi_uldivmod>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4613      	mov	r3, r2
 8007de6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dee:	d308      	bcc.n	8007e02 <UART_SetConfig+0x2b2>
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007df6:	d204      	bcs.n	8007e02 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	60da      	str	r2, [r3, #12]
 8007e00:	e0c2      	b.n	8007f88 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007e08:	e0be      	b.n	8007f88 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e12:	d16a      	bne.n	8007eea <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007e14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d834      	bhi.n	8007e86 <UART_SetConfig+0x336>
 8007e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e24 <UART_SetConfig+0x2d4>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e69 	.word	0x08007e69
 8007e2c:	08007e71 	.word	0x08007e71
 8007e30:	08007e87 	.word	0x08007e87
 8007e34:	08007e77 	.word	0x08007e77
 8007e38:	08007e87 	.word	0x08007e87
 8007e3c:	08007e87 	.word	0x08007e87
 8007e40:	08007e87 	.word	0x08007e87
 8007e44:	08007e7f 	.word	0x08007e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e48:	f7fd fb8e 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8007e4c:	61f8      	str	r0, [r7, #28]
        break;
 8007e4e:	e020      	b.n	8007e92 <UART_SetConfig+0x342>
 8007e50:	efff69f3 	.word	0xefff69f3
 8007e54:	40008000 	.word	0x40008000
 8007e58:	40013800 	.word	0x40013800
 8007e5c:	40021000 	.word	0x40021000
 8007e60:	40004400 	.word	0x40004400
 8007e64:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e68:	f7fd fb94 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8007e6c:	61f8      	str	r0, [r7, #28]
        break;
 8007e6e:	e010      	b.n	8007e92 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e70:	4b4c      	ldr	r3, [pc, #304]	@ (8007fa4 <UART_SetConfig+0x454>)
 8007e72:	61fb      	str	r3, [r7, #28]
        break;
 8007e74:	e00d      	b.n	8007e92 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e76:	f7fd fadf 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 8007e7a:	61f8      	str	r0, [r7, #28]
        break;
 8007e7c:	e009      	b.n	8007e92 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e82:	61fb      	str	r3, [r7, #28]
        break;
 8007e84:	e005      	b.n	8007e92 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d077      	beq.n	8007f88 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	005a      	lsls	r2, r3, #1
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	085b      	lsrs	r3, r3, #1
 8007ea2:	441a      	add	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	2b0f      	cmp	r3, #15
 8007eb2:	d916      	bls.n	8007ee2 <UART_SetConfig+0x392>
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eba:	d212      	bcs.n	8007ee2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	f023 030f 	bic.w	r3, r3, #15
 8007ec4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	085b      	lsrs	r3, r3, #1
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	f003 0307 	and.w	r3, r3, #7
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	8afb      	ldrh	r3, [r7, #22]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	8afa      	ldrh	r2, [r7, #22]
 8007ede:	60da      	str	r2, [r3, #12]
 8007ee0:	e052      	b.n	8007f88 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007ee8:	e04e      	b.n	8007f88 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007eea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007eee:	2b08      	cmp	r3, #8
 8007ef0:	d827      	bhi.n	8007f42 <UART_SetConfig+0x3f2>
 8007ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef8 <UART_SetConfig+0x3a8>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f1d 	.word	0x08007f1d
 8007efc:	08007f25 	.word	0x08007f25
 8007f00:	08007f2d 	.word	0x08007f2d
 8007f04:	08007f43 	.word	0x08007f43
 8007f08:	08007f33 	.word	0x08007f33
 8007f0c:	08007f43 	.word	0x08007f43
 8007f10:	08007f43 	.word	0x08007f43
 8007f14:	08007f43 	.word	0x08007f43
 8007f18:	08007f3b 	.word	0x08007f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f1c:	f7fd fb24 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8007f20:	61f8      	str	r0, [r7, #28]
        break;
 8007f22:	e014      	b.n	8007f4e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f24:	f7fd fb36 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8007f28:	61f8      	str	r0, [r7, #28]
        break;
 8007f2a:	e010      	b.n	8007f4e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8007fa4 <UART_SetConfig+0x454>)
 8007f2e:	61fb      	str	r3, [r7, #28]
        break;
 8007f30:	e00d      	b.n	8007f4e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f32:	f7fd fa81 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 8007f36:	61f8      	str	r0, [r7, #28]
        break;
 8007f38:	e009      	b.n	8007f4e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f3e:	61fb      	str	r3, [r7, #28]
        break;
 8007f40:	e005      	b.n	8007f4e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007f4c:	bf00      	nop
    }

    if (pclk != 0U)
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d019      	beq.n	8007f88 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	085a      	lsrs	r2, r3, #1
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	441a      	add	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f66:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	2b0f      	cmp	r3, #15
 8007f6c:	d909      	bls.n	8007f82 <UART_SetConfig+0x432>
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f74:	d205      	bcs.n	8007f82 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	60da      	str	r2, [r3, #12]
 8007f80:	e002      	b.n	8007f88 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007f94:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3728      	adds	r7, #40	@ 0x28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fa2:	bf00      	nop
 8007fa4:	00f42400 	.word	0x00f42400

08007fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00a      	beq.n	8008016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	430a      	orrs	r2, r1
 8008014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801a:	f003 0304 	and.w	r3, r3, #4
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00a      	beq.n	800805a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01a      	beq.n	80080be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080a6:	d10a      	bne.n	80080be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	605a      	str	r2, [r3, #4]
  }
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b098      	sub	sp, #96	@ 0x60
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080fc:	f7fa fd9a 	bl	8002c34 <HAL_GetTick>
 8008100:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b08      	cmp	r3, #8
 800810e:	d12e      	bne.n	800816e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008110:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008118:	2200      	movs	r2, #0
 800811a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f88c 	bl	800823c <UART_WaitOnFlagUntilTimeout>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d021      	beq.n	800816e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008132:	e853 3f00 	ldrex	r3, [r3]
 8008136:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800813e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008148:	647b      	str	r3, [r7, #68]	@ 0x44
 800814a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800814e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e6      	bne.n	800812a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e062      	b.n	8008234 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0304 	and.w	r3, r3, #4
 8008178:	2b04      	cmp	r3, #4
 800817a:	d149      	bne.n	8008210 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800817c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008184:	2200      	movs	r2, #0
 8008186:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f856 	bl	800823c <UART_WaitOnFlagUntilTimeout>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d03c      	beq.n	8008210 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819e:	e853 3f00 	ldrex	r3, [r3]
 80081a2:	623b      	str	r3, [r7, #32]
   return(result);
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80081b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081bc:	e841 2300 	strex	r3, r2, [r1]
 80081c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1e6      	bne.n	8008196 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3308      	adds	r3, #8
 80081ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	e853 3f00 	ldrex	r3, [r3]
 80081d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0301 	bic.w	r3, r3, #1
 80081de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3308      	adds	r3, #8
 80081e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081e8:	61fa      	str	r2, [r7, #28]
 80081ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ec:	69b9      	ldr	r1, [r7, #24]
 80081ee:	69fa      	ldr	r2, [r7, #28]
 80081f0:	e841 2300 	strex	r3, r2, [r1]
 80081f4:	617b      	str	r3, [r7, #20]
   return(result);
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e5      	bne.n	80081c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2220      	movs	r2, #32
 8008200:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e011      	b.n	8008234 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2220      	movs	r2, #32
 8008214:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2220      	movs	r2, #32
 800821a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3758      	adds	r7, #88	@ 0x58
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	4613      	mov	r3, r2
 800824a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800824c:	e04f      	b.n	80082ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008254:	d04b      	beq.n	80082ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008256:	f7fa fced 	bl	8002c34 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	429a      	cmp	r2, r3
 8008264:	d302      	bcc.n	800826c <UART_WaitOnFlagUntilTimeout+0x30>
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e04e      	b.n	800830e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0304 	and.w	r3, r3, #4
 800827a:	2b00      	cmp	r3, #0
 800827c:	d037      	beq.n	80082ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b80      	cmp	r3, #128	@ 0x80
 8008282:	d034      	beq.n	80082ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b40      	cmp	r3, #64	@ 0x40
 8008288:	d031      	beq.n	80082ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	f003 0308 	and.w	r3, r3, #8
 8008294:	2b08      	cmp	r3, #8
 8008296:	d110      	bne.n	80082ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2208      	movs	r2, #8
 800829e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 f838 	bl	8008316 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2208      	movs	r2, #8
 80082aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e029      	b.n	800830e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082c8:	d111      	bne.n	80082ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 f81e 	bl	8008316 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2220      	movs	r2, #32
 80082de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e00f      	b.n	800830e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69da      	ldr	r2, [r3, #28]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	4013      	ands	r3, r2
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	bf0c      	ite	eq
 80082fe:	2301      	moveq	r3, #1
 8008300:	2300      	movne	r3, #0
 8008302:	b2db      	uxtb	r3, r3
 8008304:	461a      	mov	r2, r3
 8008306:	79fb      	ldrb	r3, [r7, #7]
 8008308:	429a      	cmp	r2, r3
 800830a:	d0a0      	beq.n	800824e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008316:	b480      	push	{r7}
 8008318:	b095      	sub	sp, #84	@ 0x54
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008326:	e853 3f00 	ldrex	r3, [r3]
 800832a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800832c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008332:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800833c:	643b      	str	r3, [r7, #64]	@ 0x40
 800833e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008340:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008342:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008344:	e841 2300 	strex	r3, r2, [r1]
 8008348:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800834a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1e6      	bne.n	800831e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3308      	adds	r3, #8
 8008356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	e853 3f00 	ldrex	r3, [r3]
 800835e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	f023 0301 	bic.w	r3, r3, #1
 8008366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3308      	adds	r3, #8
 800836e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008370:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008372:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008374:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008378:	e841 2300 	strex	r3, r2, [r1]
 800837c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800837e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1e5      	bne.n	8008350 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008388:	2b01      	cmp	r3, #1
 800838a:	d118      	bne.n	80083be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	60bb      	str	r3, [r7, #8]
   return(result);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f023 0310 	bic.w	r3, r3, #16
 80083a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083aa:	61bb      	str	r3, [r7, #24]
 80083ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	6979      	ldr	r1, [r7, #20]
 80083b0:	69ba      	ldr	r2, [r7, #24]
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	613b      	str	r3, [r7, #16]
   return(result);
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e6      	bne.n	800838c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2220      	movs	r2, #32
 80083c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80083d2:	bf00      	nop
 80083d4:	3754      	adds	r7, #84	@ 0x54
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f7ff fb91 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008402:	bf00      	nop
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b088      	sub	sp, #32
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008426:	61fb      	str	r3, [r7, #28]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	61bb      	str	r3, [r7, #24]
 8008432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6979      	ldr	r1, [r7, #20]
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	613b      	str	r3, [r7, #16]
   return(result);
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e6      	bne.n	8008412 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2220      	movs	r2, #32
 8008448:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7ff fb5d 	bl	8007b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008456:	bf00      	nop
 8008458:	3720      	adds	r7, #32
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008466:	bf00      	nop
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <__cvt>:
 8008472:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008476:	ec57 6b10 	vmov	r6, r7, d0
 800847a:	2f00      	cmp	r7, #0
 800847c:	460c      	mov	r4, r1
 800847e:	4619      	mov	r1, r3
 8008480:	463b      	mov	r3, r7
 8008482:	bfbb      	ittet	lt
 8008484:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008488:	461f      	movlt	r7, r3
 800848a:	2300      	movge	r3, #0
 800848c:	232d      	movlt	r3, #45	@ 0x2d
 800848e:	700b      	strb	r3, [r1, #0]
 8008490:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008492:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008496:	4691      	mov	r9, r2
 8008498:	f023 0820 	bic.w	r8, r3, #32
 800849c:	bfbc      	itt	lt
 800849e:	4632      	movlt	r2, r6
 80084a0:	4616      	movlt	r6, r2
 80084a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80084a6:	d005      	beq.n	80084b4 <__cvt+0x42>
 80084a8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80084ac:	d100      	bne.n	80084b0 <__cvt+0x3e>
 80084ae:	3401      	adds	r4, #1
 80084b0:	2102      	movs	r1, #2
 80084b2:	e000      	b.n	80084b6 <__cvt+0x44>
 80084b4:	2103      	movs	r1, #3
 80084b6:	ab03      	add	r3, sp, #12
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	ab02      	add	r3, sp, #8
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	ec47 6b10 	vmov	d0, r6, r7
 80084c2:	4653      	mov	r3, sl
 80084c4:	4622      	mov	r2, r4
 80084c6:	f000 fe5b 	bl	8009180 <_dtoa_r>
 80084ca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80084ce:	4605      	mov	r5, r0
 80084d0:	d119      	bne.n	8008506 <__cvt+0x94>
 80084d2:	f019 0f01 	tst.w	r9, #1
 80084d6:	d00e      	beq.n	80084f6 <__cvt+0x84>
 80084d8:	eb00 0904 	add.w	r9, r0, r4
 80084dc:	2200      	movs	r2, #0
 80084de:	2300      	movs	r3, #0
 80084e0:	4630      	mov	r0, r6
 80084e2:	4639      	mov	r1, r7
 80084e4:	f7f8 faf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80084e8:	b108      	cbz	r0, 80084ee <__cvt+0x7c>
 80084ea:	f8cd 900c 	str.w	r9, [sp, #12]
 80084ee:	2230      	movs	r2, #48	@ 0x30
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	454b      	cmp	r3, r9
 80084f4:	d31e      	bcc.n	8008534 <__cvt+0xc2>
 80084f6:	9b03      	ldr	r3, [sp, #12]
 80084f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084fa:	1b5b      	subs	r3, r3, r5
 80084fc:	4628      	mov	r0, r5
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	b004      	add	sp, #16
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800850a:	eb00 0904 	add.w	r9, r0, r4
 800850e:	d1e5      	bne.n	80084dc <__cvt+0x6a>
 8008510:	7803      	ldrb	r3, [r0, #0]
 8008512:	2b30      	cmp	r3, #48	@ 0x30
 8008514:	d10a      	bne.n	800852c <__cvt+0xba>
 8008516:	2200      	movs	r2, #0
 8008518:	2300      	movs	r3, #0
 800851a:	4630      	mov	r0, r6
 800851c:	4639      	mov	r1, r7
 800851e:	f7f8 fad3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008522:	b918      	cbnz	r0, 800852c <__cvt+0xba>
 8008524:	f1c4 0401 	rsb	r4, r4, #1
 8008528:	f8ca 4000 	str.w	r4, [sl]
 800852c:	f8da 3000 	ldr.w	r3, [sl]
 8008530:	4499      	add	r9, r3
 8008532:	e7d3      	b.n	80084dc <__cvt+0x6a>
 8008534:	1c59      	adds	r1, r3, #1
 8008536:	9103      	str	r1, [sp, #12]
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	e7d9      	b.n	80084f0 <__cvt+0x7e>

0800853c <__exponent>:
 800853c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800853e:	2900      	cmp	r1, #0
 8008540:	bfba      	itte	lt
 8008542:	4249      	neglt	r1, r1
 8008544:	232d      	movlt	r3, #45	@ 0x2d
 8008546:	232b      	movge	r3, #43	@ 0x2b
 8008548:	2909      	cmp	r1, #9
 800854a:	7002      	strb	r2, [r0, #0]
 800854c:	7043      	strb	r3, [r0, #1]
 800854e:	dd29      	ble.n	80085a4 <__exponent+0x68>
 8008550:	f10d 0307 	add.w	r3, sp, #7
 8008554:	461d      	mov	r5, r3
 8008556:	270a      	movs	r7, #10
 8008558:	461a      	mov	r2, r3
 800855a:	fbb1 f6f7 	udiv	r6, r1, r7
 800855e:	fb07 1416 	mls	r4, r7, r6, r1
 8008562:	3430      	adds	r4, #48	@ 0x30
 8008564:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008568:	460c      	mov	r4, r1
 800856a:	2c63      	cmp	r4, #99	@ 0x63
 800856c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008570:	4631      	mov	r1, r6
 8008572:	dcf1      	bgt.n	8008558 <__exponent+0x1c>
 8008574:	3130      	adds	r1, #48	@ 0x30
 8008576:	1e94      	subs	r4, r2, #2
 8008578:	f803 1c01 	strb.w	r1, [r3, #-1]
 800857c:	1c41      	adds	r1, r0, #1
 800857e:	4623      	mov	r3, r4
 8008580:	42ab      	cmp	r3, r5
 8008582:	d30a      	bcc.n	800859a <__exponent+0x5e>
 8008584:	f10d 0309 	add.w	r3, sp, #9
 8008588:	1a9b      	subs	r3, r3, r2
 800858a:	42ac      	cmp	r4, r5
 800858c:	bf88      	it	hi
 800858e:	2300      	movhi	r3, #0
 8008590:	3302      	adds	r3, #2
 8008592:	4403      	add	r3, r0
 8008594:	1a18      	subs	r0, r3, r0
 8008596:	b003      	add	sp, #12
 8008598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800859a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800859e:	f801 6f01 	strb.w	r6, [r1, #1]!
 80085a2:	e7ed      	b.n	8008580 <__exponent+0x44>
 80085a4:	2330      	movs	r3, #48	@ 0x30
 80085a6:	3130      	adds	r1, #48	@ 0x30
 80085a8:	7083      	strb	r3, [r0, #2]
 80085aa:	70c1      	strb	r1, [r0, #3]
 80085ac:	1d03      	adds	r3, r0, #4
 80085ae:	e7f1      	b.n	8008594 <__exponent+0x58>

080085b0 <_printf_float>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	b08d      	sub	sp, #52	@ 0x34
 80085b6:	460c      	mov	r4, r1
 80085b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80085bc:	4616      	mov	r6, r2
 80085be:	461f      	mov	r7, r3
 80085c0:	4605      	mov	r5, r0
 80085c2:	f000 fcdb 	bl	8008f7c <_localeconv_r>
 80085c6:	6803      	ldr	r3, [r0, #0]
 80085c8:	9304      	str	r3, [sp, #16]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7f7 fe50 	bl	8000270 <strlen>
 80085d0:	2300      	movs	r3, #0
 80085d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80085d4:	f8d8 3000 	ldr.w	r3, [r8]
 80085d8:	9005      	str	r0, [sp, #20]
 80085da:	3307      	adds	r3, #7
 80085dc:	f023 0307 	bic.w	r3, r3, #7
 80085e0:	f103 0208 	add.w	r2, r3, #8
 80085e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80085e8:	f8d4 b000 	ldr.w	fp, [r4]
 80085ec:	f8c8 2000 	str.w	r2, [r8]
 80085f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80085f8:	9307      	str	r3, [sp, #28]
 80085fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80085fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008606:	4b9c      	ldr	r3, [pc, #624]	@ (8008878 <_printf_float+0x2c8>)
 8008608:	f04f 32ff 	mov.w	r2, #4294967295
 800860c:	f7f8 fa8e 	bl	8000b2c <__aeabi_dcmpun>
 8008610:	bb70      	cbnz	r0, 8008670 <_printf_float+0xc0>
 8008612:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008616:	4b98      	ldr	r3, [pc, #608]	@ (8008878 <_printf_float+0x2c8>)
 8008618:	f04f 32ff 	mov.w	r2, #4294967295
 800861c:	f7f8 fa68 	bl	8000af0 <__aeabi_dcmple>
 8008620:	bb30      	cbnz	r0, 8008670 <_printf_float+0xc0>
 8008622:	2200      	movs	r2, #0
 8008624:	2300      	movs	r3, #0
 8008626:	4640      	mov	r0, r8
 8008628:	4649      	mov	r1, r9
 800862a:	f7f8 fa57 	bl	8000adc <__aeabi_dcmplt>
 800862e:	b110      	cbz	r0, 8008636 <_printf_float+0x86>
 8008630:	232d      	movs	r3, #45	@ 0x2d
 8008632:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008636:	4a91      	ldr	r2, [pc, #580]	@ (800887c <_printf_float+0x2cc>)
 8008638:	4b91      	ldr	r3, [pc, #580]	@ (8008880 <_printf_float+0x2d0>)
 800863a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800863e:	bf8c      	ite	hi
 8008640:	4690      	movhi	r8, r2
 8008642:	4698      	movls	r8, r3
 8008644:	2303      	movs	r3, #3
 8008646:	6123      	str	r3, [r4, #16]
 8008648:	f02b 0304 	bic.w	r3, fp, #4
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	f04f 0900 	mov.w	r9, #0
 8008652:	9700      	str	r7, [sp, #0]
 8008654:	4633      	mov	r3, r6
 8008656:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008658:	4621      	mov	r1, r4
 800865a:	4628      	mov	r0, r5
 800865c:	f000 f9d2 	bl	8008a04 <_printf_common>
 8008660:	3001      	adds	r0, #1
 8008662:	f040 808d 	bne.w	8008780 <_printf_float+0x1d0>
 8008666:	f04f 30ff 	mov.w	r0, #4294967295
 800866a:	b00d      	add	sp, #52	@ 0x34
 800866c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008670:	4642      	mov	r2, r8
 8008672:	464b      	mov	r3, r9
 8008674:	4640      	mov	r0, r8
 8008676:	4649      	mov	r1, r9
 8008678:	f7f8 fa58 	bl	8000b2c <__aeabi_dcmpun>
 800867c:	b140      	cbz	r0, 8008690 <_printf_float+0xe0>
 800867e:	464b      	mov	r3, r9
 8008680:	2b00      	cmp	r3, #0
 8008682:	bfbc      	itt	lt
 8008684:	232d      	movlt	r3, #45	@ 0x2d
 8008686:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800868a:	4a7e      	ldr	r2, [pc, #504]	@ (8008884 <_printf_float+0x2d4>)
 800868c:	4b7e      	ldr	r3, [pc, #504]	@ (8008888 <_printf_float+0x2d8>)
 800868e:	e7d4      	b.n	800863a <_printf_float+0x8a>
 8008690:	6863      	ldr	r3, [r4, #4]
 8008692:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008696:	9206      	str	r2, [sp, #24]
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	d13b      	bne.n	8008714 <_printf_float+0x164>
 800869c:	2306      	movs	r3, #6
 800869e:	6063      	str	r3, [r4, #4]
 80086a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80086a4:	2300      	movs	r3, #0
 80086a6:	6022      	str	r2, [r4, #0]
 80086a8:	9303      	str	r3, [sp, #12]
 80086aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80086ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80086b0:	ab09      	add	r3, sp, #36	@ 0x24
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	6861      	ldr	r1, [r4, #4]
 80086b6:	ec49 8b10 	vmov	d0, r8, r9
 80086ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80086be:	4628      	mov	r0, r5
 80086c0:	f7ff fed7 	bl	8008472 <__cvt>
 80086c4:	9b06      	ldr	r3, [sp, #24]
 80086c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086c8:	2b47      	cmp	r3, #71	@ 0x47
 80086ca:	4680      	mov	r8, r0
 80086cc:	d129      	bne.n	8008722 <_printf_float+0x172>
 80086ce:	1cc8      	adds	r0, r1, #3
 80086d0:	db02      	blt.n	80086d8 <_printf_float+0x128>
 80086d2:	6863      	ldr	r3, [r4, #4]
 80086d4:	4299      	cmp	r1, r3
 80086d6:	dd41      	ble.n	800875c <_printf_float+0x1ac>
 80086d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80086dc:	fa5f fa8a 	uxtb.w	sl, sl
 80086e0:	3901      	subs	r1, #1
 80086e2:	4652      	mov	r2, sl
 80086e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80086e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80086ea:	f7ff ff27 	bl	800853c <__exponent>
 80086ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086f0:	1813      	adds	r3, r2, r0
 80086f2:	2a01      	cmp	r2, #1
 80086f4:	4681      	mov	r9, r0
 80086f6:	6123      	str	r3, [r4, #16]
 80086f8:	dc02      	bgt.n	8008700 <_printf_float+0x150>
 80086fa:	6822      	ldr	r2, [r4, #0]
 80086fc:	07d2      	lsls	r2, r2, #31
 80086fe:	d501      	bpl.n	8008704 <_printf_float+0x154>
 8008700:	3301      	adds	r3, #1
 8008702:	6123      	str	r3, [r4, #16]
 8008704:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008708:	2b00      	cmp	r3, #0
 800870a:	d0a2      	beq.n	8008652 <_printf_float+0xa2>
 800870c:	232d      	movs	r3, #45	@ 0x2d
 800870e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008712:	e79e      	b.n	8008652 <_printf_float+0xa2>
 8008714:	9a06      	ldr	r2, [sp, #24]
 8008716:	2a47      	cmp	r2, #71	@ 0x47
 8008718:	d1c2      	bne.n	80086a0 <_printf_float+0xf0>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1c0      	bne.n	80086a0 <_printf_float+0xf0>
 800871e:	2301      	movs	r3, #1
 8008720:	e7bd      	b.n	800869e <_printf_float+0xee>
 8008722:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008726:	d9db      	bls.n	80086e0 <_printf_float+0x130>
 8008728:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800872c:	d118      	bne.n	8008760 <_printf_float+0x1b0>
 800872e:	2900      	cmp	r1, #0
 8008730:	6863      	ldr	r3, [r4, #4]
 8008732:	dd0b      	ble.n	800874c <_printf_float+0x19c>
 8008734:	6121      	str	r1, [r4, #16]
 8008736:	b913      	cbnz	r3, 800873e <_printf_float+0x18e>
 8008738:	6822      	ldr	r2, [r4, #0]
 800873a:	07d0      	lsls	r0, r2, #31
 800873c:	d502      	bpl.n	8008744 <_printf_float+0x194>
 800873e:	3301      	adds	r3, #1
 8008740:	440b      	add	r3, r1
 8008742:	6123      	str	r3, [r4, #16]
 8008744:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008746:	f04f 0900 	mov.w	r9, #0
 800874a:	e7db      	b.n	8008704 <_printf_float+0x154>
 800874c:	b913      	cbnz	r3, 8008754 <_printf_float+0x1a4>
 800874e:	6822      	ldr	r2, [r4, #0]
 8008750:	07d2      	lsls	r2, r2, #31
 8008752:	d501      	bpl.n	8008758 <_printf_float+0x1a8>
 8008754:	3302      	adds	r3, #2
 8008756:	e7f4      	b.n	8008742 <_printf_float+0x192>
 8008758:	2301      	movs	r3, #1
 800875a:	e7f2      	b.n	8008742 <_printf_float+0x192>
 800875c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008762:	4299      	cmp	r1, r3
 8008764:	db05      	blt.n	8008772 <_printf_float+0x1c2>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	6121      	str	r1, [r4, #16]
 800876a:	07d8      	lsls	r0, r3, #31
 800876c:	d5ea      	bpl.n	8008744 <_printf_float+0x194>
 800876e:	1c4b      	adds	r3, r1, #1
 8008770:	e7e7      	b.n	8008742 <_printf_float+0x192>
 8008772:	2900      	cmp	r1, #0
 8008774:	bfd4      	ite	le
 8008776:	f1c1 0202 	rsble	r2, r1, #2
 800877a:	2201      	movgt	r2, #1
 800877c:	4413      	add	r3, r2
 800877e:	e7e0      	b.n	8008742 <_printf_float+0x192>
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	055a      	lsls	r2, r3, #21
 8008784:	d407      	bmi.n	8008796 <_printf_float+0x1e6>
 8008786:	6923      	ldr	r3, [r4, #16]
 8008788:	4642      	mov	r2, r8
 800878a:	4631      	mov	r1, r6
 800878c:	4628      	mov	r0, r5
 800878e:	47b8      	blx	r7
 8008790:	3001      	adds	r0, #1
 8008792:	d12b      	bne.n	80087ec <_printf_float+0x23c>
 8008794:	e767      	b.n	8008666 <_printf_float+0xb6>
 8008796:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800879a:	f240 80dd 	bls.w	8008958 <_printf_float+0x3a8>
 800879e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80087a2:	2200      	movs	r2, #0
 80087a4:	2300      	movs	r3, #0
 80087a6:	f7f8 f98f 	bl	8000ac8 <__aeabi_dcmpeq>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d033      	beq.n	8008816 <_printf_float+0x266>
 80087ae:	4a37      	ldr	r2, [pc, #220]	@ (800888c <_printf_float+0x2dc>)
 80087b0:	2301      	movs	r3, #1
 80087b2:	4631      	mov	r1, r6
 80087b4:	4628      	mov	r0, r5
 80087b6:	47b8      	blx	r7
 80087b8:	3001      	adds	r0, #1
 80087ba:	f43f af54 	beq.w	8008666 <_printf_float+0xb6>
 80087be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80087c2:	4543      	cmp	r3, r8
 80087c4:	db02      	blt.n	80087cc <_printf_float+0x21c>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	07d8      	lsls	r0, r3, #31
 80087ca:	d50f      	bpl.n	80087ec <_printf_float+0x23c>
 80087cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087d0:	4631      	mov	r1, r6
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	f43f af45 	beq.w	8008666 <_printf_float+0xb6>
 80087dc:	f04f 0900 	mov.w	r9, #0
 80087e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80087e4:	f104 0a1a 	add.w	sl, r4, #26
 80087e8:	45c8      	cmp	r8, r9
 80087ea:	dc09      	bgt.n	8008800 <_printf_float+0x250>
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	079b      	lsls	r3, r3, #30
 80087f0:	f100 8103 	bmi.w	80089fa <_printf_float+0x44a>
 80087f4:	68e0      	ldr	r0, [r4, #12]
 80087f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087f8:	4298      	cmp	r0, r3
 80087fa:	bfb8      	it	lt
 80087fc:	4618      	movlt	r0, r3
 80087fe:	e734      	b.n	800866a <_printf_float+0xba>
 8008800:	2301      	movs	r3, #1
 8008802:	4652      	mov	r2, sl
 8008804:	4631      	mov	r1, r6
 8008806:	4628      	mov	r0, r5
 8008808:	47b8      	blx	r7
 800880a:	3001      	adds	r0, #1
 800880c:	f43f af2b 	beq.w	8008666 <_printf_float+0xb6>
 8008810:	f109 0901 	add.w	r9, r9, #1
 8008814:	e7e8      	b.n	80087e8 <_printf_float+0x238>
 8008816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008818:	2b00      	cmp	r3, #0
 800881a:	dc39      	bgt.n	8008890 <_printf_float+0x2e0>
 800881c:	4a1b      	ldr	r2, [pc, #108]	@ (800888c <_printf_float+0x2dc>)
 800881e:	2301      	movs	r3, #1
 8008820:	4631      	mov	r1, r6
 8008822:	4628      	mov	r0, r5
 8008824:	47b8      	blx	r7
 8008826:	3001      	adds	r0, #1
 8008828:	f43f af1d 	beq.w	8008666 <_printf_float+0xb6>
 800882c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008830:	ea59 0303 	orrs.w	r3, r9, r3
 8008834:	d102      	bne.n	800883c <_printf_float+0x28c>
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	07d9      	lsls	r1, r3, #31
 800883a:	d5d7      	bpl.n	80087ec <_printf_float+0x23c>
 800883c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008840:	4631      	mov	r1, r6
 8008842:	4628      	mov	r0, r5
 8008844:	47b8      	blx	r7
 8008846:	3001      	adds	r0, #1
 8008848:	f43f af0d 	beq.w	8008666 <_printf_float+0xb6>
 800884c:	f04f 0a00 	mov.w	sl, #0
 8008850:	f104 0b1a 	add.w	fp, r4, #26
 8008854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008856:	425b      	negs	r3, r3
 8008858:	4553      	cmp	r3, sl
 800885a:	dc01      	bgt.n	8008860 <_printf_float+0x2b0>
 800885c:	464b      	mov	r3, r9
 800885e:	e793      	b.n	8008788 <_printf_float+0x1d8>
 8008860:	2301      	movs	r3, #1
 8008862:	465a      	mov	r2, fp
 8008864:	4631      	mov	r1, r6
 8008866:	4628      	mov	r0, r5
 8008868:	47b8      	blx	r7
 800886a:	3001      	adds	r0, #1
 800886c:	f43f aefb 	beq.w	8008666 <_printf_float+0xb6>
 8008870:	f10a 0a01 	add.w	sl, sl, #1
 8008874:	e7ee      	b.n	8008854 <_printf_float+0x2a4>
 8008876:	bf00      	nop
 8008878:	7fefffff 	.word	0x7fefffff
 800887c:	0800c28c 	.word	0x0800c28c
 8008880:	0800c288 	.word	0x0800c288
 8008884:	0800c294 	.word	0x0800c294
 8008888:	0800c290 	.word	0x0800c290
 800888c:	0800c298 	.word	0x0800c298
 8008890:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008892:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008896:	4553      	cmp	r3, sl
 8008898:	bfa8      	it	ge
 800889a:	4653      	movge	r3, sl
 800889c:	2b00      	cmp	r3, #0
 800889e:	4699      	mov	r9, r3
 80088a0:	dc36      	bgt.n	8008910 <_printf_float+0x360>
 80088a2:	f04f 0b00 	mov.w	fp, #0
 80088a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088aa:	f104 021a 	add.w	r2, r4, #26
 80088ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80088b0:	9306      	str	r3, [sp, #24]
 80088b2:	eba3 0309 	sub.w	r3, r3, r9
 80088b6:	455b      	cmp	r3, fp
 80088b8:	dc31      	bgt.n	800891e <_printf_float+0x36e>
 80088ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088bc:	459a      	cmp	sl, r3
 80088be:	dc3a      	bgt.n	8008936 <_printf_float+0x386>
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	07da      	lsls	r2, r3, #31
 80088c4:	d437      	bmi.n	8008936 <_printf_float+0x386>
 80088c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088c8:	ebaa 0903 	sub.w	r9, sl, r3
 80088cc:	9b06      	ldr	r3, [sp, #24]
 80088ce:	ebaa 0303 	sub.w	r3, sl, r3
 80088d2:	4599      	cmp	r9, r3
 80088d4:	bfa8      	it	ge
 80088d6:	4699      	movge	r9, r3
 80088d8:	f1b9 0f00 	cmp.w	r9, #0
 80088dc:	dc33      	bgt.n	8008946 <_printf_float+0x396>
 80088de:	f04f 0800 	mov.w	r8, #0
 80088e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088e6:	f104 0b1a 	add.w	fp, r4, #26
 80088ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ec:	ebaa 0303 	sub.w	r3, sl, r3
 80088f0:	eba3 0309 	sub.w	r3, r3, r9
 80088f4:	4543      	cmp	r3, r8
 80088f6:	f77f af79 	ble.w	80087ec <_printf_float+0x23c>
 80088fa:	2301      	movs	r3, #1
 80088fc:	465a      	mov	r2, fp
 80088fe:	4631      	mov	r1, r6
 8008900:	4628      	mov	r0, r5
 8008902:	47b8      	blx	r7
 8008904:	3001      	adds	r0, #1
 8008906:	f43f aeae 	beq.w	8008666 <_printf_float+0xb6>
 800890a:	f108 0801 	add.w	r8, r8, #1
 800890e:	e7ec      	b.n	80088ea <_printf_float+0x33a>
 8008910:	4642      	mov	r2, r8
 8008912:	4631      	mov	r1, r6
 8008914:	4628      	mov	r0, r5
 8008916:	47b8      	blx	r7
 8008918:	3001      	adds	r0, #1
 800891a:	d1c2      	bne.n	80088a2 <_printf_float+0x2f2>
 800891c:	e6a3      	b.n	8008666 <_printf_float+0xb6>
 800891e:	2301      	movs	r3, #1
 8008920:	4631      	mov	r1, r6
 8008922:	4628      	mov	r0, r5
 8008924:	9206      	str	r2, [sp, #24]
 8008926:	47b8      	blx	r7
 8008928:	3001      	adds	r0, #1
 800892a:	f43f ae9c 	beq.w	8008666 <_printf_float+0xb6>
 800892e:	9a06      	ldr	r2, [sp, #24]
 8008930:	f10b 0b01 	add.w	fp, fp, #1
 8008934:	e7bb      	b.n	80088ae <_printf_float+0x2fe>
 8008936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800893a:	4631      	mov	r1, r6
 800893c:	4628      	mov	r0, r5
 800893e:	47b8      	blx	r7
 8008940:	3001      	adds	r0, #1
 8008942:	d1c0      	bne.n	80088c6 <_printf_float+0x316>
 8008944:	e68f      	b.n	8008666 <_printf_float+0xb6>
 8008946:	9a06      	ldr	r2, [sp, #24]
 8008948:	464b      	mov	r3, r9
 800894a:	4442      	add	r2, r8
 800894c:	4631      	mov	r1, r6
 800894e:	4628      	mov	r0, r5
 8008950:	47b8      	blx	r7
 8008952:	3001      	adds	r0, #1
 8008954:	d1c3      	bne.n	80088de <_printf_float+0x32e>
 8008956:	e686      	b.n	8008666 <_printf_float+0xb6>
 8008958:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800895c:	f1ba 0f01 	cmp.w	sl, #1
 8008960:	dc01      	bgt.n	8008966 <_printf_float+0x3b6>
 8008962:	07db      	lsls	r3, r3, #31
 8008964:	d536      	bpl.n	80089d4 <_printf_float+0x424>
 8008966:	2301      	movs	r3, #1
 8008968:	4642      	mov	r2, r8
 800896a:	4631      	mov	r1, r6
 800896c:	4628      	mov	r0, r5
 800896e:	47b8      	blx	r7
 8008970:	3001      	adds	r0, #1
 8008972:	f43f ae78 	beq.w	8008666 <_printf_float+0xb6>
 8008976:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800897a:	4631      	mov	r1, r6
 800897c:	4628      	mov	r0, r5
 800897e:	47b8      	blx	r7
 8008980:	3001      	adds	r0, #1
 8008982:	f43f ae70 	beq.w	8008666 <_printf_float+0xb6>
 8008986:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800898a:	2200      	movs	r2, #0
 800898c:	2300      	movs	r3, #0
 800898e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008992:	f7f8 f899 	bl	8000ac8 <__aeabi_dcmpeq>
 8008996:	b9c0      	cbnz	r0, 80089ca <_printf_float+0x41a>
 8008998:	4653      	mov	r3, sl
 800899a:	f108 0201 	add.w	r2, r8, #1
 800899e:	4631      	mov	r1, r6
 80089a0:	4628      	mov	r0, r5
 80089a2:	47b8      	blx	r7
 80089a4:	3001      	adds	r0, #1
 80089a6:	d10c      	bne.n	80089c2 <_printf_float+0x412>
 80089a8:	e65d      	b.n	8008666 <_printf_float+0xb6>
 80089aa:	2301      	movs	r3, #1
 80089ac:	465a      	mov	r2, fp
 80089ae:	4631      	mov	r1, r6
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b8      	blx	r7
 80089b4:	3001      	adds	r0, #1
 80089b6:	f43f ae56 	beq.w	8008666 <_printf_float+0xb6>
 80089ba:	f108 0801 	add.w	r8, r8, #1
 80089be:	45d0      	cmp	r8, sl
 80089c0:	dbf3      	blt.n	80089aa <_printf_float+0x3fa>
 80089c2:	464b      	mov	r3, r9
 80089c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80089c8:	e6df      	b.n	800878a <_printf_float+0x1da>
 80089ca:	f04f 0800 	mov.w	r8, #0
 80089ce:	f104 0b1a 	add.w	fp, r4, #26
 80089d2:	e7f4      	b.n	80089be <_printf_float+0x40e>
 80089d4:	2301      	movs	r3, #1
 80089d6:	4642      	mov	r2, r8
 80089d8:	e7e1      	b.n	800899e <_printf_float+0x3ee>
 80089da:	2301      	movs	r3, #1
 80089dc:	464a      	mov	r2, r9
 80089de:	4631      	mov	r1, r6
 80089e0:	4628      	mov	r0, r5
 80089e2:	47b8      	blx	r7
 80089e4:	3001      	adds	r0, #1
 80089e6:	f43f ae3e 	beq.w	8008666 <_printf_float+0xb6>
 80089ea:	f108 0801 	add.w	r8, r8, #1
 80089ee:	68e3      	ldr	r3, [r4, #12]
 80089f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089f2:	1a5b      	subs	r3, r3, r1
 80089f4:	4543      	cmp	r3, r8
 80089f6:	dcf0      	bgt.n	80089da <_printf_float+0x42a>
 80089f8:	e6fc      	b.n	80087f4 <_printf_float+0x244>
 80089fa:	f04f 0800 	mov.w	r8, #0
 80089fe:	f104 0919 	add.w	r9, r4, #25
 8008a02:	e7f4      	b.n	80089ee <_printf_float+0x43e>

08008a04 <_printf_common>:
 8008a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a08:	4616      	mov	r6, r2
 8008a0a:	4698      	mov	r8, r3
 8008a0c:	688a      	ldr	r2, [r1, #8]
 8008a0e:	690b      	ldr	r3, [r1, #16]
 8008a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a14:	4293      	cmp	r3, r2
 8008a16:	bfb8      	it	lt
 8008a18:	4613      	movlt	r3, r2
 8008a1a:	6033      	str	r3, [r6, #0]
 8008a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a20:	4607      	mov	r7, r0
 8008a22:	460c      	mov	r4, r1
 8008a24:	b10a      	cbz	r2, 8008a2a <_printf_common+0x26>
 8008a26:	3301      	adds	r3, #1
 8008a28:	6033      	str	r3, [r6, #0]
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	0699      	lsls	r1, r3, #26
 8008a2e:	bf42      	ittt	mi
 8008a30:	6833      	ldrmi	r3, [r6, #0]
 8008a32:	3302      	addmi	r3, #2
 8008a34:	6033      	strmi	r3, [r6, #0]
 8008a36:	6825      	ldr	r5, [r4, #0]
 8008a38:	f015 0506 	ands.w	r5, r5, #6
 8008a3c:	d106      	bne.n	8008a4c <_printf_common+0x48>
 8008a3e:	f104 0a19 	add.w	sl, r4, #25
 8008a42:	68e3      	ldr	r3, [r4, #12]
 8008a44:	6832      	ldr	r2, [r6, #0]
 8008a46:	1a9b      	subs	r3, r3, r2
 8008a48:	42ab      	cmp	r3, r5
 8008a4a:	dc26      	bgt.n	8008a9a <_printf_common+0x96>
 8008a4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a50:	6822      	ldr	r2, [r4, #0]
 8008a52:	3b00      	subs	r3, #0
 8008a54:	bf18      	it	ne
 8008a56:	2301      	movne	r3, #1
 8008a58:	0692      	lsls	r2, r2, #26
 8008a5a:	d42b      	bmi.n	8008ab4 <_printf_common+0xb0>
 8008a5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a60:	4641      	mov	r1, r8
 8008a62:	4638      	mov	r0, r7
 8008a64:	47c8      	blx	r9
 8008a66:	3001      	adds	r0, #1
 8008a68:	d01e      	beq.n	8008aa8 <_printf_common+0xa4>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	6922      	ldr	r2, [r4, #16]
 8008a6e:	f003 0306 	and.w	r3, r3, #6
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	bf02      	ittt	eq
 8008a76:	68e5      	ldreq	r5, [r4, #12]
 8008a78:	6833      	ldreq	r3, [r6, #0]
 8008a7a:	1aed      	subeq	r5, r5, r3
 8008a7c:	68a3      	ldr	r3, [r4, #8]
 8008a7e:	bf0c      	ite	eq
 8008a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a84:	2500      	movne	r5, #0
 8008a86:	4293      	cmp	r3, r2
 8008a88:	bfc4      	itt	gt
 8008a8a:	1a9b      	subgt	r3, r3, r2
 8008a8c:	18ed      	addgt	r5, r5, r3
 8008a8e:	2600      	movs	r6, #0
 8008a90:	341a      	adds	r4, #26
 8008a92:	42b5      	cmp	r5, r6
 8008a94:	d11a      	bne.n	8008acc <_printf_common+0xc8>
 8008a96:	2000      	movs	r0, #0
 8008a98:	e008      	b.n	8008aac <_printf_common+0xa8>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4652      	mov	r2, sl
 8008a9e:	4641      	mov	r1, r8
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	47c8      	blx	r9
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d103      	bne.n	8008ab0 <_printf_common+0xac>
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab0:	3501      	adds	r5, #1
 8008ab2:	e7c6      	b.n	8008a42 <_printf_common+0x3e>
 8008ab4:	18e1      	adds	r1, r4, r3
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	2030      	movs	r0, #48	@ 0x30
 8008aba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008abe:	4422      	add	r2, r4
 8008ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ac4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ac8:	3302      	adds	r3, #2
 8008aca:	e7c7      	b.n	8008a5c <_printf_common+0x58>
 8008acc:	2301      	movs	r3, #1
 8008ace:	4622      	mov	r2, r4
 8008ad0:	4641      	mov	r1, r8
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	47c8      	blx	r9
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	d0e6      	beq.n	8008aa8 <_printf_common+0xa4>
 8008ada:	3601      	adds	r6, #1
 8008adc:	e7d9      	b.n	8008a92 <_printf_common+0x8e>
	...

08008ae0 <_printf_i>:
 8008ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	7e0f      	ldrb	r7, [r1, #24]
 8008ae6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ae8:	2f78      	cmp	r7, #120	@ 0x78
 8008aea:	4691      	mov	r9, r2
 8008aec:	4680      	mov	r8, r0
 8008aee:	460c      	mov	r4, r1
 8008af0:	469a      	mov	sl, r3
 8008af2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008af6:	d807      	bhi.n	8008b08 <_printf_i+0x28>
 8008af8:	2f62      	cmp	r7, #98	@ 0x62
 8008afa:	d80a      	bhi.n	8008b12 <_printf_i+0x32>
 8008afc:	2f00      	cmp	r7, #0
 8008afe:	f000 80d1 	beq.w	8008ca4 <_printf_i+0x1c4>
 8008b02:	2f58      	cmp	r7, #88	@ 0x58
 8008b04:	f000 80b8 	beq.w	8008c78 <_printf_i+0x198>
 8008b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b10:	e03a      	b.n	8008b88 <_printf_i+0xa8>
 8008b12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b16:	2b15      	cmp	r3, #21
 8008b18:	d8f6      	bhi.n	8008b08 <_printf_i+0x28>
 8008b1a:	a101      	add	r1, pc, #4	@ (adr r1, 8008b20 <_printf_i+0x40>)
 8008b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b20:	08008b79 	.word	0x08008b79
 8008b24:	08008b8d 	.word	0x08008b8d
 8008b28:	08008b09 	.word	0x08008b09
 8008b2c:	08008b09 	.word	0x08008b09
 8008b30:	08008b09 	.word	0x08008b09
 8008b34:	08008b09 	.word	0x08008b09
 8008b38:	08008b8d 	.word	0x08008b8d
 8008b3c:	08008b09 	.word	0x08008b09
 8008b40:	08008b09 	.word	0x08008b09
 8008b44:	08008b09 	.word	0x08008b09
 8008b48:	08008b09 	.word	0x08008b09
 8008b4c:	08008c8b 	.word	0x08008c8b
 8008b50:	08008bb7 	.word	0x08008bb7
 8008b54:	08008c45 	.word	0x08008c45
 8008b58:	08008b09 	.word	0x08008b09
 8008b5c:	08008b09 	.word	0x08008b09
 8008b60:	08008cad 	.word	0x08008cad
 8008b64:	08008b09 	.word	0x08008b09
 8008b68:	08008bb7 	.word	0x08008bb7
 8008b6c:	08008b09 	.word	0x08008b09
 8008b70:	08008b09 	.word	0x08008b09
 8008b74:	08008c4d 	.word	0x08008c4d
 8008b78:	6833      	ldr	r3, [r6, #0]
 8008b7a:	1d1a      	adds	r2, r3, #4
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6032      	str	r2, [r6, #0]
 8008b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e09c      	b.n	8008cc6 <_printf_i+0x1e6>
 8008b8c:	6833      	ldr	r3, [r6, #0]
 8008b8e:	6820      	ldr	r0, [r4, #0]
 8008b90:	1d19      	adds	r1, r3, #4
 8008b92:	6031      	str	r1, [r6, #0]
 8008b94:	0606      	lsls	r6, r0, #24
 8008b96:	d501      	bpl.n	8008b9c <_printf_i+0xbc>
 8008b98:	681d      	ldr	r5, [r3, #0]
 8008b9a:	e003      	b.n	8008ba4 <_printf_i+0xc4>
 8008b9c:	0645      	lsls	r5, r0, #25
 8008b9e:	d5fb      	bpl.n	8008b98 <_printf_i+0xb8>
 8008ba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ba4:	2d00      	cmp	r5, #0
 8008ba6:	da03      	bge.n	8008bb0 <_printf_i+0xd0>
 8008ba8:	232d      	movs	r3, #45	@ 0x2d
 8008baa:	426d      	negs	r5, r5
 8008bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bb0:	4858      	ldr	r0, [pc, #352]	@ (8008d14 <_printf_i+0x234>)
 8008bb2:	230a      	movs	r3, #10
 8008bb4:	e011      	b.n	8008bda <_printf_i+0xfa>
 8008bb6:	6821      	ldr	r1, [r4, #0]
 8008bb8:	6833      	ldr	r3, [r6, #0]
 8008bba:	0608      	lsls	r0, r1, #24
 8008bbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bc0:	d402      	bmi.n	8008bc8 <_printf_i+0xe8>
 8008bc2:	0649      	lsls	r1, r1, #25
 8008bc4:	bf48      	it	mi
 8008bc6:	b2ad      	uxthmi	r5, r5
 8008bc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bca:	4852      	ldr	r0, [pc, #328]	@ (8008d14 <_printf_i+0x234>)
 8008bcc:	6033      	str	r3, [r6, #0]
 8008bce:	bf14      	ite	ne
 8008bd0:	230a      	movne	r3, #10
 8008bd2:	2308      	moveq	r3, #8
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bda:	6866      	ldr	r6, [r4, #4]
 8008bdc:	60a6      	str	r6, [r4, #8]
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	db05      	blt.n	8008bee <_printf_i+0x10e>
 8008be2:	6821      	ldr	r1, [r4, #0]
 8008be4:	432e      	orrs	r6, r5
 8008be6:	f021 0104 	bic.w	r1, r1, #4
 8008bea:	6021      	str	r1, [r4, #0]
 8008bec:	d04b      	beq.n	8008c86 <_printf_i+0x1a6>
 8008bee:	4616      	mov	r6, r2
 8008bf0:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bf4:	fb03 5711 	mls	r7, r3, r1, r5
 8008bf8:	5dc7      	ldrb	r7, [r0, r7]
 8008bfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bfe:	462f      	mov	r7, r5
 8008c00:	42bb      	cmp	r3, r7
 8008c02:	460d      	mov	r5, r1
 8008c04:	d9f4      	bls.n	8008bf0 <_printf_i+0x110>
 8008c06:	2b08      	cmp	r3, #8
 8008c08:	d10b      	bne.n	8008c22 <_printf_i+0x142>
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	07df      	lsls	r7, r3, #31
 8008c0e:	d508      	bpl.n	8008c22 <_printf_i+0x142>
 8008c10:	6923      	ldr	r3, [r4, #16]
 8008c12:	6861      	ldr	r1, [r4, #4]
 8008c14:	4299      	cmp	r1, r3
 8008c16:	bfde      	ittt	le
 8008c18:	2330      	movle	r3, #48	@ 0x30
 8008c1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c22:	1b92      	subs	r2, r2, r6
 8008c24:	6122      	str	r2, [r4, #16]
 8008c26:	f8cd a000 	str.w	sl, [sp]
 8008c2a:	464b      	mov	r3, r9
 8008c2c:	aa03      	add	r2, sp, #12
 8008c2e:	4621      	mov	r1, r4
 8008c30:	4640      	mov	r0, r8
 8008c32:	f7ff fee7 	bl	8008a04 <_printf_common>
 8008c36:	3001      	adds	r0, #1
 8008c38:	d14a      	bne.n	8008cd0 <_printf_i+0x1f0>
 8008c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3e:	b004      	add	sp, #16
 8008c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	f043 0320 	orr.w	r3, r3, #32
 8008c4a:	6023      	str	r3, [r4, #0]
 8008c4c:	4832      	ldr	r0, [pc, #200]	@ (8008d18 <_printf_i+0x238>)
 8008c4e:	2778      	movs	r7, #120	@ 0x78
 8008c50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	6831      	ldr	r1, [r6, #0]
 8008c58:	061f      	lsls	r7, r3, #24
 8008c5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c5e:	d402      	bmi.n	8008c66 <_printf_i+0x186>
 8008c60:	065f      	lsls	r7, r3, #25
 8008c62:	bf48      	it	mi
 8008c64:	b2ad      	uxthmi	r5, r5
 8008c66:	6031      	str	r1, [r6, #0]
 8008c68:	07d9      	lsls	r1, r3, #31
 8008c6a:	bf44      	itt	mi
 8008c6c:	f043 0320 	orrmi.w	r3, r3, #32
 8008c70:	6023      	strmi	r3, [r4, #0]
 8008c72:	b11d      	cbz	r5, 8008c7c <_printf_i+0x19c>
 8008c74:	2310      	movs	r3, #16
 8008c76:	e7ad      	b.n	8008bd4 <_printf_i+0xf4>
 8008c78:	4826      	ldr	r0, [pc, #152]	@ (8008d14 <_printf_i+0x234>)
 8008c7a:	e7e9      	b.n	8008c50 <_printf_i+0x170>
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	f023 0320 	bic.w	r3, r3, #32
 8008c82:	6023      	str	r3, [r4, #0]
 8008c84:	e7f6      	b.n	8008c74 <_printf_i+0x194>
 8008c86:	4616      	mov	r6, r2
 8008c88:	e7bd      	b.n	8008c06 <_printf_i+0x126>
 8008c8a:	6833      	ldr	r3, [r6, #0]
 8008c8c:	6825      	ldr	r5, [r4, #0]
 8008c8e:	6961      	ldr	r1, [r4, #20]
 8008c90:	1d18      	adds	r0, r3, #4
 8008c92:	6030      	str	r0, [r6, #0]
 8008c94:	062e      	lsls	r6, r5, #24
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	d501      	bpl.n	8008c9e <_printf_i+0x1be>
 8008c9a:	6019      	str	r1, [r3, #0]
 8008c9c:	e002      	b.n	8008ca4 <_printf_i+0x1c4>
 8008c9e:	0668      	lsls	r0, r5, #25
 8008ca0:	d5fb      	bpl.n	8008c9a <_printf_i+0x1ba>
 8008ca2:	8019      	strh	r1, [r3, #0]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	6123      	str	r3, [r4, #16]
 8008ca8:	4616      	mov	r6, r2
 8008caa:	e7bc      	b.n	8008c26 <_printf_i+0x146>
 8008cac:	6833      	ldr	r3, [r6, #0]
 8008cae:	1d1a      	adds	r2, r3, #4
 8008cb0:	6032      	str	r2, [r6, #0]
 8008cb2:	681e      	ldr	r6, [r3, #0]
 8008cb4:	6862      	ldr	r2, [r4, #4]
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f7f7 fa89 	bl	80001d0 <memchr>
 8008cbe:	b108      	cbz	r0, 8008cc4 <_printf_i+0x1e4>
 8008cc0:	1b80      	subs	r0, r0, r6
 8008cc2:	6060      	str	r0, [r4, #4]
 8008cc4:	6863      	ldr	r3, [r4, #4]
 8008cc6:	6123      	str	r3, [r4, #16]
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cce:	e7aa      	b.n	8008c26 <_printf_i+0x146>
 8008cd0:	6923      	ldr	r3, [r4, #16]
 8008cd2:	4632      	mov	r2, r6
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	47d0      	blx	sl
 8008cda:	3001      	adds	r0, #1
 8008cdc:	d0ad      	beq.n	8008c3a <_printf_i+0x15a>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	079b      	lsls	r3, r3, #30
 8008ce2:	d413      	bmi.n	8008d0c <_printf_i+0x22c>
 8008ce4:	68e0      	ldr	r0, [r4, #12]
 8008ce6:	9b03      	ldr	r3, [sp, #12]
 8008ce8:	4298      	cmp	r0, r3
 8008cea:	bfb8      	it	lt
 8008cec:	4618      	movlt	r0, r3
 8008cee:	e7a6      	b.n	8008c3e <_printf_i+0x15e>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	4632      	mov	r2, r6
 8008cf4:	4649      	mov	r1, r9
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	47d0      	blx	sl
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	d09d      	beq.n	8008c3a <_printf_i+0x15a>
 8008cfe:	3501      	adds	r5, #1
 8008d00:	68e3      	ldr	r3, [r4, #12]
 8008d02:	9903      	ldr	r1, [sp, #12]
 8008d04:	1a5b      	subs	r3, r3, r1
 8008d06:	42ab      	cmp	r3, r5
 8008d08:	dcf2      	bgt.n	8008cf0 <_printf_i+0x210>
 8008d0a:	e7eb      	b.n	8008ce4 <_printf_i+0x204>
 8008d0c:	2500      	movs	r5, #0
 8008d0e:	f104 0619 	add.w	r6, r4, #25
 8008d12:	e7f5      	b.n	8008d00 <_printf_i+0x220>
 8008d14:	0800c29a 	.word	0x0800c29a
 8008d18:	0800c2ab 	.word	0x0800c2ab

08008d1c <std>:
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	b510      	push	{r4, lr}
 8008d20:	4604      	mov	r4, r0
 8008d22:	e9c0 3300 	strd	r3, r3, [r0]
 8008d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d2a:	6083      	str	r3, [r0, #8]
 8008d2c:	8181      	strh	r1, [r0, #12]
 8008d2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d30:	81c2      	strh	r2, [r0, #14]
 8008d32:	6183      	str	r3, [r0, #24]
 8008d34:	4619      	mov	r1, r3
 8008d36:	2208      	movs	r2, #8
 8008d38:	305c      	adds	r0, #92	@ 0x5c
 8008d3a:	f000 f916 	bl	8008f6a <memset>
 8008d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d74 <std+0x58>)
 8008d40:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d42:	4b0d      	ldr	r3, [pc, #52]	@ (8008d78 <std+0x5c>)
 8008d44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d46:	4b0d      	ldr	r3, [pc, #52]	@ (8008d7c <std+0x60>)
 8008d48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d80 <std+0x64>)
 8008d4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d84 <std+0x68>)
 8008d50:	6224      	str	r4, [r4, #32]
 8008d52:	429c      	cmp	r4, r3
 8008d54:	d006      	beq.n	8008d64 <std+0x48>
 8008d56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d5a:	4294      	cmp	r4, r2
 8008d5c:	d002      	beq.n	8008d64 <std+0x48>
 8008d5e:	33d0      	adds	r3, #208	@ 0xd0
 8008d60:	429c      	cmp	r4, r3
 8008d62:	d105      	bne.n	8008d70 <std+0x54>
 8008d64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d6c:	f000 b97a 	b.w	8009064 <__retarget_lock_init_recursive>
 8008d70:	bd10      	pop	{r4, pc}
 8008d72:	bf00      	nop
 8008d74:	08008ee5 	.word	0x08008ee5
 8008d78:	08008f07 	.word	0x08008f07
 8008d7c:	08008f3f 	.word	0x08008f3f
 8008d80:	08008f63 	.word	0x08008f63
 8008d84:	2000a5f0 	.word	0x2000a5f0

08008d88 <stdio_exit_handler>:
 8008d88:	4a02      	ldr	r2, [pc, #8]	@ (8008d94 <stdio_exit_handler+0xc>)
 8008d8a:	4903      	ldr	r1, [pc, #12]	@ (8008d98 <stdio_exit_handler+0x10>)
 8008d8c:	4803      	ldr	r0, [pc, #12]	@ (8008d9c <stdio_exit_handler+0x14>)
 8008d8e:	f000 b869 	b.w	8008e64 <_fwalk_sglue>
 8008d92:	bf00      	nop
 8008d94:	200001f0 	.word	0x200001f0
 8008d98:	0800a9cd 	.word	0x0800a9cd
 8008d9c:	20000200 	.word	0x20000200

08008da0 <cleanup_stdio>:
 8008da0:	6841      	ldr	r1, [r0, #4]
 8008da2:	4b0c      	ldr	r3, [pc, #48]	@ (8008dd4 <cleanup_stdio+0x34>)
 8008da4:	4299      	cmp	r1, r3
 8008da6:	b510      	push	{r4, lr}
 8008da8:	4604      	mov	r4, r0
 8008daa:	d001      	beq.n	8008db0 <cleanup_stdio+0x10>
 8008dac:	f001 fe0e 	bl	800a9cc <_fflush_r>
 8008db0:	68a1      	ldr	r1, [r4, #8]
 8008db2:	4b09      	ldr	r3, [pc, #36]	@ (8008dd8 <cleanup_stdio+0x38>)
 8008db4:	4299      	cmp	r1, r3
 8008db6:	d002      	beq.n	8008dbe <cleanup_stdio+0x1e>
 8008db8:	4620      	mov	r0, r4
 8008dba:	f001 fe07 	bl	800a9cc <_fflush_r>
 8008dbe:	68e1      	ldr	r1, [r4, #12]
 8008dc0:	4b06      	ldr	r3, [pc, #24]	@ (8008ddc <cleanup_stdio+0x3c>)
 8008dc2:	4299      	cmp	r1, r3
 8008dc4:	d004      	beq.n	8008dd0 <cleanup_stdio+0x30>
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dcc:	f001 bdfe 	b.w	800a9cc <_fflush_r>
 8008dd0:	bd10      	pop	{r4, pc}
 8008dd2:	bf00      	nop
 8008dd4:	2000a5f0 	.word	0x2000a5f0
 8008dd8:	2000a658 	.word	0x2000a658
 8008ddc:	2000a6c0 	.word	0x2000a6c0

08008de0 <global_stdio_init.part.0>:
 8008de0:	b510      	push	{r4, lr}
 8008de2:	4b0b      	ldr	r3, [pc, #44]	@ (8008e10 <global_stdio_init.part.0+0x30>)
 8008de4:	4c0b      	ldr	r4, [pc, #44]	@ (8008e14 <global_stdio_init.part.0+0x34>)
 8008de6:	4a0c      	ldr	r2, [pc, #48]	@ (8008e18 <global_stdio_init.part.0+0x38>)
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	4620      	mov	r0, r4
 8008dec:	2200      	movs	r2, #0
 8008dee:	2104      	movs	r1, #4
 8008df0:	f7ff ff94 	bl	8008d1c <std>
 8008df4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008df8:	2201      	movs	r2, #1
 8008dfa:	2109      	movs	r1, #9
 8008dfc:	f7ff ff8e 	bl	8008d1c <std>
 8008e00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e04:	2202      	movs	r2, #2
 8008e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e0a:	2112      	movs	r1, #18
 8008e0c:	f7ff bf86 	b.w	8008d1c <std>
 8008e10:	2000a728 	.word	0x2000a728
 8008e14:	2000a5f0 	.word	0x2000a5f0
 8008e18:	08008d89 	.word	0x08008d89

08008e1c <__sfp_lock_acquire>:
 8008e1c:	4801      	ldr	r0, [pc, #4]	@ (8008e24 <__sfp_lock_acquire+0x8>)
 8008e1e:	f000 b922 	b.w	8009066 <__retarget_lock_acquire_recursive>
 8008e22:	bf00      	nop
 8008e24:	2000a731 	.word	0x2000a731

08008e28 <__sfp_lock_release>:
 8008e28:	4801      	ldr	r0, [pc, #4]	@ (8008e30 <__sfp_lock_release+0x8>)
 8008e2a:	f000 b91d 	b.w	8009068 <__retarget_lock_release_recursive>
 8008e2e:	bf00      	nop
 8008e30:	2000a731 	.word	0x2000a731

08008e34 <__sinit>:
 8008e34:	b510      	push	{r4, lr}
 8008e36:	4604      	mov	r4, r0
 8008e38:	f7ff fff0 	bl	8008e1c <__sfp_lock_acquire>
 8008e3c:	6a23      	ldr	r3, [r4, #32]
 8008e3e:	b11b      	cbz	r3, 8008e48 <__sinit+0x14>
 8008e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e44:	f7ff bff0 	b.w	8008e28 <__sfp_lock_release>
 8008e48:	4b04      	ldr	r3, [pc, #16]	@ (8008e5c <__sinit+0x28>)
 8008e4a:	6223      	str	r3, [r4, #32]
 8008e4c:	4b04      	ldr	r3, [pc, #16]	@ (8008e60 <__sinit+0x2c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1f5      	bne.n	8008e40 <__sinit+0xc>
 8008e54:	f7ff ffc4 	bl	8008de0 <global_stdio_init.part.0>
 8008e58:	e7f2      	b.n	8008e40 <__sinit+0xc>
 8008e5a:	bf00      	nop
 8008e5c:	08008da1 	.word	0x08008da1
 8008e60:	2000a728 	.word	0x2000a728

08008e64 <_fwalk_sglue>:
 8008e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e68:	4607      	mov	r7, r0
 8008e6a:	4688      	mov	r8, r1
 8008e6c:	4614      	mov	r4, r2
 8008e6e:	2600      	movs	r6, #0
 8008e70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e74:	f1b9 0901 	subs.w	r9, r9, #1
 8008e78:	d505      	bpl.n	8008e86 <_fwalk_sglue+0x22>
 8008e7a:	6824      	ldr	r4, [r4, #0]
 8008e7c:	2c00      	cmp	r4, #0
 8008e7e:	d1f7      	bne.n	8008e70 <_fwalk_sglue+0xc>
 8008e80:	4630      	mov	r0, r6
 8008e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e86:	89ab      	ldrh	r3, [r5, #12]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d907      	bls.n	8008e9c <_fwalk_sglue+0x38>
 8008e8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e90:	3301      	adds	r3, #1
 8008e92:	d003      	beq.n	8008e9c <_fwalk_sglue+0x38>
 8008e94:	4629      	mov	r1, r5
 8008e96:	4638      	mov	r0, r7
 8008e98:	47c0      	blx	r8
 8008e9a:	4306      	orrs	r6, r0
 8008e9c:	3568      	adds	r5, #104	@ 0x68
 8008e9e:	e7e9      	b.n	8008e74 <_fwalk_sglue+0x10>

08008ea0 <siprintf>:
 8008ea0:	b40e      	push	{r1, r2, r3}
 8008ea2:	b510      	push	{r4, lr}
 8008ea4:	b09d      	sub	sp, #116	@ 0x74
 8008ea6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008ea8:	9002      	str	r0, [sp, #8]
 8008eaa:	9006      	str	r0, [sp, #24]
 8008eac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008eb0:	480a      	ldr	r0, [pc, #40]	@ (8008edc <siprintf+0x3c>)
 8008eb2:	9107      	str	r1, [sp, #28]
 8008eb4:	9104      	str	r1, [sp, #16]
 8008eb6:	490a      	ldr	r1, [pc, #40]	@ (8008ee0 <siprintf+0x40>)
 8008eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ebc:	9105      	str	r1, [sp, #20]
 8008ebe:	2400      	movs	r4, #0
 8008ec0:	a902      	add	r1, sp, #8
 8008ec2:	6800      	ldr	r0, [r0, #0]
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008ec8:	f001 fc00 	bl	800a6cc <_svfiprintf_r>
 8008ecc:	9b02      	ldr	r3, [sp, #8]
 8008ece:	701c      	strb	r4, [r3, #0]
 8008ed0:	b01d      	add	sp, #116	@ 0x74
 8008ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed6:	b003      	add	sp, #12
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	200001fc 	.word	0x200001fc
 8008ee0:	ffff0208 	.word	0xffff0208

08008ee4 <__sread>:
 8008ee4:	b510      	push	{r4, lr}
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eec:	f000 f86c 	bl	8008fc8 <_read_r>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	bfab      	itete	ge
 8008ef4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ef8:	181b      	addge	r3, r3, r0
 8008efa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008efe:	bfac      	ite	ge
 8008f00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f02:	81a3      	strhlt	r3, [r4, #12]
 8008f04:	bd10      	pop	{r4, pc}

08008f06 <__swrite>:
 8008f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0a:	461f      	mov	r7, r3
 8008f0c:	898b      	ldrh	r3, [r1, #12]
 8008f0e:	05db      	lsls	r3, r3, #23
 8008f10:	4605      	mov	r5, r0
 8008f12:	460c      	mov	r4, r1
 8008f14:	4616      	mov	r6, r2
 8008f16:	d505      	bpl.n	8008f24 <__swrite+0x1e>
 8008f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f000 f840 	bl	8008fa4 <_lseek_r>
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f2e:	81a3      	strh	r3, [r4, #12]
 8008f30:	4632      	mov	r2, r6
 8008f32:	463b      	mov	r3, r7
 8008f34:	4628      	mov	r0, r5
 8008f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3a:	f000 b857 	b.w	8008fec <_write_r>

08008f3e <__sseek>:
 8008f3e:	b510      	push	{r4, lr}
 8008f40:	460c      	mov	r4, r1
 8008f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f46:	f000 f82d 	bl	8008fa4 <_lseek_r>
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	89a3      	ldrh	r3, [r4, #12]
 8008f4e:	bf15      	itete	ne
 8008f50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f5a:	81a3      	strheq	r3, [r4, #12]
 8008f5c:	bf18      	it	ne
 8008f5e:	81a3      	strhne	r3, [r4, #12]
 8008f60:	bd10      	pop	{r4, pc}

08008f62 <__sclose>:
 8008f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f66:	f000 b80d 	b.w	8008f84 <_close_r>

08008f6a <memset>:
 8008f6a:	4402      	add	r2, r0
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d100      	bne.n	8008f74 <memset+0xa>
 8008f72:	4770      	bx	lr
 8008f74:	f803 1b01 	strb.w	r1, [r3], #1
 8008f78:	e7f9      	b.n	8008f6e <memset+0x4>
	...

08008f7c <_localeconv_r>:
 8008f7c:	4800      	ldr	r0, [pc, #0]	@ (8008f80 <_localeconv_r+0x4>)
 8008f7e:	4770      	bx	lr
 8008f80:	2000033c 	.word	0x2000033c

08008f84 <_close_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4d06      	ldr	r5, [pc, #24]	@ (8008fa0 <_close_r+0x1c>)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	602b      	str	r3, [r5, #0]
 8008f90:	f7f9 faf8 	bl	8002584 <_close>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	d102      	bne.n	8008f9e <_close_r+0x1a>
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	b103      	cbz	r3, 8008f9e <_close_r+0x1a>
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	2000a72c 	.word	0x2000a72c

08008fa4 <_lseek_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	4d07      	ldr	r5, [pc, #28]	@ (8008fc4 <_lseek_r+0x20>)
 8008fa8:	4604      	mov	r4, r0
 8008faa:	4608      	mov	r0, r1
 8008fac:	4611      	mov	r1, r2
 8008fae:	2200      	movs	r2, #0
 8008fb0:	602a      	str	r2, [r5, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	f7f9 fb0d 	bl	80025d2 <_lseek>
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	d102      	bne.n	8008fc2 <_lseek_r+0x1e>
 8008fbc:	682b      	ldr	r3, [r5, #0]
 8008fbe:	b103      	cbz	r3, 8008fc2 <_lseek_r+0x1e>
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	bd38      	pop	{r3, r4, r5, pc}
 8008fc4:	2000a72c 	.word	0x2000a72c

08008fc8 <_read_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4d07      	ldr	r5, [pc, #28]	@ (8008fe8 <_read_r+0x20>)
 8008fcc:	4604      	mov	r4, r0
 8008fce:	4608      	mov	r0, r1
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	602a      	str	r2, [r5, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f7f9 fa9b 	bl	8002512 <_read>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d102      	bne.n	8008fe6 <_read_r+0x1e>
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	b103      	cbz	r3, 8008fe6 <_read_r+0x1e>
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	2000a72c 	.word	0x2000a72c

08008fec <_write_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	4d07      	ldr	r5, [pc, #28]	@ (800900c <_write_r+0x20>)
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	4608      	mov	r0, r1
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	602a      	str	r2, [r5, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f7f9 faa6 	bl	800254c <_write>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d102      	bne.n	800900a <_write_r+0x1e>
 8009004:	682b      	ldr	r3, [r5, #0]
 8009006:	b103      	cbz	r3, 800900a <_write_r+0x1e>
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	2000a72c 	.word	0x2000a72c

08009010 <__errno>:
 8009010:	4b01      	ldr	r3, [pc, #4]	@ (8009018 <__errno+0x8>)
 8009012:	6818      	ldr	r0, [r3, #0]
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	200001fc 	.word	0x200001fc

0800901c <__libc_init_array>:
 800901c:	b570      	push	{r4, r5, r6, lr}
 800901e:	4d0d      	ldr	r5, [pc, #52]	@ (8009054 <__libc_init_array+0x38>)
 8009020:	4c0d      	ldr	r4, [pc, #52]	@ (8009058 <__libc_init_array+0x3c>)
 8009022:	1b64      	subs	r4, r4, r5
 8009024:	10a4      	asrs	r4, r4, #2
 8009026:	2600      	movs	r6, #0
 8009028:	42a6      	cmp	r6, r4
 800902a:	d109      	bne.n	8009040 <__libc_init_array+0x24>
 800902c:	4d0b      	ldr	r5, [pc, #44]	@ (800905c <__libc_init_array+0x40>)
 800902e:	4c0c      	ldr	r4, [pc, #48]	@ (8009060 <__libc_init_array+0x44>)
 8009030:	f003 f8e2 	bl	800c1f8 <_init>
 8009034:	1b64      	subs	r4, r4, r5
 8009036:	10a4      	asrs	r4, r4, #2
 8009038:	2600      	movs	r6, #0
 800903a:	42a6      	cmp	r6, r4
 800903c:	d105      	bne.n	800904a <__libc_init_array+0x2e>
 800903e:	bd70      	pop	{r4, r5, r6, pc}
 8009040:	f855 3b04 	ldr.w	r3, [r5], #4
 8009044:	4798      	blx	r3
 8009046:	3601      	adds	r6, #1
 8009048:	e7ee      	b.n	8009028 <__libc_init_array+0xc>
 800904a:	f855 3b04 	ldr.w	r3, [r5], #4
 800904e:	4798      	blx	r3
 8009050:	3601      	adds	r6, #1
 8009052:	e7f2      	b.n	800903a <__libc_init_array+0x1e>
 8009054:	0800c7e0 	.word	0x0800c7e0
 8009058:	0800c7e0 	.word	0x0800c7e0
 800905c:	0800c7e0 	.word	0x0800c7e0
 8009060:	0800c7e4 	.word	0x0800c7e4

08009064 <__retarget_lock_init_recursive>:
 8009064:	4770      	bx	lr

08009066 <__retarget_lock_acquire_recursive>:
 8009066:	4770      	bx	lr

08009068 <__retarget_lock_release_recursive>:
 8009068:	4770      	bx	lr

0800906a <quorem>:
 800906a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906e:	6903      	ldr	r3, [r0, #16]
 8009070:	690c      	ldr	r4, [r1, #16]
 8009072:	42a3      	cmp	r3, r4
 8009074:	4607      	mov	r7, r0
 8009076:	db7e      	blt.n	8009176 <quorem+0x10c>
 8009078:	3c01      	subs	r4, #1
 800907a:	f101 0814 	add.w	r8, r1, #20
 800907e:	00a3      	lsls	r3, r4, #2
 8009080:	f100 0514 	add.w	r5, r0, #20
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009090:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009094:	3301      	adds	r3, #1
 8009096:	429a      	cmp	r2, r3
 8009098:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800909c:	fbb2 f6f3 	udiv	r6, r2, r3
 80090a0:	d32e      	bcc.n	8009100 <quorem+0x96>
 80090a2:	f04f 0a00 	mov.w	sl, #0
 80090a6:	46c4      	mov	ip, r8
 80090a8:	46ae      	mov	lr, r5
 80090aa:	46d3      	mov	fp, sl
 80090ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80090b0:	b298      	uxth	r0, r3
 80090b2:	fb06 a000 	mla	r0, r6, r0, sl
 80090b6:	0c02      	lsrs	r2, r0, #16
 80090b8:	0c1b      	lsrs	r3, r3, #16
 80090ba:	fb06 2303 	mla	r3, r6, r3, r2
 80090be:	f8de 2000 	ldr.w	r2, [lr]
 80090c2:	b280      	uxth	r0, r0
 80090c4:	b292      	uxth	r2, r2
 80090c6:	1a12      	subs	r2, r2, r0
 80090c8:	445a      	add	r2, fp
 80090ca:	f8de 0000 	ldr.w	r0, [lr]
 80090ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80090d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80090dc:	b292      	uxth	r2, r2
 80090de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80090e2:	45e1      	cmp	r9, ip
 80090e4:	f84e 2b04 	str.w	r2, [lr], #4
 80090e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80090ec:	d2de      	bcs.n	80090ac <quorem+0x42>
 80090ee:	9b00      	ldr	r3, [sp, #0]
 80090f0:	58eb      	ldr	r3, [r5, r3]
 80090f2:	b92b      	cbnz	r3, 8009100 <quorem+0x96>
 80090f4:	9b01      	ldr	r3, [sp, #4]
 80090f6:	3b04      	subs	r3, #4
 80090f8:	429d      	cmp	r5, r3
 80090fa:	461a      	mov	r2, r3
 80090fc:	d32f      	bcc.n	800915e <quorem+0xf4>
 80090fe:	613c      	str	r4, [r7, #16]
 8009100:	4638      	mov	r0, r7
 8009102:	f001 f97f 	bl	800a404 <__mcmp>
 8009106:	2800      	cmp	r0, #0
 8009108:	db25      	blt.n	8009156 <quorem+0xec>
 800910a:	4629      	mov	r1, r5
 800910c:	2000      	movs	r0, #0
 800910e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009112:	f8d1 c000 	ldr.w	ip, [r1]
 8009116:	fa1f fe82 	uxth.w	lr, r2
 800911a:	fa1f f38c 	uxth.w	r3, ip
 800911e:	eba3 030e 	sub.w	r3, r3, lr
 8009122:	4403      	add	r3, r0
 8009124:	0c12      	lsrs	r2, r2, #16
 8009126:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800912a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800912e:	b29b      	uxth	r3, r3
 8009130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009134:	45c1      	cmp	r9, r8
 8009136:	f841 3b04 	str.w	r3, [r1], #4
 800913a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800913e:	d2e6      	bcs.n	800910e <quorem+0xa4>
 8009140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009144:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009148:	b922      	cbnz	r2, 8009154 <quorem+0xea>
 800914a:	3b04      	subs	r3, #4
 800914c:	429d      	cmp	r5, r3
 800914e:	461a      	mov	r2, r3
 8009150:	d30b      	bcc.n	800916a <quorem+0x100>
 8009152:	613c      	str	r4, [r7, #16]
 8009154:	3601      	adds	r6, #1
 8009156:	4630      	mov	r0, r6
 8009158:	b003      	add	sp, #12
 800915a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915e:	6812      	ldr	r2, [r2, #0]
 8009160:	3b04      	subs	r3, #4
 8009162:	2a00      	cmp	r2, #0
 8009164:	d1cb      	bne.n	80090fe <quorem+0x94>
 8009166:	3c01      	subs	r4, #1
 8009168:	e7c6      	b.n	80090f8 <quorem+0x8e>
 800916a:	6812      	ldr	r2, [r2, #0]
 800916c:	3b04      	subs	r3, #4
 800916e:	2a00      	cmp	r2, #0
 8009170:	d1ef      	bne.n	8009152 <quorem+0xe8>
 8009172:	3c01      	subs	r4, #1
 8009174:	e7ea      	b.n	800914c <quorem+0xe2>
 8009176:	2000      	movs	r0, #0
 8009178:	e7ee      	b.n	8009158 <quorem+0xee>
 800917a:	0000      	movs	r0, r0
 800917c:	0000      	movs	r0, r0
	...

08009180 <_dtoa_r>:
 8009180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	69c7      	ldr	r7, [r0, #28]
 8009186:	b097      	sub	sp, #92	@ 0x5c
 8009188:	ed8d 0b04 	vstr	d0, [sp, #16]
 800918c:	ec55 4b10 	vmov	r4, r5, d0
 8009190:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009192:	9107      	str	r1, [sp, #28]
 8009194:	4681      	mov	r9, r0
 8009196:	920c      	str	r2, [sp, #48]	@ 0x30
 8009198:	9311      	str	r3, [sp, #68]	@ 0x44
 800919a:	b97f      	cbnz	r7, 80091bc <_dtoa_r+0x3c>
 800919c:	2010      	movs	r0, #16
 800919e:	f000 fe09 	bl	8009db4 <malloc>
 80091a2:	4602      	mov	r2, r0
 80091a4:	f8c9 001c 	str.w	r0, [r9, #28]
 80091a8:	b920      	cbnz	r0, 80091b4 <_dtoa_r+0x34>
 80091aa:	4ba9      	ldr	r3, [pc, #676]	@ (8009450 <_dtoa_r+0x2d0>)
 80091ac:	21ef      	movs	r1, #239	@ 0xef
 80091ae:	48a9      	ldr	r0, [pc, #676]	@ (8009454 <_dtoa_r+0x2d4>)
 80091b0:	f001 fc6c 	bl	800aa8c <__assert_func>
 80091b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80091b8:	6007      	str	r7, [r0, #0]
 80091ba:	60c7      	str	r7, [r0, #12]
 80091bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80091c0:	6819      	ldr	r1, [r3, #0]
 80091c2:	b159      	cbz	r1, 80091dc <_dtoa_r+0x5c>
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	604a      	str	r2, [r1, #4]
 80091c8:	2301      	movs	r3, #1
 80091ca:	4093      	lsls	r3, r2
 80091cc:	608b      	str	r3, [r1, #8]
 80091ce:	4648      	mov	r0, r9
 80091d0:	f000 fee6 	bl	8009fa0 <_Bfree>
 80091d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	1e2b      	subs	r3, r5, #0
 80091de:	bfb9      	ittee	lt
 80091e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80091e4:	9305      	strlt	r3, [sp, #20]
 80091e6:	2300      	movge	r3, #0
 80091e8:	6033      	strge	r3, [r6, #0]
 80091ea:	9f05      	ldr	r7, [sp, #20]
 80091ec:	4b9a      	ldr	r3, [pc, #616]	@ (8009458 <_dtoa_r+0x2d8>)
 80091ee:	bfbc      	itt	lt
 80091f0:	2201      	movlt	r2, #1
 80091f2:	6032      	strlt	r2, [r6, #0]
 80091f4:	43bb      	bics	r3, r7
 80091f6:	d112      	bne.n	800921e <_dtoa_r+0x9e>
 80091f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80091fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80091fe:	6013      	str	r3, [r2, #0]
 8009200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009204:	4323      	orrs	r3, r4
 8009206:	f000 855a 	beq.w	8009cbe <_dtoa_r+0xb3e>
 800920a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800920c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800946c <_dtoa_r+0x2ec>
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 855c 	beq.w	8009cce <_dtoa_r+0xb4e>
 8009216:	f10a 0303 	add.w	r3, sl, #3
 800921a:	f000 bd56 	b.w	8009cca <_dtoa_r+0xb4a>
 800921e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009222:	2200      	movs	r2, #0
 8009224:	ec51 0b17 	vmov	r0, r1, d7
 8009228:	2300      	movs	r3, #0
 800922a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800922e:	f7f7 fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009232:	4680      	mov	r8, r0
 8009234:	b158      	cbz	r0, 800924e <_dtoa_r+0xce>
 8009236:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009238:	2301      	movs	r3, #1
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800923e:	b113      	cbz	r3, 8009246 <_dtoa_r+0xc6>
 8009240:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009242:	4b86      	ldr	r3, [pc, #536]	@ (800945c <_dtoa_r+0x2dc>)
 8009244:	6013      	str	r3, [r2, #0]
 8009246:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009470 <_dtoa_r+0x2f0>
 800924a:	f000 bd40 	b.w	8009cce <_dtoa_r+0xb4e>
 800924e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009252:	aa14      	add	r2, sp, #80	@ 0x50
 8009254:	a915      	add	r1, sp, #84	@ 0x54
 8009256:	4648      	mov	r0, r9
 8009258:	f001 f984 	bl	800a564 <__d2b>
 800925c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009260:	9002      	str	r0, [sp, #8]
 8009262:	2e00      	cmp	r6, #0
 8009264:	d078      	beq.n	8009358 <_dtoa_r+0x1d8>
 8009266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009268:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800926c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009270:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009274:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009278:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800927c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009280:	4619      	mov	r1, r3
 8009282:	2200      	movs	r2, #0
 8009284:	4b76      	ldr	r3, [pc, #472]	@ (8009460 <_dtoa_r+0x2e0>)
 8009286:	f7f6 ffff 	bl	8000288 <__aeabi_dsub>
 800928a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009438 <_dtoa_r+0x2b8>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f7f7 f9b2 	bl	80005f8 <__aeabi_dmul>
 8009294:	a36a      	add	r3, pc, #424	@ (adr r3, 8009440 <_dtoa_r+0x2c0>)
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f7f6 fff7 	bl	800028c <__adddf3>
 800929e:	4604      	mov	r4, r0
 80092a0:	4630      	mov	r0, r6
 80092a2:	460d      	mov	r5, r1
 80092a4:	f7f7 f93e 	bl	8000524 <__aeabi_i2d>
 80092a8:	a367      	add	r3, pc, #412	@ (adr r3, 8009448 <_dtoa_r+0x2c8>)
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	f7f7 f9a3 	bl	80005f8 <__aeabi_dmul>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	4620      	mov	r0, r4
 80092b8:	4629      	mov	r1, r5
 80092ba:	f7f6 ffe7 	bl	800028c <__adddf3>
 80092be:	4604      	mov	r4, r0
 80092c0:	460d      	mov	r5, r1
 80092c2:	f7f7 fc49 	bl	8000b58 <__aeabi_d2iz>
 80092c6:	2200      	movs	r2, #0
 80092c8:	4607      	mov	r7, r0
 80092ca:	2300      	movs	r3, #0
 80092cc:	4620      	mov	r0, r4
 80092ce:	4629      	mov	r1, r5
 80092d0:	f7f7 fc04 	bl	8000adc <__aeabi_dcmplt>
 80092d4:	b140      	cbz	r0, 80092e8 <_dtoa_r+0x168>
 80092d6:	4638      	mov	r0, r7
 80092d8:	f7f7 f924 	bl	8000524 <__aeabi_i2d>
 80092dc:	4622      	mov	r2, r4
 80092de:	462b      	mov	r3, r5
 80092e0:	f7f7 fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80092e4:	b900      	cbnz	r0, 80092e8 <_dtoa_r+0x168>
 80092e6:	3f01      	subs	r7, #1
 80092e8:	2f16      	cmp	r7, #22
 80092ea:	d852      	bhi.n	8009392 <_dtoa_r+0x212>
 80092ec:	4b5d      	ldr	r3, [pc, #372]	@ (8009464 <_dtoa_r+0x2e4>)
 80092ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092fa:	f7f7 fbef 	bl	8000adc <__aeabi_dcmplt>
 80092fe:	2800      	cmp	r0, #0
 8009300:	d049      	beq.n	8009396 <_dtoa_r+0x216>
 8009302:	3f01      	subs	r7, #1
 8009304:	2300      	movs	r3, #0
 8009306:	9310      	str	r3, [sp, #64]	@ 0x40
 8009308:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800930a:	1b9b      	subs	r3, r3, r6
 800930c:	1e5a      	subs	r2, r3, #1
 800930e:	bf45      	ittet	mi
 8009310:	f1c3 0301 	rsbmi	r3, r3, #1
 8009314:	9300      	strmi	r3, [sp, #0]
 8009316:	2300      	movpl	r3, #0
 8009318:	2300      	movmi	r3, #0
 800931a:	9206      	str	r2, [sp, #24]
 800931c:	bf54      	ite	pl
 800931e:	9300      	strpl	r3, [sp, #0]
 8009320:	9306      	strmi	r3, [sp, #24]
 8009322:	2f00      	cmp	r7, #0
 8009324:	db39      	blt.n	800939a <_dtoa_r+0x21a>
 8009326:	9b06      	ldr	r3, [sp, #24]
 8009328:	970d      	str	r7, [sp, #52]	@ 0x34
 800932a:	443b      	add	r3, r7
 800932c:	9306      	str	r3, [sp, #24]
 800932e:	2300      	movs	r3, #0
 8009330:	9308      	str	r3, [sp, #32]
 8009332:	9b07      	ldr	r3, [sp, #28]
 8009334:	2b09      	cmp	r3, #9
 8009336:	d863      	bhi.n	8009400 <_dtoa_r+0x280>
 8009338:	2b05      	cmp	r3, #5
 800933a:	bfc4      	itt	gt
 800933c:	3b04      	subgt	r3, #4
 800933e:	9307      	strgt	r3, [sp, #28]
 8009340:	9b07      	ldr	r3, [sp, #28]
 8009342:	f1a3 0302 	sub.w	r3, r3, #2
 8009346:	bfcc      	ite	gt
 8009348:	2400      	movgt	r4, #0
 800934a:	2401      	movle	r4, #1
 800934c:	2b03      	cmp	r3, #3
 800934e:	d863      	bhi.n	8009418 <_dtoa_r+0x298>
 8009350:	e8df f003 	tbb	[pc, r3]
 8009354:	2b375452 	.word	0x2b375452
 8009358:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800935c:	441e      	add	r6, r3
 800935e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009362:	2b20      	cmp	r3, #32
 8009364:	bfc1      	itttt	gt
 8009366:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800936a:	409f      	lslgt	r7, r3
 800936c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009370:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009374:	bfd6      	itet	le
 8009376:	f1c3 0320 	rsble	r3, r3, #32
 800937a:	ea47 0003 	orrgt.w	r0, r7, r3
 800937e:	fa04 f003 	lslle.w	r0, r4, r3
 8009382:	f7f7 f8bf 	bl	8000504 <__aeabi_ui2d>
 8009386:	2201      	movs	r2, #1
 8009388:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800938c:	3e01      	subs	r6, #1
 800938e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009390:	e776      	b.n	8009280 <_dtoa_r+0x100>
 8009392:	2301      	movs	r3, #1
 8009394:	e7b7      	b.n	8009306 <_dtoa_r+0x186>
 8009396:	9010      	str	r0, [sp, #64]	@ 0x40
 8009398:	e7b6      	b.n	8009308 <_dtoa_r+0x188>
 800939a:	9b00      	ldr	r3, [sp, #0]
 800939c:	1bdb      	subs	r3, r3, r7
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	427b      	negs	r3, r7
 80093a2:	9308      	str	r3, [sp, #32]
 80093a4:	2300      	movs	r3, #0
 80093a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80093a8:	e7c3      	b.n	8009332 <_dtoa_r+0x1b2>
 80093aa:	2301      	movs	r3, #1
 80093ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80093ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093b0:	eb07 0b03 	add.w	fp, r7, r3
 80093b4:	f10b 0301 	add.w	r3, fp, #1
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	9303      	str	r3, [sp, #12]
 80093bc:	bfb8      	it	lt
 80093be:	2301      	movlt	r3, #1
 80093c0:	e006      	b.n	80093d0 <_dtoa_r+0x250>
 80093c2:	2301      	movs	r3, #1
 80093c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	dd28      	ble.n	800941e <_dtoa_r+0x29e>
 80093cc:	469b      	mov	fp, r3
 80093ce:	9303      	str	r3, [sp, #12]
 80093d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80093d4:	2100      	movs	r1, #0
 80093d6:	2204      	movs	r2, #4
 80093d8:	f102 0514 	add.w	r5, r2, #20
 80093dc:	429d      	cmp	r5, r3
 80093de:	d926      	bls.n	800942e <_dtoa_r+0x2ae>
 80093e0:	6041      	str	r1, [r0, #4]
 80093e2:	4648      	mov	r0, r9
 80093e4:	f000 fd9c 	bl	8009f20 <_Balloc>
 80093e8:	4682      	mov	sl, r0
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d142      	bne.n	8009474 <_dtoa_r+0x2f4>
 80093ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009468 <_dtoa_r+0x2e8>)
 80093f0:	4602      	mov	r2, r0
 80093f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80093f6:	e6da      	b.n	80091ae <_dtoa_r+0x2e>
 80093f8:	2300      	movs	r3, #0
 80093fa:	e7e3      	b.n	80093c4 <_dtoa_r+0x244>
 80093fc:	2300      	movs	r3, #0
 80093fe:	e7d5      	b.n	80093ac <_dtoa_r+0x22c>
 8009400:	2401      	movs	r4, #1
 8009402:	2300      	movs	r3, #0
 8009404:	9307      	str	r3, [sp, #28]
 8009406:	9409      	str	r4, [sp, #36]	@ 0x24
 8009408:	f04f 3bff 	mov.w	fp, #4294967295
 800940c:	2200      	movs	r2, #0
 800940e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009412:	2312      	movs	r3, #18
 8009414:	920c      	str	r2, [sp, #48]	@ 0x30
 8009416:	e7db      	b.n	80093d0 <_dtoa_r+0x250>
 8009418:	2301      	movs	r3, #1
 800941a:	9309      	str	r3, [sp, #36]	@ 0x24
 800941c:	e7f4      	b.n	8009408 <_dtoa_r+0x288>
 800941e:	f04f 0b01 	mov.w	fp, #1
 8009422:	f8cd b00c 	str.w	fp, [sp, #12]
 8009426:	465b      	mov	r3, fp
 8009428:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800942c:	e7d0      	b.n	80093d0 <_dtoa_r+0x250>
 800942e:	3101      	adds	r1, #1
 8009430:	0052      	lsls	r2, r2, #1
 8009432:	e7d1      	b.n	80093d8 <_dtoa_r+0x258>
 8009434:	f3af 8000 	nop.w
 8009438:	636f4361 	.word	0x636f4361
 800943c:	3fd287a7 	.word	0x3fd287a7
 8009440:	8b60c8b3 	.word	0x8b60c8b3
 8009444:	3fc68a28 	.word	0x3fc68a28
 8009448:	509f79fb 	.word	0x509f79fb
 800944c:	3fd34413 	.word	0x3fd34413
 8009450:	0800c2c9 	.word	0x0800c2c9
 8009454:	0800c2e0 	.word	0x0800c2e0
 8009458:	7ff00000 	.word	0x7ff00000
 800945c:	0800c299 	.word	0x0800c299
 8009460:	3ff80000 	.word	0x3ff80000
 8009464:	0800c430 	.word	0x0800c430
 8009468:	0800c338 	.word	0x0800c338
 800946c:	0800c2c5 	.word	0x0800c2c5
 8009470:	0800c298 	.word	0x0800c298
 8009474:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009478:	6018      	str	r0, [r3, #0]
 800947a:	9b03      	ldr	r3, [sp, #12]
 800947c:	2b0e      	cmp	r3, #14
 800947e:	f200 80a1 	bhi.w	80095c4 <_dtoa_r+0x444>
 8009482:	2c00      	cmp	r4, #0
 8009484:	f000 809e 	beq.w	80095c4 <_dtoa_r+0x444>
 8009488:	2f00      	cmp	r7, #0
 800948a:	dd33      	ble.n	80094f4 <_dtoa_r+0x374>
 800948c:	4b9c      	ldr	r3, [pc, #624]	@ (8009700 <_dtoa_r+0x580>)
 800948e:	f007 020f 	and.w	r2, r7, #15
 8009492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009496:	ed93 7b00 	vldr	d7, [r3]
 800949a:	05f8      	lsls	r0, r7, #23
 800949c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80094a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80094a4:	d516      	bpl.n	80094d4 <_dtoa_r+0x354>
 80094a6:	4b97      	ldr	r3, [pc, #604]	@ (8009704 <_dtoa_r+0x584>)
 80094a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80094ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094b0:	f7f7 f9cc 	bl	800084c <__aeabi_ddiv>
 80094b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094b8:	f004 040f 	and.w	r4, r4, #15
 80094bc:	2603      	movs	r6, #3
 80094be:	4d91      	ldr	r5, [pc, #580]	@ (8009704 <_dtoa_r+0x584>)
 80094c0:	b954      	cbnz	r4, 80094d8 <_dtoa_r+0x358>
 80094c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80094c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094ca:	f7f7 f9bf 	bl	800084c <__aeabi_ddiv>
 80094ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094d2:	e028      	b.n	8009526 <_dtoa_r+0x3a6>
 80094d4:	2602      	movs	r6, #2
 80094d6:	e7f2      	b.n	80094be <_dtoa_r+0x33e>
 80094d8:	07e1      	lsls	r1, r4, #31
 80094da:	d508      	bpl.n	80094ee <_dtoa_r+0x36e>
 80094dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80094e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094e4:	f7f7 f888 	bl	80005f8 <__aeabi_dmul>
 80094e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80094ec:	3601      	adds	r6, #1
 80094ee:	1064      	asrs	r4, r4, #1
 80094f0:	3508      	adds	r5, #8
 80094f2:	e7e5      	b.n	80094c0 <_dtoa_r+0x340>
 80094f4:	f000 80af 	beq.w	8009656 <_dtoa_r+0x4d6>
 80094f8:	427c      	negs	r4, r7
 80094fa:	4b81      	ldr	r3, [pc, #516]	@ (8009700 <_dtoa_r+0x580>)
 80094fc:	4d81      	ldr	r5, [pc, #516]	@ (8009704 <_dtoa_r+0x584>)
 80094fe:	f004 020f 	and.w	r2, r4, #15
 8009502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800950e:	f7f7 f873 	bl	80005f8 <__aeabi_dmul>
 8009512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009516:	1124      	asrs	r4, r4, #4
 8009518:	2300      	movs	r3, #0
 800951a:	2602      	movs	r6, #2
 800951c:	2c00      	cmp	r4, #0
 800951e:	f040 808f 	bne.w	8009640 <_dtoa_r+0x4c0>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1d3      	bne.n	80094ce <_dtoa_r+0x34e>
 8009526:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009528:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 8094 	beq.w	800965a <_dtoa_r+0x4da>
 8009532:	4b75      	ldr	r3, [pc, #468]	@ (8009708 <_dtoa_r+0x588>)
 8009534:	2200      	movs	r2, #0
 8009536:	4620      	mov	r0, r4
 8009538:	4629      	mov	r1, r5
 800953a:	f7f7 facf 	bl	8000adc <__aeabi_dcmplt>
 800953e:	2800      	cmp	r0, #0
 8009540:	f000 808b 	beq.w	800965a <_dtoa_r+0x4da>
 8009544:	9b03      	ldr	r3, [sp, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 8087 	beq.w	800965a <_dtoa_r+0x4da>
 800954c:	f1bb 0f00 	cmp.w	fp, #0
 8009550:	dd34      	ble.n	80095bc <_dtoa_r+0x43c>
 8009552:	4620      	mov	r0, r4
 8009554:	4b6d      	ldr	r3, [pc, #436]	@ (800970c <_dtoa_r+0x58c>)
 8009556:	2200      	movs	r2, #0
 8009558:	4629      	mov	r1, r5
 800955a:	f7f7 f84d 	bl	80005f8 <__aeabi_dmul>
 800955e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009562:	f107 38ff 	add.w	r8, r7, #4294967295
 8009566:	3601      	adds	r6, #1
 8009568:	465c      	mov	r4, fp
 800956a:	4630      	mov	r0, r6
 800956c:	f7f6 ffda 	bl	8000524 <__aeabi_i2d>
 8009570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009574:	f7f7 f840 	bl	80005f8 <__aeabi_dmul>
 8009578:	4b65      	ldr	r3, [pc, #404]	@ (8009710 <_dtoa_r+0x590>)
 800957a:	2200      	movs	r2, #0
 800957c:	f7f6 fe86 	bl	800028c <__adddf3>
 8009580:	4605      	mov	r5, r0
 8009582:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009586:	2c00      	cmp	r4, #0
 8009588:	d16a      	bne.n	8009660 <_dtoa_r+0x4e0>
 800958a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800958e:	4b61      	ldr	r3, [pc, #388]	@ (8009714 <_dtoa_r+0x594>)
 8009590:	2200      	movs	r2, #0
 8009592:	f7f6 fe79 	bl	8000288 <__aeabi_dsub>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800959e:	462a      	mov	r2, r5
 80095a0:	4633      	mov	r3, r6
 80095a2:	f7f7 fab9 	bl	8000b18 <__aeabi_dcmpgt>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	f040 8298 	bne.w	8009adc <_dtoa_r+0x95c>
 80095ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095b0:	462a      	mov	r2, r5
 80095b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80095b6:	f7f7 fa91 	bl	8000adc <__aeabi_dcmplt>
 80095ba:	bb38      	cbnz	r0, 800960c <_dtoa_r+0x48c>
 80095bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80095c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80095c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f2c0 8157 	blt.w	800987a <_dtoa_r+0x6fa>
 80095cc:	2f0e      	cmp	r7, #14
 80095ce:	f300 8154 	bgt.w	800987a <_dtoa_r+0x6fa>
 80095d2:	4b4b      	ldr	r3, [pc, #300]	@ (8009700 <_dtoa_r+0x580>)
 80095d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095d8:	ed93 7b00 	vldr	d7, [r3]
 80095dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095de:	2b00      	cmp	r3, #0
 80095e0:	ed8d 7b00 	vstr	d7, [sp]
 80095e4:	f280 80e5 	bge.w	80097b2 <_dtoa_r+0x632>
 80095e8:	9b03      	ldr	r3, [sp, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f300 80e1 	bgt.w	80097b2 <_dtoa_r+0x632>
 80095f0:	d10c      	bne.n	800960c <_dtoa_r+0x48c>
 80095f2:	4b48      	ldr	r3, [pc, #288]	@ (8009714 <_dtoa_r+0x594>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	ec51 0b17 	vmov	r0, r1, d7
 80095fa:	f7f6 fffd 	bl	80005f8 <__aeabi_dmul>
 80095fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009602:	f7f7 fa7f 	bl	8000b04 <__aeabi_dcmpge>
 8009606:	2800      	cmp	r0, #0
 8009608:	f000 8266 	beq.w	8009ad8 <_dtoa_r+0x958>
 800960c:	2400      	movs	r4, #0
 800960e:	4625      	mov	r5, r4
 8009610:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009612:	4656      	mov	r6, sl
 8009614:	ea6f 0803 	mvn.w	r8, r3
 8009618:	2700      	movs	r7, #0
 800961a:	4621      	mov	r1, r4
 800961c:	4648      	mov	r0, r9
 800961e:	f000 fcbf 	bl	8009fa0 <_Bfree>
 8009622:	2d00      	cmp	r5, #0
 8009624:	f000 80bd 	beq.w	80097a2 <_dtoa_r+0x622>
 8009628:	b12f      	cbz	r7, 8009636 <_dtoa_r+0x4b6>
 800962a:	42af      	cmp	r7, r5
 800962c:	d003      	beq.n	8009636 <_dtoa_r+0x4b6>
 800962e:	4639      	mov	r1, r7
 8009630:	4648      	mov	r0, r9
 8009632:	f000 fcb5 	bl	8009fa0 <_Bfree>
 8009636:	4629      	mov	r1, r5
 8009638:	4648      	mov	r0, r9
 800963a:	f000 fcb1 	bl	8009fa0 <_Bfree>
 800963e:	e0b0      	b.n	80097a2 <_dtoa_r+0x622>
 8009640:	07e2      	lsls	r2, r4, #31
 8009642:	d505      	bpl.n	8009650 <_dtoa_r+0x4d0>
 8009644:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009648:	f7f6 ffd6 	bl	80005f8 <__aeabi_dmul>
 800964c:	3601      	adds	r6, #1
 800964e:	2301      	movs	r3, #1
 8009650:	1064      	asrs	r4, r4, #1
 8009652:	3508      	adds	r5, #8
 8009654:	e762      	b.n	800951c <_dtoa_r+0x39c>
 8009656:	2602      	movs	r6, #2
 8009658:	e765      	b.n	8009526 <_dtoa_r+0x3a6>
 800965a:	9c03      	ldr	r4, [sp, #12]
 800965c:	46b8      	mov	r8, r7
 800965e:	e784      	b.n	800956a <_dtoa_r+0x3ea>
 8009660:	4b27      	ldr	r3, [pc, #156]	@ (8009700 <_dtoa_r+0x580>)
 8009662:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009664:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009668:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800966c:	4454      	add	r4, sl
 800966e:	2900      	cmp	r1, #0
 8009670:	d054      	beq.n	800971c <_dtoa_r+0x59c>
 8009672:	4929      	ldr	r1, [pc, #164]	@ (8009718 <_dtoa_r+0x598>)
 8009674:	2000      	movs	r0, #0
 8009676:	f7f7 f8e9 	bl	800084c <__aeabi_ddiv>
 800967a:	4633      	mov	r3, r6
 800967c:	462a      	mov	r2, r5
 800967e:	f7f6 fe03 	bl	8000288 <__aeabi_dsub>
 8009682:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009686:	4656      	mov	r6, sl
 8009688:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800968c:	f7f7 fa64 	bl	8000b58 <__aeabi_d2iz>
 8009690:	4605      	mov	r5, r0
 8009692:	f7f6 ff47 	bl	8000524 <__aeabi_i2d>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800969e:	f7f6 fdf3 	bl	8000288 <__aeabi_dsub>
 80096a2:	3530      	adds	r5, #48	@ 0x30
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096ac:	f806 5b01 	strb.w	r5, [r6], #1
 80096b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80096b4:	f7f7 fa12 	bl	8000adc <__aeabi_dcmplt>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d172      	bne.n	80097a2 <_dtoa_r+0x622>
 80096bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096c0:	4911      	ldr	r1, [pc, #68]	@ (8009708 <_dtoa_r+0x588>)
 80096c2:	2000      	movs	r0, #0
 80096c4:	f7f6 fde0 	bl	8000288 <__aeabi_dsub>
 80096c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80096cc:	f7f7 fa06 	bl	8000adc <__aeabi_dcmplt>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	f040 80b4 	bne.w	800983e <_dtoa_r+0x6be>
 80096d6:	42a6      	cmp	r6, r4
 80096d8:	f43f af70 	beq.w	80095bc <_dtoa_r+0x43c>
 80096dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80096e0:	4b0a      	ldr	r3, [pc, #40]	@ (800970c <_dtoa_r+0x58c>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	f7f6 ff88 	bl	80005f8 <__aeabi_dmul>
 80096e8:	4b08      	ldr	r3, [pc, #32]	@ (800970c <_dtoa_r+0x58c>)
 80096ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80096ee:	2200      	movs	r2, #0
 80096f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096f4:	f7f6 ff80 	bl	80005f8 <__aeabi_dmul>
 80096f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096fc:	e7c4      	b.n	8009688 <_dtoa_r+0x508>
 80096fe:	bf00      	nop
 8009700:	0800c430 	.word	0x0800c430
 8009704:	0800c408 	.word	0x0800c408
 8009708:	3ff00000 	.word	0x3ff00000
 800970c:	40240000 	.word	0x40240000
 8009710:	401c0000 	.word	0x401c0000
 8009714:	40140000 	.word	0x40140000
 8009718:	3fe00000 	.word	0x3fe00000
 800971c:	4631      	mov	r1, r6
 800971e:	4628      	mov	r0, r5
 8009720:	f7f6 ff6a 	bl	80005f8 <__aeabi_dmul>
 8009724:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009728:	9413      	str	r4, [sp, #76]	@ 0x4c
 800972a:	4656      	mov	r6, sl
 800972c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009730:	f7f7 fa12 	bl	8000b58 <__aeabi_d2iz>
 8009734:	4605      	mov	r5, r0
 8009736:	f7f6 fef5 	bl	8000524 <__aeabi_i2d>
 800973a:	4602      	mov	r2, r0
 800973c:	460b      	mov	r3, r1
 800973e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009742:	f7f6 fda1 	bl	8000288 <__aeabi_dsub>
 8009746:	3530      	adds	r5, #48	@ 0x30
 8009748:	f806 5b01 	strb.w	r5, [r6], #1
 800974c:	4602      	mov	r2, r0
 800974e:	460b      	mov	r3, r1
 8009750:	42a6      	cmp	r6, r4
 8009752:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009756:	f04f 0200 	mov.w	r2, #0
 800975a:	d124      	bne.n	80097a6 <_dtoa_r+0x626>
 800975c:	4baf      	ldr	r3, [pc, #700]	@ (8009a1c <_dtoa_r+0x89c>)
 800975e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009762:	f7f6 fd93 	bl	800028c <__adddf3>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800976e:	f7f7 f9d3 	bl	8000b18 <__aeabi_dcmpgt>
 8009772:	2800      	cmp	r0, #0
 8009774:	d163      	bne.n	800983e <_dtoa_r+0x6be>
 8009776:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800977a:	49a8      	ldr	r1, [pc, #672]	@ (8009a1c <_dtoa_r+0x89c>)
 800977c:	2000      	movs	r0, #0
 800977e:	f7f6 fd83 	bl	8000288 <__aeabi_dsub>
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800978a:	f7f7 f9a7 	bl	8000adc <__aeabi_dcmplt>
 800978e:	2800      	cmp	r0, #0
 8009790:	f43f af14 	beq.w	80095bc <_dtoa_r+0x43c>
 8009794:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009796:	1e73      	subs	r3, r6, #1
 8009798:	9313      	str	r3, [sp, #76]	@ 0x4c
 800979a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800979e:	2b30      	cmp	r3, #48	@ 0x30
 80097a0:	d0f8      	beq.n	8009794 <_dtoa_r+0x614>
 80097a2:	4647      	mov	r7, r8
 80097a4:	e03b      	b.n	800981e <_dtoa_r+0x69e>
 80097a6:	4b9e      	ldr	r3, [pc, #632]	@ (8009a20 <_dtoa_r+0x8a0>)
 80097a8:	f7f6 ff26 	bl	80005f8 <__aeabi_dmul>
 80097ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097b0:	e7bc      	b.n	800972c <_dtoa_r+0x5ac>
 80097b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80097b6:	4656      	mov	r6, sl
 80097b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097bc:	4620      	mov	r0, r4
 80097be:	4629      	mov	r1, r5
 80097c0:	f7f7 f844 	bl	800084c <__aeabi_ddiv>
 80097c4:	f7f7 f9c8 	bl	8000b58 <__aeabi_d2iz>
 80097c8:	4680      	mov	r8, r0
 80097ca:	f7f6 feab 	bl	8000524 <__aeabi_i2d>
 80097ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097d2:	f7f6 ff11 	bl	80005f8 <__aeabi_dmul>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4620      	mov	r0, r4
 80097dc:	4629      	mov	r1, r5
 80097de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80097e2:	f7f6 fd51 	bl	8000288 <__aeabi_dsub>
 80097e6:	f806 4b01 	strb.w	r4, [r6], #1
 80097ea:	9d03      	ldr	r5, [sp, #12]
 80097ec:	eba6 040a 	sub.w	r4, r6, sl
 80097f0:	42a5      	cmp	r5, r4
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	d133      	bne.n	8009860 <_dtoa_r+0x6e0>
 80097f8:	f7f6 fd48 	bl	800028c <__adddf3>
 80097fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009800:	4604      	mov	r4, r0
 8009802:	460d      	mov	r5, r1
 8009804:	f7f7 f988 	bl	8000b18 <__aeabi_dcmpgt>
 8009808:	b9c0      	cbnz	r0, 800983c <_dtoa_r+0x6bc>
 800980a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800980e:	4620      	mov	r0, r4
 8009810:	4629      	mov	r1, r5
 8009812:	f7f7 f959 	bl	8000ac8 <__aeabi_dcmpeq>
 8009816:	b110      	cbz	r0, 800981e <_dtoa_r+0x69e>
 8009818:	f018 0f01 	tst.w	r8, #1
 800981c:	d10e      	bne.n	800983c <_dtoa_r+0x6bc>
 800981e:	9902      	ldr	r1, [sp, #8]
 8009820:	4648      	mov	r0, r9
 8009822:	f000 fbbd 	bl	8009fa0 <_Bfree>
 8009826:	2300      	movs	r3, #0
 8009828:	7033      	strb	r3, [r6, #0]
 800982a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800982c:	3701      	adds	r7, #1
 800982e:	601f      	str	r7, [r3, #0]
 8009830:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009832:	2b00      	cmp	r3, #0
 8009834:	f000 824b 	beq.w	8009cce <_dtoa_r+0xb4e>
 8009838:	601e      	str	r6, [r3, #0]
 800983a:	e248      	b.n	8009cce <_dtoa_r+0xb4e>
 800983c:	46b8      	mov	r8, r7
 800983e:	4633      	mov	r3, r6
 8009840:	461e      	mov	r6, r3
 8009842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009846:	2a39      	cmp	r2, #57	@ 0x39
 8009848:	d106      	bne.n	8009858 <_dtoa_r+0x6d8>
 800984a:	459a      	cmp	sl, r3
 800984c:	d1f8      	bne.n	8009840 <_dtoa_r+0x6c0>
 800984e:	2230      	movs	r2, #48	@ 0x30
 8009850:	f108 0801 	add.w	r8, r8, #1
 8009854:	f88a 2000 	strb.w	r2, [sl]
 8009858:	781a      	ldrb	r2, [r3, #0]
 800985a:	3201      	adds	r2, #1
 800985c:	701a      	strb	r2, [r3, #0]
 800985e:	e7a0      	b.n	80097a2 <_dtoa_r+0x622>
 8009860:	4b6f      	ldr	r3, [pc, #444]	@ (8009a20 <_dtoa_r+0x8a0>)
 8009862:	2200      	movs	r2, #0
 8009864:	f7f6 fec8 	bl	80005f8 <__aeabi_dmul>
 8009868:	2200      	movs	r2, #0
 800986a:	2300      	movs	r3, #0
 800986c:	4604      	mov	r4, r0
 800986e:	460d      	mov	r5, r1
 8009870:	f7f7 f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009874:	2800      	cmp	r0, #0
 8009876:	d09f      	beq.n	80097b8 <_dtoa_r+0x638>
 8009878:	e7d1      	b.n	800981e <_dtoa_r+0x69e>
 800987a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800987c:	2a00      	cmp	r2, #0
 800987e:	f000 80ea 	beq.w	8009a56 <_dtoa_r+0x8d6>
 8009882:	9a07      	ldr	r2, [sp, #28]
 8009884:	2a01      	cmp	r2, #1
 8009886:	f300 80cd 	bgt.w	8009a24 <_dtoa_r+0x8a4>
 800988a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800988c:	2a00      	cmp	r2, #0
 800988e:	f000 80c1 	beq.w	8009a14 <_dtoa_r+0x894>
 8009892:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009896:	9c08      	ldr	r4, [sp, #32]
 8009898:	9e00      	ldr	r6, [sp, #0]
 800989a:	9a00      	ldr	r2, [sp, #0]
 800989c:	441a      	add	r2, r3
 800989e:	9200      	str	r2, [sp, #0]
 80098a0:	9a06      	ldr	r2, [sp, #24]
 80098a2:	2101      	movs	r1, #1
 80098a4:	441a      	add	r2, r3
 80098a6:	4648      	mov	r0, r9
 80098a8:	9206      	str	r2, [sp, #24]
 80098aa:	f000 fc2d 	bl	800a108 <__i2b>
 80098ae:	4605      	mov	r5, r0
 80098b0:	b166      	cbz	r6, 80098cc <_dtoa_r+0x74c>
 80098b2:	9b06      	ldr	r3, [sp, #24]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	dd09      	ble.n	80098cc <_dtoa_r+0x74c>
 80098b8:	42b3      	cmp	r3, r6
 80098ba:	9a00      	ldr	r2, [sp, #0]
 80098bc:	bfa8      	it	ge
 80098be:	4633      	movge	r3, r6
 80098c0:	1ad2      	subs	r2, r2, r3
 80098c2:	9200      	str	r2, [sp, #0]
 80098c4:	9a06      	ldr	r2, [sp, #24]
 80098c6:	1af6      	subs	r6, r6, r3
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	9306      	str	r3, [sp, #24]
 80098cc:	9b08      	ldr	r3, [sp, #32]
 80098ce:	b30b      	cbz	r3, 8009914 <_dtoa_r+0x794>
 80098d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 80c6 	beq.w	8009a64 <_dtoa_r+0x8e4>
 80098d8:	2c00      	cmp	r4, #0
 80098da:	f000 80c0 	beq.w	8009a5e <_dtoa_r+0x8de>
 80098de:	4629      	mov	r1, r5
 80098e0:	4622      	mov	r2, r4
 80098e2:	4648      	mov	r0, r9
 80098e4:	f000 fcc8 	bl	800a278 <__pow5mult>
 80098e8:	9a02      	ldr	r2, [sp, #8]
 80098ea:	4601      	mov	r1, r0
 80098ec:	4605      	mov	r5, r0
 80098ee:	4648      	mov	r0, r9
 80098f0:	f000 fc20 	bl	800a134 <__multiply>
 80098f4:	9902      	ldr	r1, [sp, #8]
 80098f6:	4680      	mov	r8, r0
 80098f8:	4648      	mov	r0, r9
 80098fa:	f000 fb51 	bl	8009fa0 <_Bfree>
 80098fe:	9b08      	ldr	r3, [sp, #32]
 8009900:	1b1b      	subs	r3, r3, r4
 8009902:	9308      	str	r3, [sp, #32]
 8009904:	f000 80b1 	beq.w	8009a6a <_dtoa_r+0x8ea>
 8009908:	9a08      	ldr	r2, [sp, #32]
 800990a:	4641      	mov	r1, r8
 800990c:	4648      	mov	r0, r9
 800990e:	f000 fcb3 	bl	800a278 <__pow5mult>
 8009912:	9002      	str	r0, [sp, #8]
 8009914:	2101      	movs	r1, #1
 8009916:	4648      	mov	r0, r9
 8009918:	f000 fbf6 	bl	800a108 <__i2b>
 800991c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800991e:	4604      	mov	r4, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 81d8 	beq.w	8009cd6 <_dtoa_r+0xb56>
 8009926:	461a      	mov	r2, r3
 8009928:	4601      	mov	r1, r0
 800992a:	4648      	mov	r0, r9
 800992c:	f000 fca4 	bl	800a278 <__pow5mult>
 8009930:	9b07      	ldr	r3, [sp, #28]
 8009932:	2b01      	cmp	r3, #1
 8009934:	4604      	mov	r4, r0
 8009936:	f300 809f 	bgt.w	8009a78 <_dtoa_r+0x8f8>
 800993a:	9b04      	ldr	r3, [sp, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	f040 8097 	bne.w	8009a70 <_dtoa_r+0x8f0>
 8009942:	9b05      	ldr	r3, [sp, #20]
 8009944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009948:	2b00      	cmp	r3, #0
 800994a:	f040 8093 	bne.w	8009a74 <_dtoa_r+0x8f4>
 800994e:	9b05      	ldr	r3, [sp, #20]
 8009950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009954:	0d1b      	lsrs	r3, r3, #20
 8009956:	051b      	lsls	r3, r3, #20
 8009958:	b133      	cbz	r3, 8009968 <_dtoa_r+0x7e8>
 800995a:	9b00      	ldr	r3, [sp, #0]
 800995c:	3301      	adds	r3, #1
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	9b06      	ldr	r3, [sp, #24]
 8009962:	3301      	adds	r3, #1
 8009964:	9306      	str	r3, [sp, #24]
 8009966:	2301      	movs	r3, #1
 8009968:	9308      	str	r3, [sp, #32]
 800996a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 81b8 	beq.w	8009ce2 <_dtoa_r+0xb62>
 8009972:	6923      	ldr	r3, [r4, #16]
 8009974:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009978:	6918      	ldr	r0, [r3, #16]
 800997a:	f000 fb79 	bl	800a070 <__hi0bits>
 800997e:	f1c0 0020 	rsb	r0, r0, #32
 8009982:	9b06      	ldr	r3, [sp, #24]
 8009984:	4418      	add	r0, r3
 8009986:	f010 001f 	ands.w	r0, r0, #31
 800998a:	f000 8082 	beq.w	8009a92 <_dtoa_r+0x912>
 800998e:	f1c0 0320 	rsb	r3, r0, #32
 8009992:	2b04      	cmp	r3, #4
 8009994:	dd73      	ble.n	8009a7e <_dtoa_r+0x8fe>
 8009996:	9b00      	ldr	r3, [sp, #0]
 8009998:	f1c0 001c 	rsb	r0, r0, #28
 800999c:	4403      	add	r3, r0
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	9b06      	ldr	r3, [sp, #24]
 80099a2:	4403      	add	r3, r0
 80099a4:	4406      	add	r6, r0
 80099a6:	9306      	str	r3, [sp, #24]
 80099a8:	9b00      	ldr	r3, [sp, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	dd05      	ble.n	80099ba <_dtoa_r+0x83a>
 80099ae:	9902      	ldr	r1, [sp, #8]
 80099b0:	461a      	mov	r2, r3
 80099b2:	4648      	mov	r0, r9
 80099b4:	f000 fcba 	bl	800a32c <__lshift>
 80099b8:	9002      	str	r0, [sp, #8]
 80099ba:	9b06      	ldr	r3, [sp, #24]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	dd05      	ble.n	80099cc <_dtoa_r+0x84c>
 80099c0:	4621      	mov	r1, r4
 80099c2:	461a      	mov	r2, r3
 80099c4:	4648      	mov	r0, r9
 80099c6:	f000 fcb1 	bl	800a32c <__lshift>
 80099ca:	4604      	mov	r4, r0
 80099cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d061      	beq.n	8009a96 <_dtoa_r+0x916>
 80099d2:	9802      	ldr	r0, [sp, #8]
 80099d4:	4621      	mov	r1, r4
 80099d6:	f000 fd15 	bl	800a404 <__mcmp>
 80099da:	2800      	cmp	r0, #0
 80099dc:	da5b      	bge.n	8009a96 <_dtoa_r+0x916>
 80099de:	2300      	movs	r3, #0
 80099e0:	9902      	ldr	r1, [sp, #8]
 80099e2:	220a      	movs	r2, #10
 80099e4:	4648      	mov	r0, r9
 80099e6:	f000 fafd 	bl	8009fe4 <__multadd>
 80099ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ec:	9002      	str	r0, [sp, #8]
 80099ee:	f107 38ff 	add.w	r8, r7, #4294967295
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 8177 	beq.w	8009ce6 <_dtoa_r+0xb66>
 80099f8:	4629      	mov	r1, r5
 80099fa:	2300      	movs	r3, #0
 80099fc:	220a      	movs	r2, #10
 80099fe:	4648      	mov	r0, r9
 8009a00:	f000 faf0 	bl	8009fe4 <__multadd>
 8009a04:	f1bb 0f00 	cmp.w	fp, #0
 8009a08:	4605      	mov	r5, r0
 8009a0a:	dc6f      	bgt.n	8009aec <_dtoa_r+0x96c>
 8009a0c:	9b07      	ldr	r3, [sp, #28]
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	dc49      	bgt.n	8009aa6 <_dtoa_r+0x926>
 8009a12:	e06b      	b.n	8009aec <_dtoa_r+0x96c>
 8009a14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009a1a:	e73c      	b.n	8009896 <_dtoa_r+0x716>
 8009a1c:	3fe00000 	.word	0x3fe00000
 8009a20:	40240000 	.word	0x40240000
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	1e5c      	subs	r4, r3, #1
 8009a28:	9b08      	ldr	r3, [sp, #32]
 8009a2a:	42a3      	cmp	r3, r4
 8009a2c:	db09      	blt.n	8009a42 <_dtoa_r+0x8c2>
 8009a2e:	1b1c      	subs	r4, r3, r4
 8009a30:	9b03      	ldr	r3, [sp, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f6bf af30 	bge.w	8009898 <_dtoa_r+0x718>
 8009a38:	9b00      	ldr	r3, [sp, #0]
 8009a3a:	9a03      	ldr	r2, [sp, #12]
 8009a3c:	1a9e      	subs	r6, r3, r2
 8009a3e:	2300      	movs	r3, #0
 8009a40:	e72b      	b.n	800989a <_dtoa_r+0x71a>
 8009a42:	9b08      	ldr	r3, [sp, #32]
 8009a44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a46:	9408      	str	r4, [sp, #32]
 8009a48:	1ae3      	subs	r3, r4, r3
 8009a4a:	441a      	add	r2, r3
 8009a4c:	9e00      	ldr	r6, [sp, #0]
 8009a4e:	9b03      	ldr	r3, [sp, #12]
 8009a50:	920d      	str	r2, [sp, #52]	@ 0x34
 8009a52:	2400      	movs	r4, #0
 8009a54:	e721      	b.n	800989a <_dtoa_r+0x71a>
 8009a56:	9c08      	ldr	r4, [sp, #32]
 8009a58:	9e00      	ldr	r6, [sp, #0]
 8009a5a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009a5c:	e728      	b.n	80098b0 <_dtoa_r+0x730>
 8009a5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009a62:	e751      	b.n	8009908 <_dtoa_r+0x788>
 8009a64:	9a08      	ldr	r2, [sp, #32]
 8009a66:	9902      	ldr	r1, [sp, #8]
 8009a68:	e750      	b.n	800990c <_dtoa_r+0x78c>
 8009a6a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009a6e:	e751      	b.n	8009914 <_dtoa_r+0x794>
 8009a70:	2300      	movs	r3, #0
 8009a72:	e779      	b.n	8009968 <_dtoa_r+0x7e8>
 8009a74:	9b04      	ldr	r3, [sp, #16]
 8009a76:	e777      	b.n	8009968 <_dtoa_r+0x7e8>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	9308      	str	r3, [sp, #32]
 8009a7c:	e779      	b.n	8009972 <_dtoa_r+0x7f2>
 8009a7e:	d093      	beq.n	80099a8 <_dtoa_r+0x828>
 8009a80:	9a00      	ldr	r2, [sp, #0]
 8009a82:	331c      	adds	r3, #28
 8009a84:	441a      	add	r2, r3
 8009a86:	9200      	str	r2, [sp, #0]
 8009a88:	9a06      	ldr	r2, [sp, #24]
 8009a8a:	441a      	add	r2, r3
 8009a8c:	441e      	add	r6, r3
 8009a8e:	9206      	str	r2, [sp, #24]
 8009a90:	e78a      	b.n	80099a8 <_dtoa_r+0x828>
 8009a92:	4603      	mov	r3, r0
 8009a94:	e7f4      	b.n	8009a80 <_dtoa_r+0x900>
 8009a96:	9b03      	ldr	r3, [sp, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	46b8      	mov	r8, r7
 8009a9c:	dc20      	bgt.n	8009ae0 <_dtoa_r+0x960>
 8009a9e:	469b      	mov	fp, r3
 8009aa0:	9b07      	ldr	r3, [sp, #28]
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	dd1e      	ble.n	8009ae4 <_dtoa_r+0x964>
 8009aa6:	f1bb 0f00 	cmp.w	fp, #0
 8009aaa:	f47f adb1 	bne.w	8009610 <_dtoa_r+0x490>
 8009aae:	4621      	mov	r1, r4
 8009ab0:	465b      	mov	r3, fp
 8009ab2:	2205      	movs	r2, #5
 8009ab4:	4648      	mov	r0, r9
 8009ab6:	f000 fa95 	bl	8009fe4 <__multadd>
 8009aba:	4601      	mov	r1, r0
 8009abc:	4604      	mov	r4, r0
 8009abe:	9802      	ldr	r0, [sp, #8]
 8009ac0:	f000 fca0 	bl	800a404 <__mcmp>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	f77f ada3 	ble.w	8009610 <_dtoa_r+0x490>
 8009aca:	4656      	mov	r6, sl
 8009acc:	2331      	movs	r3, #49	@ 0x31
 8009ace:	f806 3b01 	strb.w	r3, [r6], #1
 8009ad2:	f108 0801 	add.w	r8, r8, #1
 8009ad6:	e59f      	b.n	8009618 <_dtoa_r+0x498>
 8009ad8:	9c03      	ldr	r4, [sp, #12]
 8009ada:	46b8      	mov	r8, r7
 8009adc:	4625      	mov	r5, r4
 8009ade:	e7f4      	b.n	8009aca <_dtoa_r+0x94a>
 8009ae0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 8101 	beq.w	8009cee <_dtoa_r+0xb6e>
 8009aec:	2e00      	cmp	r6, #0
 8009aee:	dd05      	ble.n	8009afc <_dtoa_r+0x97c>
 8009af0:	4629      	mov	r1, r5
 8009af2:	4632      	mov	r2, r6
 8009af4:	4648      	mov	r0, r9
 8009af6:	f000 fc19 	bl	800a32c <__lshift>
 8009afa:	4605      	mov	r5, r0
 8009afc:	9b08      	ldr	r3, [sp, #32]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d05c      	beq.n	8009bbc <_dtoa_r+0xa3c>
 8009b02:	6869      	ldr	r1, [r5, #4]
 8009b04:	4648      	mov	r0, r9
 8009b06:	f000 fa0b 	bl	8009f20 <_Balloc>
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	b928      	cbnz	r0, 8009b1a <_dtoa_r+0x99a>
 8009b0e:	4b82      	ldr	r3, [pc, #520]	@ (8009d18 <_dtoa_r+0xb98>)
 8009b10:	4602      	mov	r2, r0
 8009b12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009b16:	f7ff bb4a 	b.w	80091ae <_dtoa_r+0x2e>
 8009b1a:	692a      	ldr	r2, [r5, #16]
 8009b1c:	3202      	adds	r2, #2
 8009b1e:	0092      	lsls	r2, r2, #2
 8009b20:	f105 010c 	add.w	r1, r5, #12
 8009b24:	300c      	adds	r0, #12
 8009b26:	f000 ffa3 	bl	800aa70 <memcpy>
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	4648      	mov	r0, r9
 8009b30:	f000 fbfc 	bl	800a32c <__lshift>
 8009b34:	f10a 0301 	add.w	r3, sl, #1
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	eb0a 030b 	add.w	r3, sl, fp
 8009b3e:	9308      	str	r3, [sp, #32]
 8009b40:	9b04      	ldr	r3, [sp, #16]
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	462f      	mov	r7, r5
 8009b48:	9306      	str	r3, [sp, #24]
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	9b00      	ldr	r3, [sp, #0]
 8009b4e:	9802      	ldr	r0, [sp, #8]
 8009b50:	4621      	mov	r1, r4
 8009b52:	f103 3bff 	add.w	fp, r3, #4294967295
 8009b56:	f7ff fa88 	bl	800906a <quorem>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	3330      	adds	r3, #48	@ 0x30
 8009b5e:	9003      	str	r0, [sp, #12]
 8009b60:	4639      	mov	r1, r7
 8009b62:	9802      	ldr	r0, [sp, #8]
 8009b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b66:	f000 fc4d 	bl	800a404 <__mcmp>
 8009b6a:	462a      	mov	r2, r5
 8009b6c:	9004      	str	r0, [sp, #16]
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4648      	mov	r0, r9
 8009b72:	f000 fc63 	bl	800a43c <__mdiff>
 8009b76:	68c2      	ldr	r2, [r0, #12]
 8009b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	bb02      	cbnz	r2, 8009bc0 <_dtoa_r+0xa40>
 8009b7e:	4601      	mov	r1, r0
 8009b80:	9802      	ldr	r0, [sp, #8]
 8009b82:	f000 fc3f 	bl	800a404 <__mcmp>
 8009b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b88:	4602      	mov	r2, r0
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4648      	mov	r0, r9
 8009b8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b92:	f000 fa05 	bl	8009fa0 <_Bfree>
 8009b96:	9b07      	ldr	r3, [sp, #28]
 8009b98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009b9a:	9e00      	ldr	r6, [sp, #0]
 8009b9c:	ea42 0103 	orr.w	r1, r2, r3
 8009ba0:	9b06      	ldr	r3, [sp, #24]
 8009ba2:	4319      	orrs	r1, r3
 8009ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba6:	d10d      	bne.n	8009bc4 <_dtoa_r+0xa44>
 8009ba8:	2b39      	cmp	r3, #57	@ 0x39
 8009baa:	d027      	beq.n	8009bfc <_dtoa_r+0xa7c>
 8009bac:	9a04      	ldr	r2, [sp, #16]
 8009bae:	2a00      	cmp	r2, #0
 8009bb0:	dd01      	ble.n	8009bb6 <_dtoa_r+0xa36>
 8009bb2:	9b03      	ldr	r3, [sp, #12]
 8009bb4:	3331      	adds	r3, #49	@ 0x31
 8009bb6:	f88b 3000 	strb.w	r3, [fp]
 8009bba:	e52e      	b.n	800961a <_dtoa_r+0x49a>
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	e7b9      	b.n	8009b34 <_dtoa_r+0x9b4>
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	e7e2      	b.n	8009b8a <_dtoa_r+0xa0a>
 8009bc4:	9904      	ldr	r1, [sp, #16]
 8009bc6:	2900      	cmp	r1, #0
 8009bc8:	db04      	blt.n	8009bd4 <_dtoa_r+0xa54>
 8009bca:	9807      	ldr	r0, [sp, #28]
 8009bcc:	4301      	orrs	r1, r0
 8009bce:	9806      	ldr	r0, [sp, #24]
 8009bd0:	4301      	orrs	r1, r0
 8009bd2:	d120      	bne.n	8009c16 <_dtoa_r+0xa96>
 8009bd4:	2a00      	cmp	r2, #0
 8009bd6:	ddee      	ble.n	8009bb6 <_dtoa_r+0xa36>
 8009bd8:	9902      	ldr	r1, [sp, #8]
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	4648      	mov	r0, r9
 8009be0:	f000 fba4 	bl	800a32c <__lshift>
 8009be4:	4621      	mov	r1, r4
 8009be6:	9002      	str	r0, [sp, #8]
 8009be8:	f000 fc0c 	bl	800a404 <__mcmp>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	9b00      	ldr	r3, [sp, #0]
 8009bf0:	dc02      	bgt.n	8009bf8 <_dtoa_r+0xa78>
 8009bf2:	d1e0      	bne.n	8009bb6 <_dtoa_r+0xa36>
 8009bf4:	07da      	lsls	r2, r3, #31
 8009bf6:	d5de      	bpl.n	8009bb6 <_dtoa_r+0xa36>
 8009bf8:	2b39      	cmp	r3, #57	@ 0x39
 8009bfa:	d1da      	bne.n	8009bb2 <_dtoa_r+0xa32>
 8009bfc:	2339      	movs	r3, #57	@ 0x39
 8009bfe:	f88b 3000 	strb.w	r3, [fp]
 8009c02:	4633      	mov	r3, r6
 8009c04:	461e      	mov	r6, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009c0c:	2a39      	cmp	r2, #57	@ 0x39
 8009c0e:	d04e      	beq.n	8009cae <_dtoa_r+0xb2e>
 8009c10:	3201      	adds	r2, #1
 8009c12:	701a      	strb	r2, [r3, #0]
 8009c14:	e501      	b.n	800961a <_dtoa_r+0x49a>
 8009c16:	2a00      	cmp	r2, #0
 8009c18:	dd03      	ble.n	8009c22 <_dtoa_r+0xaa2>
 8009c1a:	2b39      	cmp	r3, #57	@ 0x39
 8009c1c:	d0ee      	beq.n	8009bfc <_dtoa_r+0xa7c>
 8009c1e:	3301      	adds	r3, #1
 8009c20:	e7c9      	b.n	8009bb6 <_dtoa_r+0xa36>
 8009c22:	9a00      	ldr	r2, [sp, #0]
 8009c24:	9908      	ldr	r1, [sp, #32]
 8009c26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009c2a:	428a      	cmp	r2, r1
 8009c2c:	d028      	beq.n	8009c80 <_dtoa_r+0xb00>
 8009c2e:	9902      	ldr	r1, [sp, #8]
 8009c30:	2300      	movs	r3, #0
 8009c32:	220a      	movs	r2, #10
 8009c34:	4648      	mov	r0, r9
 8009c36:	f000 f9d5 	bl	8009fe4 <__multadd>
 8009c3a:	42af      	cmp	r7, r5
 8009c3c:	9002      	str	r0, [sp, #8]
 8009c3e:	f04f 0300 	mov.w	r3, #0
 8009c42:	f04f 020a 	mov.w	r2, #10
 8009c46:	4639      	mov	r1, r7
 8009c48:	4648      	mov	r0, r9
 8009c4a:	d107      	bne.n	8009c5c <_dtoa_r+0xadc>
 8009c4c:	f000 f9ca 	bl	8009fe4 <__multadd>
 8009c50:	4607      	mov	r7, r0
 8009c52:	4605      	mov	r5, r0
 8009c54:	9b00      	ldr	r3, [sp, #0]
 8009c56:	3301      	adds	r3, #1
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	e777      	b.n	8009b4c <_dtoa_r+0x9cc>
 8009c5c:	f000 f9c2 	bl	8009fe4 <__multadd>
 8009c60:	4629      	mov	r1, r5
 8009c62:	4607      	mov	r7, r0
 8009c64:	2300      	movs	r3, #0
 8009c66:	220a      	movs	r2, #10
 8009c68:	4648      	mov	r0, r9
 8009c6a:	f000 f9bb 	bl	8009fe4 <__multadd>
 8009c6e:	4605      	mov	r5, r0
 8009c70:	e7f0      	b.n	8009c54 <_dtoa_r+0xad4>
 8009c72:	f1bb 0f00 	cmp.w	fp, #0
 8009c76:	bfcc      	ite	gt
 8009c78:	465e      	movgt	r6, fp
 8009c7a:	2601      	movle	r6, #1
 8009c7c:	4456      	add	r6, sl
 8009c7e:	2700      	movs	r7, #0
 8009c80:	9902      	ldr	r1, [sp, #8]
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	2201      	movs	r2, #1
 8009c86:	4648      	mov	r0, r9
 8009c88:	f000 fb50 	bl	800a32c <__lshift>
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	9002      	str	r0, [sp, #8]
 8009c90:	f000 fbb8 	bl	800a404 <__mcmp>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	dcb4      	bgt.n	8009c02 <_dtoa_r+0xa82>
 8009c98:	d102      	bne.n	8009ca0 <_dtoa_r+0xb20>
 8009c9a:	9b00      	ldr	r3, [sp, #0]
 8009c9c:	07db      	lsls	r3, r3, #31
 8009c9e:	d4b0      	bmi.n	8009c02 <_dtoa_r+0xa82>
 8009ca0:	4633      	mov	r3, r6
 8009ca2:	461e      	mov	r6, r3
 8009ca4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ca8:	2a30      	cmp	r2, #48	@ 0x30
 8009caa:	d0fa      	beq.n	8009ca2 <_dtoa_r+0xb22>
 8009cac:	e4b5      	b.n	800961a <_dtoa_r+0x49a>
 8009cae:	459a      	cmp	sl, r3
 8009cb0:	d1a8      	bne.n	8009c04 <_dtoa_r+0xa84>
 8009cb2:	2331      	movs	r3, #49	@ 0x31
 8009cb4:	f108 0801 	add.w	r8, r8, #1
 8009cb8:	f88a 3000 	strb.w	r3, [sl]
 8009cbc:	e4ad      	b.n	800961a <_dtoa_r+0x49a>
 8009cbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009cc0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009d1c <_dtoa_r+0xb9c>
 8009cc4:	b11b      	cbz	r3, 8009cce <_dtoa_r+0xb4e>
 8009cc6:	f10a 0308 	add.w	r3, sl, #8
 8009cca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009ccc:	6013      	str	r3, [r2, #0]
 8009cce:	4650      	mov	r0, sl
 8009cd0:	b017      	add	sp, #92	@ 0x5c
 8009cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd6:	9b07      	ldr	r3, [sp, #28]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	f77f ae2e 	ble.w	800993a <_dtoa_r+0x7ba>
 8009cde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ce0:	9308      	str	r3, [sp, #32]
 8009ce2:	2001      	movs	r0, #1
 8009ce4:	e64d      	b.n	8009982 <_dtoa_r+0x802>
 8009ce6:	f1bb 0f00 	cmp.w	fp, #0
 8009cea:	f77f aed9 	ble.w	8009aa0 <_dtoa_r+0x920>
 8009cee:	4656      	mov	r6, sl
 8009cf0:	9802      	ldr	r0, [sp, #8]
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	f7ff f9b9 	bl	800906a <quorem>
 8009cf8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009cfc:	f806 3b01 	strb.w	r3, [r6], #1
 8009d00:	eba6 020a 	sub.w	r2, r6, sl
 8009d04:	4593      	cmp	fp, r2
 8009d06:	ddb4      	ble.n	8009c72 <_dtoa_r+0xaf2>
 8009d08:	9902      	ldr	r1, [sp, #8]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	220a      	movs	r2, #10
 8009d0e:	4648      	mov	r0, r9
 8009d10:	f000 f968 	bl	8009fe4 <__multadd>
 8009d14:	9002      	str	r0, [sp, #8]
 8009d16:	e7eb      	b.n	8009cf0 <_dtoa_r+0xb70>
 8009d18:	0800c338 	.word	0x0800c338
 8009d1c:	0800c2bc 	.word	0x0800c2bc

08009d20 <_free_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	4605      	mov	r5, r0
 8009d24:	2900      	cmp	r1, #0
 8009d26:	d041      	beq.n	8009dac <_free_r+0x8c>
 8009d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d2c:	1f0c      	subs	r4, r1, #4
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	bfb8      	it	lt
 8009d32:	18e4      	addlt	r4, r4, r3
 8009d34:	f000 f8e8 	bl	8009f08 <__malloc_lock>
 8009d38:	4a1d      	ldr	r2, [pc, #116]	@ (8009db0 <_free_r+0x90>)
 8009d3a:	6813      	ldr	r3, [r2, #0]
 8009d3c:	b933      	cbnz	r3, 8009d4c <_free_r+0x2c>
 8009d3e:	6063      	str	r3, [r4, #4]
 8009d40:	6014      	str	r4, [r2, #0]
 8009d42:	4628      	mov	r0, r5
 8009d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d48:	f000 b8e4 	b.w	8009f14 <__malloc_unlock>
 8009d4c:	42a3      	cmp	r3, r4
 8009d4e:	d908      	bls.n	8009d62 <_free_r+0x42>
 8009d50:	6820      	ldr	r0, [r4, #0]
 8009d52:	1821      	adds	r1, r4, r0
 8009d54:	428b      	cmp	r3, r1
 8009d56:	bf01      	itttt	eq
 8009d58:	6819      	ldreq	r1, [r3, #0]
 8009d5a:	685b      	ldreq	r3, [r3, #4]
 8009d5c:	1809      	addeq	r1, r1, r0
 8009d5e:	6021      	streq	r1, [r4, #0]
 8009d60:	e7ed      	b.n	8009d3e <_free_r+0x1e>
 8009d62:	461a      	mov	r2, r3
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	b10b      	cbz	r3, 8009d6c <_free_r+0x4c>
 8009d68:	42a3      	cmp	r3, r4
 8009d6a:	d9fa      	bls.n	8009d62 <_free_r+0x42>
 8009d6c:	6811      	ldr	r1, [r2, #0]
 8009d6e:	1850      	adds	r0, r2, r1
 8009d70:	42a0      	cmp	r0, r4
 8009d72:	d10b      	bne.n	8009d8c <_free_r+0x6c>
 8009d74:	6820      	ldr	r0, [r4, #0]
 8009d76:	4401      	add	r1, r0
 8009d78:	1850      	adds	r0, r2, r1
 8009d7a:	4283      	cmp	r3, r0
 8009d7c:	6011      	str	r1, [r2, #0]
 8009d7e:	d1e0      	bne.n	8009d42 <_free_r+0x22>
 8009d80:	6818      	ldr	r0, [r3, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	6053      	str	r3, [r2, #4]
 8009d86:	4408      	add	r0, r1
 8009d88:	6010      	str	r0, [r2, #0]
 8009d8a:	e7da      	b.n	8009d42 <_free_r+0x22>
 8009d8c:	d902      	bls.n	8009d94 <_free_r+0x74>
 8009d8e:	230c      	movs	r3, #12
 8009d90:	602b      	str	r3, [r5, #0]
 8009d92:	e7d6      	b.n	8009d42 <_free_r+0x22>
 8009d94:	6820      	ldr	r0, [r4, #0]
 8009d96:	1821      	adds	r1, r4, r0
 8009d98:	428b      	cmp	r3, r1
 8009d9a:	bf04      	itt	eq
 8009d9c:	6819      	ldreq	r1, [r3, #0]
 8009d9e:	685b      	ldreq	r3, [r3, #4]
 8009da0:	6063      	str	r3, [r4, #4]
 8009da2:	bf04      	itt	eq
 8009da4:	1809      	addeq	r1, r1, r0
 8009da6:	6021      	streq	r1, [r4, #0]
 8009da8:	6054      	str	r4, [r2, #4]
 8009daa:	e7ca      	b.n	8009d42 <_free_r+0x22>
 8009dac:	bd38      	pop	{r3, r4, r5, pc}
 8009dae:	bf00      	nop
 8009db0:	2000a738 	.word	0x2000a738

08009db4 <malloc>:
 8009db4:	4b02      	ldr	r3, [pc, #8]	@ (8009dc0 <malloc+0xc>)
 8009db6:	4601      	mov	r1, r0
 8009db8:	6818      	ldr	r0, [r3, #0]
 8009dba:	f000 b825 	b.w	8009e08 <_malloc_r>
 8009dbe:	bf00      	nop
 8009dc0:	200001fc 	.word	0x200001fc

08009dc4 <sbrk_aligned>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8009e04 <sbrk_aligned+0x40>)
 8009dc8:	460c      	mov	r4, r1
 8009dca:	6831      	ldr	r1, [r6, #0]
 8009dcc:	4605      	mov	r5, r0
 8009dce:	b911      	cbnz	r1, 8009dd6 <sbrk_aligned+0x12>
 8009dd0:	f000 fe3e 	bl	800aa50 <_sbrk_r>
 8009dd4:	6030      	str	r0, [r6, #0]
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f000 fe39 	bl	800aa50 <_sbrk_r>
 8009dde:	1c43      	adds	r3, r0, #1
 8009de0:	d103      	bne.n	8009dea <sbrk_aligned+0x26>
 8009de2:	f04f 34ff 	mov.w	r4, #4294967295
 8009de6:	4620      	mov	r0, r4
 8009de8:	bd70      	pop	{r4, r5, r6, pc}
 8009dea:	1cc4      	adds	r4, r0, #3
 8009dec:	f024 0403 	bic.w	r4, r4, #3
 8009df0:	42a0      	cmp	r0, r4
 8009df2:	d0f8      	beq.n	8009de6 <sbrk_aligned+0x22>
 8009df4:	1a21      	subs	r1, r4, r0
 8009df6:	4628      	mov	r0, r5
 8009df8:	f000 fe2a 	bl	800aa50 <_sbrk_r>
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d1f2      	bne.n	8009de6 <sbrk_aligned+0x22>
 8009e00:	e7ef      	b.n	8009de2 <sbrk_aligned+0x1e>
 8009e02:	bf00      	nop
 8009e04:	2000a734 	.word	0x2000a734

08009e08 <_malloc_r>:
 8009e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e0c:	1ccd      	adds	r5, r1, #3
 8009e0e:	f025 0503 	bic.w	r5, r5, #3
 8009e12:	3508      	adds	r5, #8
 8009e14:	2d0c      	cmp	r5, #12
 8009e16:	bf38      	it	cc
 8009e18:	250c      	movcc	r5, #12
 8009e1a:	2d00      	cmp	r5, #0
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	db01      	blt.n	8009e24 <_malloc_r+0x1c>
 8009e20:	42a9      	cmp	r1, r5
 8009e22:	d904      	bls.n	8009e2e <_malloc_r+0x26>
 8009e24:	230c      	movs	r3, #12
 8009e26:	6033      	str	r3, [r6, #0]
 8009e28:	2000      	movs	r0, #0
 8009e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f04 <_malloc_r+0xfc>
 8009e32:	f000 f869 	bl	8009f08 <__malloc_lock>
 8009e36:	f8d8 3000 	ldr.w	r3, [r8]
 8009e3a:	461c      	mov	r4, r3
 8009e3c:	bb44      	cbnz	r4, 8009e90 <_malloc_r+0x88>
 8009e3e:	4629      	mov	r1, r5
 8009e40:	4630      	mov	r0, r6
 8009e42:	f7ff ffbf 	bl	8009dc4 <sbrk_aligned>
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	4604      	mov	r4, r0
 8009e4a:	d158      	bne.n	8009efe <_malloc_r+0xf6>
 8009e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8009e50:	4627      	mov	r7, r4
 8009e52:	2f00      	cmp	r7, #0
 8009e54:	d143      	bne.n	8009ede <_malloc_r+0xd6>
 8009e56:	2c00      	cmp	r4, #0
 8009e58:	d04b      	beq.n	8009ef2 <_malloc_r+0xea>
 8009e5a:	6823      	ldr	r3, [r4, #0]
 8009e5c:	4639      	mov	r1, r7
 8009e5e:	4630      	mov	r0, r6
 8009e60:	eb04 0903 	add.w	r9, r4, r3
 8009e64:	f000 fdf4 	bl	800aa50 <_sbrk_r>
 8009e68:	4581      	cmp	r9, r0
 8009e6a:	d142      	bne.n	8009ef2 <_malloc_r+0xea>
 8009e6c:	6821      	ldr	r1, [r4, #0]
 8009e6e:	1a6d      	subs	r5, r5, r1
 8009e70:	4629      	mov	r1, r5
 8009e72:	4630      	mov	r0, r6
 8009e74:	f7ff ffa6 	bl	8009dc4 <sbrk_aligned>
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d03a      	beq.n	8009ef2 <_malloc_r+0xea>
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	442b      	add	r3, r5
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	f8d8 3000 	ldr.w	r3, [r8]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	bb62      	cbnz	r2, 8009ee4 <_malloc_r+0xdc>
 8009e8a:	f8c8 7000 	str.w	r7, [r8]
 8009e8e:	e00f      	b.n	8009eb0 <_malloc_r+0xa8>
 8009e90:	6822      	ldr	r2, [r4, #0]
 8009e92:	1b52      	subs	r2, r2, r5
 8009e94:	d420      	bmi.n	8009ed8 <_malloc_r+0xd0>
 8009e96:	2a0b      	cmp	r2, #11
 8009e98:	d917      	bls.n	8009eca <_malloc_r+0xc2>
 8009e9a:	1961      	adds	r1, r4, r5
 8009e9c:	42a3      	cmp	r3, r4
 8009e9e:	6025      	str	r5, [r4, #0]
 8009ea0:	bf18      	it	ne
 8009ea2:	6059      	strne	r1, [r3, #4]
 8009ea4:	6863      	ldr	r3, [r4, #4]
 8009ea6:	bf08      	it	eq
 8009ea8:	f8c8 1000 	streq.w	r1, [r8]
 8009eac:	5162      	str	r2, [r4, r5]
 8009eae:	604b      	str	r3, [r1, #4]
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f000 f82f 	bl	8009f14 <__malloc_unlock>
 8009eb6:	f104 000b 	add.w	r0, r4, #11
 8009eba:	1d23      	adds	r3, r4, #4
 8009ebc:	f020 0007 	bic.w	r0, r0, #7
 8009ec0:	1ac2      	subs	r2, r0, r3
 8009ec2:	bf1c      	itt	ne
 8009ec4:	1a1b      	subne	r3, r3, r0
 8009ec6:	50a3      	strne	r3, [r4, r2]
 8009ec8:	e7af      	b.n	8009e2a <_malloc_r+0x22>
 8009eca:	6862      	ldr	r2, [r4, #4]
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	bf0c      	ite	eq
 8009ed0:	f8c8 2000 	streq.w	r2, [r8]
 8009ed4:	605a      	strne	r2, [r3, #4]
 8009ed6:	e7eb      	b.n	8009eb0 <_malloc_r+0xa8>
 8009ed8:	4623      	mov	r3, r4
 8009eda:	6864      	ldr	r4, [r4, #4]
 8009edc:	e7ae      	b.n	8009e3c <_malloc_r+0x34>
 8009ede:	463c      	mov	r4, r7
 8009ee0:	687f      	ldr	r7, [r7, #4]
 8009ee2:	e7b6      	b.n	8009e52 <_malloc_r+0x4a>
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	d1fb      	bne.n	8009ee4 <_malloc_r+0xdc>
 8009eec:	2300      	movs	r3, #0
 8009eee:	6053      	str	r3, [r2, #4]
 8009ef0:	e7de      	b.n	8009eb0 <_malloc_r+0xa8>
 8009ef2:	230c      	movs	r3, #12
 8009ef4:	6033      	str	r3, [r6, #0]
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f000 f80c 	bl	8009f14 <__malloc_unlock>
 8009efc:	e794      	b.n	8009e28 <_malloc_r+0x20>
 8009efe:	6005      	str	r5, [r0, #0]
 8009f00:	e7d6      	b.n	8009eb0 <_malloc_r+0xa8>
 8009f02:	bf00      	nop
 8009f04:	2000a738 	.word	0x2000a738

08009f08 <__malloc_lock>:
 8009f08:	4801      	ldr	r0, [pc, #4]	@ (8009f10 <__malloc_lock+0x8>)
 8009f0a:	f7ff b8ac 	b.w	8009066 <__retarget_lock_acquire_recursive>
 8009f0e:	bf00      	nop
 8009f10:	2000a730 	.word	0x2000a730

08009f14 <__malloc_unlock>:
 8009f14:	4801      	ldr	r0, [pc, #4]	@ (8009f1c <__malloc_unlock+0x8>)
 8009f16:	f7ff b8a7 	b.w	8009068 <__retarget_lock_release_recursive>
 8009f1a:	bf00      	nop
 8009f1c:	2000a730 	.word	0x2000a730

08009f20 <_Balloc>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	69c6      	ldr	r6, [r0, #28]
 8009f24:	4604      	mov	r4, r0
 8009f26:	460d      	mov	r5, r1
 8009f28:	b976      	cbnz	r6, 8009f48 <_Balloc+0x28>
 8009f2a:	2010      	movs	r0, #16
 8009f2c:	f7ff ff42 	bl	8009db4 <malloc>
 8009f30:	4602      	mov	r2, r0
 8009f32:	61e0      	str	r0, [r4, #28]
 8009f34:	b920      	cbnz	r0, 8009f40 <_Balloc+0x20>
 8009f36:	4b18      	ldr	r3, [pc, #96]	@ (8009f98 <_Balloc+0x78>)
 8009f38:	4818      	ldr	r0, [pc, #96]	@ (8009f9c <_Balloc+0x7c>)
 8009f3a:	216b      	movs	r1, #107	@ 0x6b
 8009f3c:	f000 fda6 	bl	800aa8c <__assert_func>
 8009f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f44:	6006      	str	r6, [r0, #0]
 8009f46:	60c6      	str	r6, [r0, #12]
 8009f48:	69e6      	ldr	r6, [r4, #28]
 8009f4a:	68f3      	ldr	r3, [r6, #12]
 8009f4c:	b183      	cbz	r3, 8009f70 <_Balloc+0x50>
 8009f4e:	69e3      	ldr	r3, [r4, #28]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f56:	b9b8      	cbnz	r0, 8009f88 <_Balloc+0x68>
 8009f58:	2101      	movs	r1, #1
 8009f5a:	fa01 f605 	lsl.w	r6, r1, r5
 8009f5e:	1d72      	adds	r2, r6, #5
 8009f60:	0092      	lsls	r2, r2, #2
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 fdb0 	bl	800aac8 <_calloc_r>
 8009f68:	b160      	cbz	r0, 8009f84 <_Balloc+0x64>
 8009f6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f6e:	e00e      	b.n	8009f8e <_Balloc+0x6e>
 8009f70:	2221      	movs	r2, #33	@ 0x21
 8009f72:	2104      	movs	r1, #4
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 fda7 	bl	800aac8 <_calloc_r>
 8009f7a:	69e3      	ldr	r3, [r4, #28]
 8009f7c:	60f0      	str	r0, [r6, #12]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1e4      	bne.n	8009f4e <_Balloc+0x2e>
 8009f84:	2000      	movs	r0, #0
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	6802      	ldr	r2, [r0, #0]
 8009f8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f8e:	2300      	movs	r3, #0
 8009f90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f94:	e7f7      	b.n	8009f86 <_Balloc+0x66>
 8009f96:	bf00      	nop
 8009f98:	0800c2c9 	.word	0x0800c2c9
 8009f9c:	0800c349 	.word	0x0800c349

08009fa0 <_Bfree>:
 8009fa0:	b570      	push	{r4, r5, r6, lr}
 8009fa2:	69c6      	ldr	r6, [r0, #28]
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	b976      	cbnz	r6, 8009fc8 <_Bfree+0x28>
 8009faa:	2010      	movs	r0, #16
 8009fac:	f7ff ff02 	bl	8009db4 <malloc>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	61e8      	str	r0, [r5, #28]
 8009fb4:	b920      	cbnz	r0, 8009fc0 <_Bfree+0x20>
 8009fb6:	4b09      	ldr	r3, [pc, #36]	@ (8009fdc <_Bfree+0x3c>)
 8009fb8:	4809      	ldr	r0, [pc, #36]	@ (8009fe0 <_Bfree+0x40>)
 8009fba:	218f      	movs	r1, #143	@ 0x8f
 8009fbc:	f000 fd66 	bl	800aa8c <__assert_func>
 8009fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fc4:	6006      	str	r6, [r0, #0]
 8009fc6:	60c6      	str	r6, [r0, #12]
 8009fc8:	b13c      	cbz	r4, 8009fda <_Bfree+0x3a>
 8009fca:	69eb      	ldr	r3, [r5, #28]
 8009fcc:	6862      	ldr	r2, [r4, #4]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fd4:	6021      	str	r1, [r4, #0]
 8009fd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fda:	bd70      	pop	{r4, r5, r6, pc}
 8009fdc:	0800c2c9 	.word	0x0800c2c9
 8009fe0:	0800c349 	.word	0x0800c349

08009fe4 <__multadd>:
 8009fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe8:	690d      	ldr	r5, [r1, #16]
 8009fea:	4607      	mov	r7, r0
 8009fec:	460c      	mov	r4, r1
 8009fee:	461e      	mov	r6, r3
 8009ff0:	f101 0c14 	add.w	ip, r1, #20
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	f8dc 3000 	ldr.w	r3, [ip]
 8009ffa:	b299      	uxth	r1, r3
 8009ffc:	fb02 6101 	mla	r1, r2, r1, r6
 800a000:	0c1e      	lsrs	r6, r3, #16
 800a002:	0c0b      	lsrs	r3, r1, #16
 800a004:	fb02 3306 	mla	r3, r2, r6, r3
 800a008:	b289      	uxth	r1, r1
 800a00a:	3001      	adds	r0, #1
 800a00c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a010:	4285      	cmp	r5, r0
 800a012:	f84c 1b04 	str.w	r1, [ip], #4
 800a016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a01a:	dcec      	bgt.n	8009ff6 <__multadd+0x12>
 800a01c:	b30e      	cbz	r6, 800a062 <__multadd+0x7e>
 800a01e:	68a3      	ldr	r3, [r4, #8]
 800a020:	42ab      	cmp	r3, r5
 800a022:	dc19      	bgt.n	800a058 <__multadd+0x74>
 800a024:	6861      	ldr	r1, [r4, #4]
 800a026:	4638      	mov	r0, r7
 800a028:	3101      	adds	r1, #1
 800a02a:	f7ff ff79 	bl	8009f20 <_Balloc>
 800a02e:	4680      	mov	r8, r0
 800a030:	b928      	cbnz	r0, 800a03e <__multadd+0x5a>
 800a032:	4602      	mov	r2, r0
 800a034:	4b0c      	ldr	r3, [pc, #48]	@ (800a068 <__multadd+0x84>)
 800a036:	480d      	ldr	r0, [pc, #52]	@ (800a06c <__multadd+0x88>)
 800a038:	21ba      	movs	r1, #186	@ 0xba
 800a03a:	f000 fd27 	bl	800aa8c <__assert_func>
 800a03e:	6922      	ldr	r2, [r4, #16]
 800a040:	3202      	adds	r2, #2
 800a042:	f104 010c 	add.w	r1, r4, #12
 800a046:	0092      	lsls	r2, r2, #2
 800a048:	300c      	adds	r0, #12
 800a04a:	f000 fd11 	bl	800aa70 <memcpy>
 800a04e:	4621      	mov	r1, r4
 800a050:	4638      	mov	r0, r7
 800a052:	f7ff ffa5 	bl	8009fa0 <_Bfree>
 800a056:	4644      	mov	r4, r8
 800a058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a05c:	3501      	adds	r5, #1
 800a05e:	615e      	str	r6, [r3, #20]
 800a060:	6125      	str	r5, [r4, #16]
 800a062:	4620      	mov	r0, r4
 800a064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a068:	0800c338 	.word	0x0800c338
 800a06c:	0800c349 	.word	0x0800c349

0800a070 <__hi0bits>:
 800a070:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a074:	4603      	mov	r3, r0
 800a076:	bf36      	itet	cc
 800a078:	0403      	lslcc	r3, r0, #16
 800a07a:	2000      	movcs	r0, #0
 800a07c:	2010      	movcc	r0, #16
 800a07e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a082:	bf3c      	itt	cc
 800a084:	021b      	lslcc	r3, r3, #8
 800a086:	3008      	addcc	r0, #8
 800a088:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a08c:	bf3c      	itt	cc
 800a08e:	011b      	lslcc	r3, r3, #4
 800a090:	3004      	addcc	r0, #4
 800a092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a096:	bf3c      	itt	cc
 800a098:	009b      	lslcc	r3, r3, #2
 800a09a:	3002      	addcc	r0, #2
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	db05      	blt.n	800a0ac <__hi0bits+0x3c>
 800a0a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a0a4:	f100 0001 	add.w	r0, r0, #1
 800a0a8:	bf08      	it	eq
 800a0aa:	2020      	moveq	r0, #32
 800a0ac:	4770      	bx	lr

0800a0ae <__lo0bits>:
 800a0ae:	6803      	ldr	r3, [r0, #0]
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	f013 0007 	ands.w	r0, r3, #7
 800a0b6:	d00b      	beq.n	800a0d0 <__lo0bits+0x22>
 800a0b8:	07d9      	lsls	r1, r3, #31
 800a0ba:	d421      	bmi.n	800a100 <__lo0bits+0x52>
 800a0bc:	0798      	lsls	r0, r3, #30
 800a0be:	bf49      	itett	mi
 800a0c0:	085b      	lsrmi	r3, r3, #1
 800a0c2:	089b      	lsrpl	r3, r3, #2
 800a0c4:	2001      	movmi	r0, #1
 800a0c6:	6013      	strmi	r3, [r2, #0]
 800a0c8:	bf5c      	itt	pl
 800a0ca:	6013      	strpl	r3, [r2, #0]
 800a0cc:	2002      	movpl	r0, #2
 800a0ce:	4770      	bx	lr
 800a0d0:	b299      	uxth	r1, r3
 800a0d2:	b909      	cbnz	r1, 800a0d8 <__lo0bits+0x2a>
 800a0d4:	0c1b      	lsrs	r3, r3, #16
 800a0d6:	2010      	movs	r0, #16
 800a0d8:	b2d9      	uxtb	r1, r3
 800a0da:	b909      	cbnz	r1, 800a0e0 <__lo0bits+0x32>
 800a0dc:	3008      	adds	r0, #8
 800a0de:	0a1b      	lsrs	r3, r3, #8
 800a0e0:	0719      	lsls	r1, r3, #28
 800a0e2:	bf04      	itt	eq
 800a0e4:	091b      	lsreq	r3, r3, #4
 800a0e6:	3004      	addeq	r0, #4
 800a0e8:	0799      	lsls	r1, r3, #30
 800a0ea:	bf04      	itt	eq
 800a0ec:	089b      	lsreq	r3, r3, #2
 800a0ee:	3002      	addeq	r0, #2
 800a0f0:	07d9      	lsls	r1, r3, #31
 800a0f2:	d403      	bmi.n	800a0fc <__lo0bits+0x4e>
 800a0f4:	085b      	lsrs	r3, r3, #1
 800a0f6:	f100 0001 	add.w	r0, r0, #1
 800a0fa:	d003      	beq.n	800a104 <__lo0bits+0x56>
 800a0fc:	6013      	str	r3, [r2, #0]
 800a0fe:	4770      	bx	lr
 800a100:	2000      	movs	r0, #0
 800a102:	4770      	bx	lr
 800a104:	2020      	movs	r0, #32
 800a106:	4770      	bx	lr

0800a108 <__i2b>:
 800a108:	b510      	push	{r4, lr}
 800a10a:	460c      	mov	r4, r1
 800a10c:	2101      	movs	r1, #1
 800a10e:	f7ff ff07 	bl	8009f20 <_Balloc>
 800a112:	4602      	mov	r2, r0
 800a114:	b928      	cbnz	r0, 800a122 <__i2b+0x1a>
 800a116:	4b05      	ldr	r3, [pc, #20]	@ (800a12c <__i2b+0x24>)
 800a118:	4805      	ldr	r0, [pc, #20]	@ (800a130 <__i2b+0x28>)
 800a11a:	f240 1145 	movw	r1, #325	@ 0x145
 800a11e:	f000 fcb5 	bl	800aa8c <__assert_func>
 800a122:	2301      	movs	r3, #1
 800a124:	6144      	str	r4, [r0, #20]
 800a126:	6103      	str	r3, [r0, #16]
 800a128:	bd10      	pop	{r4, pc}
 800a12a:	bf00      	nop
 800a12c:	0800c338 	.word	0x0800c338
 800a130:	0800c349 	.word	0x0800c349

0800a134 <__multiply>:
 800a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a138:	4617      	mov	r7, r2
 800a13a:	690a      	ldr	r2, [r1, #16]
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	429a      	cmp	r2, r3
 800a140:	bfa8      	it	ge
 800a142:	463b      	movge	r3, r7
 800a144:	4689      	mov	r9, r1
 800a146:	bfa4      	itt	ge
 800a148:	460f      	movge	r7, r1
 800a14a:	4699      	movge	r9, r3
 800a14c:	693d      	ldr	r5, [r7, #16]
 800a14e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	6879      	ldr	r1, [r7, #4]
 800a156:	eb05 060a 	add.w	r6, r5, sl
 800a15a:	42b3      	cmp	r3, r6
 800a15c:	b085      	sub	sp, #20
 800a15e:	bfb8      	it	lt
 800a160:	3101      	addlt	r1, #1
 800a162:	f7ff fedd 	bl	8009f20 <_Balloc>
 800a166:	b930      	cbnz	r0, 800a176 <__multiply+0x42>
 800a168:	4602      	mov	r2, r0
 800a16a:	4b41      	ldr	r3, [pc, #260]	@ (800a270 <__multiply+0x13c>)
 800a16c:	4841      	ldr	r0, [pc, #260]	@ (800a274 <__multiply+0x140>)
 800a16e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a172:	f000 fc8b 	bl	800aa8c <__assert_func>
 800a176:	f100 0414 	add.w	r4, r0, #20
 800a17a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a17e:	4623      	mov	r3, r4
 800a180:	2200      	movs	r2, #0
 800a182:	4573      	cmp	r3, lr
 800a184:	d320      	bcc.n	800a1c8 <__multiply+0x94>
 800a186:	f107 0814 	add.w	r8, r7, #20
 800a18a:	f109 0114 	add.w	r1, r9, #20
 800a18e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a192:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a196:	9302      	str	r3, [sp, #8]
 800a198:	1beb      	subs	r3, r5, r7
 800a19a:	3b15      	subs	r3, #21
 800a19c:	f023 0303 	bic.w	r3, r3, #3
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	3715      	adds	r7, #21
 800a1a4:	42bd      	cmp	r5, r7
 800a1a6:	bf38      	it	cc
 800a1a8:	2304      	movcc	r3, #4
 800a1aa:	9301      	str	r3, [sp, #4]
 800a1ac:	9b02      	ldr	r3, [sp, #8]
 800a1ae:	9103      	str	r1, [sp, #12]
 800a1b0:	428b      	cmp	r3, r1
 800a1b2:	d80c      	bhi.n	800a1ce <__multiply+0x9a>
 800a1b4:	2e00      	cmp	r6, #0
 800a1b6:	dd03      	ble.n	800a1c0 <__multiply+0x8c>
 800a1b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d055      	beq.n	800a26c <__multiply+0x138>
 800a1c0:	6106      	str	r6, [r0, #16]
 800a1c2:	b005      	add	sp, #20
 800a1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c8:	f843 2b04 	str.w	r2, [r3], #4
 800a1cc:	e7d9      	b.n	800a182 <__multiply+0x4e>
 800a1ce:	f8b1 a000 	ldrh.w	sl, [r1]
 800a1d2:	f1ba 0f00 	cmp.w	sl, #0
 800a1d6:	d01f      	beq.n	800a218 <__multiply+0xe4>
 800a1d8:	46c4      	mov	ip, r8
 800a1da:	46a1      	mov	r9, r4
 800a1dc:	2700      	movs	r7, #0
 800a1de:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a1e2:	f8d9 3000 	ldr.w	r3, [r9]
 800a1e6:	fa1f fb82 	uxth.w	fp, r2
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800a1f0:	443b      	add	r3, r7
 800a1f2:	f8d9 7000 	ldr.w	r7, [r9]
 800a1f6:	0c12      	lsrs	r2, r2, #16
 800a1f8:	0c3f      	lsrs	r7, r7, #16
 800a1fa:	fb0a 7202 	mla	r2, sl, r2, r7
 800a1fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a202:	b29b      	uxth	r3, r3
 800a204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a208:	4565      	cmp	r5, ip
 800a20a:	f849 3b04 	str.w	r3, [r9], #4
 800a20e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a212:	d8e4      	bhi.n	800a1de <__multiply+0xaa>
 800a214:	9b01      	ldr	r3, [sp, #4]
 800a216:	50e7      	str	r7, [r4, r3]
 800a218:	9b03      	ldr	r3, [sp, #12]
 800a21a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a21e:	3104      	adds	r1, #4
 800a220:	f1b9 0f00 	cmp.w	r9, #0
 800a224:	d020      	beq.n	800a268 <__multiply+0x134>
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	4647      	mov	r7, r8
 800a22a:	46a4      	mov	ip, r4
 800a22c:	f04f 0a00 	mov.w	sl, #0
 800a230:	f8b7 b000 	ldrh.w	fp, [r7]
 800a234:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a238:	fb09 220b 	mla	r2, r9, fp, r2
 800a23c:	4452      	add	r2, sl
 800a23e:	b29b      	uxth	r3, r3
 800a240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a244:	f84c 3b04 	str.w	r3, [ip], #4
 800a248:	f857 3b04 	ldr.w	r3, [r7], #4
 800a24c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a250:	f8bc 3000 	ldrh.w	r3, [ip]
 800a254:	fb09 330a 	mla	r3, r9, sl, r3
 800a258:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a25c:	42bd      	cmp	r5, r7
 800a25e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a262:	d8e5      	bhi.n	800a230 <__multiply+0xfc>
 800a264:	9a01      	ldr	r2, [sp, #4]
 800a266:	50a3      	str	r3, [r4, r2]
 800a268:	3404      	adds	r4, #4
 800a26a:	e79f      	b.n	800a1ac <__multiply+0x78>
 800a26c:	3e01      	subs	r6, #1
 800a26e:	e7a1      	b.n	800a1b4 <__multiply+0x80>
 800a270:	0800c338 	.word	0x0800c338
 800a274:	0800c349 	.word	0x0800c349

0800a278 <__pow5mult>:
 800a278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a27c:	4615      	mov	r5, r2
 800a27e:	f012 0203 	ands.w	r2, r2, #3
 800a282:	4607      	mov	r7, r0
 800a284:	460e      	mov	r6, r1
 800a286:	d007      	beq.n	800a298 <__pow5mult+0x20>
 800a288:	4c25      	ldr	r4, [pc, #148]	@ (800a320 <__pow5mult+0xa8>)
 800a28a:	3a01      	subs	r2, #1
 800a28c:	2300      	movs	r3, #0
 800a28e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a292:	f7ff fea7 	bl	8009fe4 <__multadd>
 800a296:	4606      	mov	r6, r0
 800a298:	10ad      	asrs	r5, r5, #2
 800a29a:	d03d      	beq.n	800a318 <__pow5mult+0xa0>
 800a29c:	69fc      	ldr	r4, [r7, #28]
 800a29e:	b97c      	cbnz	r4, 800a2c0 <__pow5mult+0x48>
 800a2a0:	2010      	movs	r0, #16
 800a2a2:	f7ff fd87 	bl	8009db4 <malloc>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	61f8      	str	r0, [r7, #28]
 800a2aa:	b928      	cbnz	r0, 800a2b8 <__pow5mult+0x40>
 800a2ac:	4b1d      	ldr	r3, [pc, #116]	@ (800a324 <__pow5mult+0xac>)
 800a2ae:	481e      	ldr	r0, [pc, #120]	@ (800a328 <__pow5mult+0xb0>)
 800a2b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a2b4:	f000 fbea 	bl	800aa8c <__assert_func>
 800a2b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2bc:	6004      	str	r4, [r0, #0]
 800a2be:	60c4      	str	r4, [r0, #12]
 800a2c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a2c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2c8:	b94c      	cbnz	r4, 800a2de <__pow5mult+0x66>
 800a2ca:	f240 2171 	movw	r1, #625	@ 0x271
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	f7ff ff1a 	bl	800a108 <__i2b>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2da:	4604      	mov	r4, r0
 800a2dc:	6003      	str	r3, [r0, #0]
 800a2de:	f04f 0900 	mov.w	r9, #0
 800a2e2:	07eb      	lsls	r3, r5, #31
 800a2e4:	d50a      	bpl.n	800a2fc <__pow5mult+0x84>
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	f7ff ff22 	bl	800a134 <__multiply>
 800a2f0:	4631      	mov	r1, r6
 800a2f2:	4680      	mov	r8, r0
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	f7ff fe53 	bl	8009fa0 <_Bfree>
 800a2fa:	4646      	mov	r6, r8
 800a2fc:	106d      	asrs	r5, r5, #1
 800a2fe:	d00b      	beq.n	800a318 <__pow5mult+0xa0>
 800a300:	6820      	ldr	r0, [r4, #0]
 800a302:	b938      	cbnz	r0, 800a314 <__pow5mult+0x9c>
 800a304:	4622      	mov	r2, r4
 800a306:	4621      	mov	r1, r4
 800a308:	4638      	mov	r0, r7
 800a30a:	f7ff ff13 	bl	800a134 <__multiply>
 800a30e:	6020      	str	r0, [r4, #0]
 800a310:	f8c0 9000 	str.w	r9, [r0]
 800a314:	4604      	mov	r4, r0
 800a316:	e7e4      	b.n	800a2e2 <__pow5mult+0x6a>
 800a318:	4630      	mov	r0, r6
 800a31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a31e:	bf00      	nop
 800a320:	0800c3fc 	.word	0x0800c3fc
 800a324:	0800c2c9 	.word	0x0800c2c9
 800a328:	0800c349 	.word	0x0800c349

0800a32c <__lshift>:
 800a32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a330:	460c      	mov	r4, r1
 800a332:	6849      	ldr	r1, [r1, #4]
 800a334:	6923      	ldr	r3, [r4, #16]
 800a336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a33a:	68a3      	ldr	r3, [r4, #8]
 800a33c:	4607      	mov	r7, r0
 800a33e:	4691      	mov	r9, r2
 800a340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a344:	f108 0601 	add.w	r6, r8, #1
 800a348:	42b3      	cmp	r3, r6
 800a34a:	db0b      	blt.n	800a364 <__lshift+0x38>
 800a34c:	4638      	mov	r0, r7
 800a34e:	f7ff fde7 	bl	8009f20 <_Balloc>
 800a352:	4605      	mov	r5, r0
 800a354:	b948      	cbnz	r0, 800a36a <__lshift+0x3e>
 800a356:	4602      	mov	r2, r0
 800a358:	4b28      	ldr	r3, [pc, #160]	@ (800a3fc <__lshift+0xd0>)
 800a35a:	4829      	ldr	r0, [pc, #164]	@ (800a400 <__lshift+0xd4>)
 800a35c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a360:	f000 fb94 	bl	800aa8c <__assert_func>
 800a364:	3101      	adds	r1, #1
 800a366:	005b      	lsls	r3, r3, #1
 800a368:	e7ee      	b.n	800a348 <__lshift+0x1c>
 800a36a:	2300      	movs	r3, #0
 800a36c:	f100 0114 	add.w	r1, r0, #20
 800a370:	f100 0210 	add.w	r2, r0, #16
 800a374:	4618      	mov	r0, r3
 800a376:	4553      	cmp	r3, sl
 800a378:	db33      	blt.n	800a3e2 <__lshift+0xb6>
 800a37a:	6920      	ldr	r0, [r4, #16]
 800a37c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a380:	f104 0314 	add.w	r3, r4, #20
 800a384:	f019 091f 	ands.w	r9, r9, #31
 800a388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a38c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a390:	d02b      	beq.n	800a3ea <__lshift+0xbe>
 800a392:	f1c9 0e20 	rsb	lr, r9, #32
 800a396:	468a      	mov	sl, r1
 800a398:	2200      	movs	r2, #0
 800a39a:	6818      	ldr	r0, [r3, #0]
 800a39c:	fa00 f009 	lsl.w	r0, r0, r9
 800a3a0:	4310      	orrs	r0, r2
 800a3a2:	f84a 0b04 	str.w	r0, [sl], #4
 800a3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3aa:	459c      	cmp	ip, r3
 800a3ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3b0:	d8f3      	bhi.n	800a39a <__lshift+0x6e>
 800a3b2:	ebac 0304 	sub.w	r3, ip, r4
 800a3b6:	3b15      	subs	r3, #21
 800a3b8:	f023 0303 	bic.w	r3, r3, #3
 800a3bc:	3304      	adds	r3, #4
 800a3be:	f104 0015 	add.w	r0, r4, #21
 800a3c2:	4560      	cmp	r0, ip
 800a3c4:	bf88      	it	hi
 800a3c6:	2304      	movhi	r3, #4
 800a3c8:	50ca      	str	r2, [r1, r3]
 800a3ca:	b10a      	cbz	r2, 800a3d0 <__lshift+0xa4>
 800a3cc:	f108 0602 	add.w	r6, r8, #2
 800a3d0:	3e01      	subs	r6, #1
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	612e      	str	r6, [r5, #16]
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	f7ff fde2 	bl	8009fa0 <_Bfree>
 800a3dc:	4628      	mov	r0, r5
 800a3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	e7c5      	b.n	800a376 <__lshift+0x4a>
 800a3ea:	3904      	subs	r1, #4
 800a3ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3f4:	459c      	cmp	ip, r3
 800a3f6:	d8f9      	bhi.n	800a3ec <__lshift+0xc0>
 800a3f8:	e7ea      	b.n	800a3d0 <__lshift+0xa4>
 800a3fa:	bf00      	nop
 800a3fc:	0800c338 	.word	0x0800c338
 800a400:	0800c349 	.word	0x0800c349

0800a404 <__mcmp>:
 800a404:	690a      	ldr	r2, [r1, #16]
 800a406:	4603      	mov	r3, r0
 800a408:	6900      	ldr	r0, [r0, #16]
 800a40a:	1a80      	subs	r0, r0, r2
 800a40c:	b530      	push	{r4, r5, lr}
 800a40e:	d10e      	bne.n	800a42e <__mcmp+0x2a>
 800a410:	3314      	adds	r3, #20
 800a412:	3114      	adds	r1, #20
 800a414:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a418:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a41c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a424:	4295      	cmp	r5, r2
 800a426:	d003      	beq.n	800a430 <__mcmp+0x2c>
 800a428:	d205      	bcs.n	800a436 <__mcmp+0x32>
 800a42a:	f04f 30ff 	mov.w	r0, #4294967295
 800a42e:	bd30      	pop	{r4, r5, pc}
 800a430:	42a3      	cmp	r3, r4
 800a432:	d3f3      	bcc.n	800a41c <__mcmp+0x18>
 800a434:	e7fb      	b.n	800a42e <__mcmp+0x2a>
 800a436:	2001      	movs	r0, #1
 800a438:	e7f9      	b.n	800a42e <__mcmp+0x2a>
	...

0800a43c <__mdiff>:
 800a43c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a440:	4689      	mov	r9, r1
 800a442:	4606      	mov	r6, r0
 800a444:	4611      	mov	r1, r2
 800a446:	4648      	mov	r0, r9
 800a448:	4614      	mov	r4, r2
 800a44a:	f7ff ffdb 	bl	800a404 <__mcmp>
 800a44e:	1e05      	subs	r5, r0, #0
 800a450:	d112      	bne.n	800a478 <__mdiff+0x3c>
 800a452:	4629      	mov	r1, r5
 800a454:	4630      	mov	r0, r6
 800a456:	f7ff fd63 	bl	8009f20 <_Balloc>
 800a45a:	4602      	mov	r2, r0
 800a45c:	b928      	cbnz	r0, 800a46a <__mdiff+0x2e>
 800a45e:	4b3f      	ldr	r3, [pc, #252]	@ (800a55c <__mdiff+0x120>)
 800a460:	f240 2137 	movw	r1, #567	@ 0x237
 800a464:	483e      	ldr	r0, [pc, #248]	@ (800a560 <__mdiff+0x124>)
 800a466:	f000 fb11 	bl	800aa8c <__assert_func>
 800a46a:	2301      	movs	r3, #1
 800a46c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a470:	4610      	mov	r0, r2
 800a472:	b003      	add	sp, #12
 800a474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a478:	bfbc      	itt	lt
 800a47a:	464b      	movlt	r3, r9
 800a47c:	46a1      	movlt	r9, r4
 800a47e:	4630      	mov	r0, r6
 800a480:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a484:	bfba      	itte	lt
 800a486:	461c      	movlt	r4, r3
 800a488:	2501      	movlt	r5, #1
 800a48a:	2500      	movge	r5, #0
 800a48c:	f7ff fd48 	bl	8009f20 <_Balloc>
 800a490:	4602      	mov	r2, r0
 800a492:	b918      	cbnz	r0, 800a49c <__mdiff+0x60>
 800a494:	4b31      	ldr	r3, [pc, #196]	@ (800a55c <__mdiff+0x120>)
 800a496:	f240 2145 	movw	r1, #581	@ 0x245
 800a49a:	e7e3      	b.n	800a464 <__mdiff+0x28>
 800a49c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a4a0:	6926      	ldr	r6, [r4, #16]
 800a4a2:	60c5      	str	r5, [r0, #12]
 800a4a4:	f109 0310 	add.w	r3, r9, #16
 800a4a8:	f109 0514 	add.w	r5, r9, #20
 800a4ac:	f104 0e14 	add.w	lr, r4, #20
 800a4b0:	f100 0b14 	add.w	fp, r0, #20
 800a4b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a4b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	46d9      	mov	r9, fp
 800a4c0:	f04f 0c00 	mov.w	ip, #0
 800a4c4:	9b01      	ldr	r3, [sp, #4]
 800a4c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a4ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a4ce:	9301      	str	r3, [sp, #4]
 800a4d0:	fa1f f38a 	uxth.w	r3, sl
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	b283      	uxth	r3, r0
 800a4d8:	1acb      	subs	r3, r1, r3
 800a4da:	0c00      	lsrs	r0, r0, #16
 800a4dc:	4463      	add	r3, ip
 800a4de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a4e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a4ec:	4576      	cmp	r6, lr
 800a4ee:	f849 3b04 	str.w	r3, [r9], #4
 800a4f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4f6:	d8e5      	bhi.n	800a4c4 <__mdiff+0x88>
 800a4f8:	1b33      	subs	r3, r6, r4
 800a4fa:	3b15      	subs	r3, #21
 800a4fc:	f023 0303 	bic.w	r3, r3, #3
 800a500:	3415      	adds	r4, #21
 800a502:	3304      	adds	r3, #4
 800a504:	42a6      	cmp	r6, r4
 800a506:	bf38      	it	cc
 800a508:	2304      	movcc	r3, #4
 800a50a:	441d      	add	r5, r3
 800a50c:	445b      	add	r3, fp
 800a50e:	461e      	mov	r6, r3
 800a510:	462c      	mov	r4, r5
 800a512:	4544      	cmp	r4, r8
 800a514:	d30e      	bcc.n	800a534 <__mdiff+0xf8>
 800a516:	f108 0103 	add.w	r1, r8, #3
 800a51a:	1b49      	subs	r1, r1, r5
 800a51c:	f021 0103 	bic.w	r1, r1, #3
 800a520:	3d03      	subs	r5, #3
 800a522:	45a8      	cmp	r8, r5
 800a524:	bf38      	it	cc
 800a526:	2100      	movcc	r1, #0
 800a528:	440b      	add	r3, r1
 800a52a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a52e:	b191      	cbz	r1, 800a556 <__mdiff+0x11a>
 800a530:	6117      	str	r7, [r2, #16]
 800a532:	e79d      	b.n	800a470 <__mdiff+0x34>
 800a534:	f854 1b04 	ldr.w	r1, [r4], #4
 800a538:	46e6      	mov	lr, ip
 800a53a:	0c08      	lsrs	r0, r1, #16
 800a53c:	fa1c fc81 	uxtah	ip, ip, r1
 800a540:	4471      	add	r1, lr
 800a542:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a546:	b289      	uxth	r1, r1
 800a548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a54c:	f846 1b04 	str.w	r1, [r6], #4
 800a550:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a554:	e7dd      	b.n	800a512 <__mdiff+0xd6>
 800a556:	3f01      	subs	r7, #1
 800a558:	e7e7      	b.n	800a52a <__mdiff+0xee>
 800a55a:	bf00      	nop
 800a55c:	0800c338 	.word	0x0800c338
 800a560:	0800c349 	.word	0x0800c349

0800a564 <__d2b>:
 800a564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a568:	460f      	mov	r7, r1
 800a56a:	2101      	movs	r1, #1
 800a56c:	ec59 8b10 	vmov	r8, r9, d0
 800a570:	4616      	mov	r6, r2
 800a572:	f7ff fcd5 	bl	8009f20 <_Balloc>
 800a576:	4604      	mov	r4, r0
 800a578:	b930      	cbnz	r0, 800a588 <__d2b+0x24>
 800a57a:	4602      	mov	r2, r0
 800a57c:	4b23      	ldr	r3, [pc, #140]	@ (800a60c <__d2b+0xa8>)
 800a57e:	4824      	ldr	r0, [pc, #144]	@ (800a610 <__d2b+0xac>)
 800a580:	f240 310f 	movw	r1, #783	@ 0x30f
 800a584:	f000 fa82 	bl	800aa8c <__assert_func>
 800a588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a58c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a590:	b10d      	cbz	r5, 800a596 <__d2b+0x32>
 800a592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a596:	9301      	str	r3, [sp, #4]
 800a598:	f1b8 0300 	subs.w	r3, r8, #0
 800a59c:	d023      	beq.n	800a5e6 <__d2b+0x82>
 800a59e:	4668      	mov	r0, sp
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	f7ff fd84 	bl	800a0ae <__lo0bits>
 800a5a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a5aa:	b1d0      	cbz	r0, 800a5e2 <__d2b+0x7e>
 800a5ac:	f1c0 0320 	rsb	r3, r0, #32
 800a5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b4:	430b      	orrs	r3, r1
 800a5b6:	40c2      	lsrs	r2, r0
 800a5b8:	6163      	str	r3, [r4, #20]
 800a5ba:	9201      	str	r2, [sp, #4]
 800a5bc:	9b01      	ldr	r3, [sp, #4]
 800a5be:	61a3      	str	r3, [r4, #24]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	bf0c      	ite	eq
 800a5c4:	2201      	moveq	r2, #1
 800a5c6:	2202      	movne	r2, #2
 800a5c8:	6122      	str	r2, [r4, #16]
 800a5ca:	b1a5      	cbz	r5, 800a5f6 <__d2b+0x92>
 800a5cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a5d0:	4405      	add	r5, r0
 800a5d2:	603d      	str	r5, [r7, #0]
 800a5d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a5d8:	6030      	str	r0, [r6, #0]
 800a5da:	4620      	mov	r0, r4
 800a5dc:	b003      	add	sp, #12
 800a5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5e2:	6161      	str	r1, [r4, #20]
 800a5e4:	e7ea      	b.n	800a5bc <__d2b+0x58>
 800a5e6:	a801      	add	r0, sp, #4
 800a5e8:	f7ff fd61 	bl	800a0ae <__lo0bits>
 800a5ec:	9b01      	ldr	r3, [sp, #4]
 800a5ee:	6163      	str	r3, [r4, #20]
 800a5f0:	3020      	adds	r0, #32
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	e7e8      	b.n	800a5c8 <__d2b+0x64>
 800a5f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a5fe:	6038      	str	r0, [r7, #0]
 800a600:	6918      	ldr	r0, [r3, #16]
 800a602:	f7ff fd35 	bl	800a070 <__hi0bits>
 800a606:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a60a:	e7e5      	b.n	800a5d8 <__d2b+0x74>
 800a60c:	0800c338 	.word	0x0800c338
 800a610:	0800c349 	.word	0x0800c349

0800a614 <__ssputs_r>:
 800a614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a618:	688e      	ldr	r6, [r1, #8]
 800a61a:	461f      	mov	r7, r3
 800a61c:	42be      	cmp	r6, r7
 800a61e:	680b      	ldr	r3, [r1, #0]
 800a620:	4682      	mov	sl, r0
 800a622:	460c      	mov	r4, r1
 800a624:	4690      	mov	r8, r2
 800a626:	d82d      	bhi.n	800a684 <__ssputs_r+0x70>
 800a628:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a62c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a630:	d026      	beq.n	800a680 <__ssputs_r+0x6c>
 800a632:	6965      	ldr	r5, [r4, #20]
 800a634:	6909      	ldr	r1, [r1, #16]
 800a636:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a63a:	eba3 0901 	sub.w	r9, r3, r1
 800a63e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a642:	1c7b      	adds	r3, r7, #1
 800a644:	444b      	add	r3, r9
 800a646:	106d      	asrs	r5, r5, #1
 800a648:	429d      	cmp	r5, r3
 800a64a:	bf38      	it	cc
 800a64c:	461d      	movcc	r5, r3
 800a64e:	0553      	lsls	r3, r2, #21
 800a650:	d527      	bpl.n	800a6a2 <__ssputs_r+0x8e>
 800a652:	4629      	mov	r1, r5
 800a654:	f7ff fbd8 	bl	8009e08 <_malloc_r>
 800a658:	4606      	mov	r6, r0
 800a65a:	b360      	cbz	r0, 800a6b6 <__ssputs_r+0xa2>
 800a65c:	6921      	ldr	r1, [r4, #16]
 800a65e:	464a      	mov	r2, r9
 800a660:	f000 fa06 	bl	800aa70 <memcpy>
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a66a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a66e:	81a3      	strh	r3, [r4, #12]
 800a670:	6126      	str	r6, [r4, #16]
 800a672:	6165      	str	r5, [r4, #20]
 800a674:	444e      	add	r6, r9
 800a676:	eba5 0509 	sub.w	r5, r5, r9
 800a67a:	6026      	str	r6, [r4, #0]
 800a67c:	60a5      	str	r5, [r4, #8]
 800a67e:	463e      	mov	r6, r7
 800a680:	42be      	cmp	r6, r7
 800a682:	d900      	bls.n	800a686 <__ssputs_r+0x72>
 800a684:	463e      	mov	r6, r7
 800a686:	6820      	ldr	r0, [r4, #0]
 800a688:	4632      	mov	r2, r6
 800a68a:	4641      	mov	r1, r8
 800a68c:	f000 f9c6 	bl	800aa1c <memmove>
 800a690:	68a3      	ldr	r3, [r4, #8]
 800a692:	1b9b      	subs	r3, r3, r6
 800a694:	60a3      	str	r3, [r4, #8]
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	4433      	add	r3, r6
 800a69a:	6023      	str	r3, [r4, #0]
 800a69c:	2000      	movs	r0, #0
 800a69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a2:	462a      	mov	r2, r5
 800a6a4:	f000 fa36 	bl	800ab14 <_realloc_r>
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d1e0      	bne.n	800a670 <__ssputs_r+0x5c>
 800a6ae:	6921      	ldr	r1, [r4, #16]
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	f7ff fb35 	bl	8009d20 <_free_r>
 800a6b6:	230c      	movs	r3, #12
 800a6b8:	f8ca 3000 	str.w	r3, [sl]
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6c2:	81a3      	strh	r3, [r4, #12]
 800a6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c8:	e7e9      	b.n	800a69e <__ssputs_r+0x8a>
	...

0800a6cc <_svfiprintf_r>:
 800a6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d0:	4698      	mov	r8, r3
 800a6d2:	898b      	ldrh	r3, [r1, #12]
 800a6d4:	061b      	lsls	r3, r3, #24
 800a6d6:	b09d      	sub	sp, #116	@ 0x74
 800a6d8:	4607      	mov	r7, r0
 800a6da:	460d      	mov	r5, r1
 800a6dc:	4614      	mov	r4, r2
 800a6de:	d510      	bpl.n	800a702 <_svfiprintf_r+0x36>
 800a6e0:	690b      	ldr	r3, [r1, #16]
 800a6e2:	b973      	cbnz	r3, 800a702 <_svfiprintf_r+0x36>
 800a6e4:	2140      	movs	r1, #64	@ 0x40
 800a6e6:	f7ff fb8f 	bl	8009e08 <_malloc_r>
 800a6ea:	6028      	str	r0, [r5, #0]
 800a6ec:	6128      	str	r0, [r5, #16]
 800a6ee:	b930      	cbnz	r0, 800a6fe <_svfiprintf_r+0x32>
 800a6f0:	230c      	movs	r3, #12
 800a6f2:	603b      	str	r3, [r7, #0]
 800a6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f8:	b01d      	add	sp, #116	@ 0x74
 800a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fe:	2340      	movs	r3, #64	@ 0x40
 800a700:	616b      	str	r3, [r5, #20]
 800a702:	2300      	movs	r3, #0
 800a704:	9309      	str	r3, [sp, #36]	@ 0x24
 800a706:	2320      	movs	r3, #32
 800a708:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a70c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a710:	2330      	movs	r3, #48	@ 0x30
 800a712:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a8b0 <_svfiprintf_r+0x1e4>
 800a716:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a71a:	f04f 0901 	mov.w	r9, #1
 800a71e:	4623      	mov	r3, r4
 800a720:	469a      	mov	sl, r3
 800a722:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a726:	b10a      	cbz	r2, 800a72c <_svfiprintf_r+0x60>
 800a728:	2a25      	cmp	r2, #37	@ 0x25
 800a72a:	d1f9      	bne.n	800a720 <_svfiprintf_r+0x54>
 800a72c:	ebba 0b04 	subs.w	fp, sl, r4
 800a730:	d00b      	beq.n	800a74a <_svfiprintf_r+0x7e>
 800a732:	465b      	mov	r3, fp
 800a734:	4622      	mov	r2, r4
 800a736:	4629      	mov	r1, r5
 800a738:	4638      	mov	r0, r7
 800a73a:	f7ff ff6b 	bl	800a614 <__ssputs_r>
 800a73e:	3001      	adds	r0, #1
 800a740:	f000 80a7 	beq.w	800a892 <_svfiprintf_r+0x1c6>
 800a744:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a746:	445a      	add	r2, fp
 800a748:	9209      	str	r2, [sp, #36]	@ 0x24
 800a74a:	f89a 3000 	ldrb.w	r3, [sl]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f000 809f 	beq.w	800a892 <_svfiprintf_r+0x1c6>
 800a754:	2300      	movs	r3, #0
 800a756:	f04f 32ff 	mov.w	r2, #4294967295
 800a75a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a75e:	f10a 0a01 	add.w	sl, sl, #1
 800a762:	9304      	str	r3, [sp, #16]
 800a764:	9307      	str	r3, [sp, #28]
 800a766:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a76a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a76c:	4654      	mov	r4, sl
 800a76e:	2205      	movs	r2, #5
 800a770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a774:	484e      	ldr	r0, [pc, #312]	@ (800a8b0 <_svfiprintf_r+0x1e4>)
 800a776:	f7f5 fd2b 	bl	80001d0 <memchr>
 800a77a:	9a04      	ldr	r2, [sp, #16]
 800a77c:	b9d8      	cbnz	r0, 800a7b6 <_svfiprintf_r+0xea>
 800a77e:	06d0      	lsls	r0, r2, #27
 800a780:	bf44      	itt	mi
 800a782:	2320      	movmi	r3, #32
 800a784:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a788:	0711      	lsls	r1, r2, #28
 800a78a:	bf44      	itt	mi
 800a78c:	232b      	movmi	r3, #43	@ 0x2b
 800a78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a792:	f89a 3000 	ldrb.w	r3, [sl]
 800a796:	2b2a      	cmp	r3, #42	@ 0x2a
 800a798:	d015      	beq.n	800a7c6 <_svfiprintf_r+0xfa>
 800a79a:	9a07      	ldr	r2, [sp, #28]
 800a79c:	4654      	mov	r4, sl
 800a79e:	2000      	movs	r0, #0
 800a7a0:	f04f 0c0a 	mov.w	ip, #10
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7aa:	3b30      	subs	r3, #48	@ 0x30
 800a7ac:	2b09      	cmp	r3, #9
 800a7ae:	d94b      	bls.n	800a848 <_svfiprintf_r+0x17c>
 800a7b0:	b1b0      	cbz	r0, 800a7e0 <_svfiprintf_r+0x114>
 800a7b2:	9207      	str	r2, [sp, #28]
 800a7b4:	e014      	b.n	800a7e0 <_svfiprintf_r+0x114>
 800a7b6:	eba0 0308 	sub.w	r3, r0, r8
 800a7ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	46a2      	mov	sl, r4
 800a7c4:	e7d2      	b.n	800a76c <_svfiprintf_r+0xa0>
 800a7c6:	9b03      	ldr	r3, [sp, #12]
 800a7c8:	1d19      	adds	r1, r3, #4
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	9103      	str	r1, [sp, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	bfbb      	ittet	lt
 800a7d2:	425b      	neglt	r3, r3
 800a7d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a7d8:	9307      	strge	r3, [sp, #28]
 800a7da:	9307      	strlt	r3, [sp, #28]
 800a7dc:	bfb8      	it	lt
 800a7de:	9204      	strlt	r2, [sp, #16]
 800a7e0:	7823      	ldrb	r3, [r4, #0]
 800a7e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7e4:	d10a      	bne.n	800a7fc <_svfiprintf_r+0x130>
 800a7e6:	7863      	ldrb	r3, [r4, #1]
 800a7e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7ea:	d132      	bne.n	800a852 <_svfiprintf_r+0x186>
 800a7ec:	9b03      	ldr	r3, [sp, #12]
 800a7ee:	1d1a      	adds	r2, r3, #4
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	9203      	str	r2, [sp, #12]
 800a7f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7f8:	3402      	adds	r4, #2
 800a7fa:	9305      	str	r3, [sp, #20]
 800a7fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a8c0 <_svfiprintf_r+0x1f4>
 800a800:	7821      	ldrb	r1, [r4, #0]
 800a802:	2203      	movs	r2, #3
 800a804:	4650      	mov	r0, sl
 800a806:	f7f5 fce3 	bl	80001d0 <memchr>
 800a80a:	b138      	cbz	r0, 800a81c <_svfiprintf_r+0x150>
 800a80c:	9b04      	ldr	r3, [sp, #16]
 800a80e:	eba0 000a 	sub.w	r0, r0, sl
 800a812:	2240      	movs	r2, #64	@ 0x40
 800a814:	4082      	lsls	r2, r0
 800a816:	4313      	orrs	r3, r2
 800a818:	3401      	adds	r4, #1
 800a81a:	9304      	str	r3, [sp, #16]
 800a81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a820:	4824      	ldr	r0, [pc, #144]	@ (800a8b4 <_svfiprintf_r+0x1e8>)
 800a822:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a826:	2206      	movs	r2, #6
 800a828:	f7f5 fcd2 	bl	80001d0 <memchr>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d036      	beq.n	800a89e <_svfiprintf_r+0x1d2>
 800a830:	4b21      	ldr	r3, [pc, #132]	@ (800a8b8 <_svfiprintf_r+0x1ec>)
 800a832:	bb1b      	cbnz	r3, 800a87c <_svfiprintf_r+0x1b0>
 800a834:	9b03      	ldr	r3, [sp, #12]
 800a836:	3307      	adds	r3, #7
 800a838:	f023 0307 	bic.w	r3, r3, #7
 800a83c:	3308      	adds	r3, #8
 800a83e:	9303      	str	r3, [sp, #12]
 800a840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a842:	4433      	add	r3, r6
 800a844:	9309      	str	r3, [sp, #36]	@ 0x24
 800a846:	e76a      	b.n	800a71e <_svfiprintf_r+0x52>
 800a848:	fb0c 3202 	mla	r2, ip, r2, r3
 800a84c:	460c      	mov	r4, r1
 800a84e:	2001      	movs	r0, #1
 800a850:	e7a8      	b.n	800a7a4 <_svfiprintf_r+0xd8>
 800a852:	2300      	movs	r3, #0
 800a854:	3401      	adds	r4, #1
 800a856:	9305      	str	r3, [sp, #20]
 800a858:	4619      	mov	r1, r3
 800a85a:	f04f 0c0a 	mov.w	ip, #10
 800a85e:	4620      	mov	r0, r4
 800a860:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a864:	3a30      	subs	r2, #48	@ 0x30
 800a866:	2a09      	cmp	r2, #9
 800a868:	d903      	bls.n	800a872 <_svfiprintf_r+0x1a6>
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d0c6      	beq.n	800a7fc <_svfiprintf_r+0x130>
 800a86e:	9105      	str	r1, [sp, #20]
 800a870:	e7c4      	b.n	800a7fc <_svfiprintf_r+0x130>
 800a872:	fb0c 2101 	mla	r1, ip, r1, r2
 800a876:	4604      	mov	r4, r0
 800a878:	2301      	movs	r3, #1
 800a87a:	e7f0      	b.n	800a85e <_svfiprintf_r+0x192>
 800a87c:	ab03      	add	r3, sp, #12
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	462a      	mov	r2, r5
 800a882:	4b0e      	ldr	r3, [pc, #56]	@ (800a8bc <_svfiprintf_r+0x1f0>)
 800a884:	a904      	add	r1, sp, #16
 800a886:	4638      	mov	r0, r7
 800a888:	f7fd fe92 	bl	80085b0 <_printf_float>
 800a88c:	1c42      	adds	r2, r0, #1
 800a88e:	4606      	mov	r6, r0
 800a890:	d1d6      	bne.n	800a840 <_svfiprintf_r+0x174>
 800a892:	89ab      	ldrh	r3, [r5, #12]
 800a894:	065b      	lsls	r3, r3, #25
 800a896:	f53f af2d 	bmi.w	800a6f4 <_svfiprintf_r+0x28>
 800a89a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a89c:	e72c      	b.n	800a6f8 <_svfiprintf_r+0x2c>
 800a89e:	ab03      	add	r3, sp, #12
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	462a      	mov	r2, r5
 800a8a4:	4b05      	ldr	r3, [pc, #20]	@ (800a8bc <_svfiprintf_r+0x1f0>)
 800a8a6:	a904      	add	r1, sp, #16
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	f7fe f919 	bl	8008ae0 <_printf_i>
 800a8ae:	e7ed      	b.n	800a88c <_svfiprintf_r+0x1c0>
 800a8b0:	0800c3a2 	.word	0x0800c3a2
 800a8b4:	0800c3ac 	.word	0x0800c3ac
 800a8b8:	080085b1 	.word	0x080085b1
 800a8bc:	0800a615 	.word	0x0800a615
 800a8c0:	0800c3a8 	.word	0x0800c3a8

0800a8c4 <__sflush_r>:
 800a8c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8cc:	0716      	lsls	r6, r2, #28
 800a8ce:	4605      	mov	r5, r0
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	d454      	bmi.n	800a97e <__sflush_r+0xba>
 800a8d4:	684b      	ldr	r3, [r1, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	dc02      	bgt.n	800a8e0 <__sflush_r+0x1c>
 800a8da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	dd48      	ble.n	800a972 <__sflush_r+0xae>
 800a8e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8e2:	2e00      	cmp	r6, #0
 800a8e4:	d045      	beq.n	800a972 <__sflush_r+0xae>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8ec:	682f      	ldr	r7, [r5, #0]
 800a8ee:	6a21      	ldr	r1, [r4, #32]
 800a8f0:	602b      	str	r3, [r5, #0]
 800a8f2:	d030      	beq.n	800a956 <__sflush_r+0x92>
 800a8f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	0759      	lsls	r1, r3, #29
 800a8fa:	d505      	bpl.n	800a908 <__sflush_r+0x44>
 800a8fc:	6863      	ldr	r3, [r4, #4]
 800a8fe:	1ad2      	subs	r2, r2, r3
 800a900:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a902:	b10b      	cbz	r3, 800a908 <__sflush_r+0x44>
 800a904:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a906:	1ad2      	subs	r2, r2, r3
 800a908:	2300      	movs	r3, #0
 800a90a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a90c:	6a21      	ldr	r1, [r4, #32]
 800a90e:	4628      	mov	r0, r5
 800a910:	47b0      	blx	r6
 800a912:	1c43      	adds	r3, r0, #1
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	d106      	bne.n	800a926 <__sflush_r+0x62>
 800a918:	6829      	ldr	r1, [r5, #0]
 800a91a:	291d      	cmp	r1, #29
 800a91c:	d82b      	bhi.n	800a976 <__sflush_r+0xb2>
 800a91e:	4a2a      	ldr	r2, [pc, #168]	@ (800a9c8 <__sflush_r+0x104>)
 800a920:	40ca      	lsrs	r2, r1
 800a922:	07d6      	lsls	r6, r2, #31
 800a924:	d527      	bpl.n	800a976 <__sflush_r+0xb2>
 800a926:	2200      	movs	r2, #0
 800a928:	6062      	str	r2, [r4, #4]
 800a92a:	04d9      	lsls	r1, r3, #19
 800a92c:	6922      	ldr	r2, [r4, #16]
 800a92e:	6022      	str	r2, [r4, #0]
 800a930:	d504      	bpl.n	800a93c <__sflush_r+0x78>
 800a932:	1c42      	adds	r2, r0, #1
 800a934:	d101      	bne.n	800a93a <__sflush_r+0x76>
 800a936:	682b      	ldr	r3, [r5, #0]
 800a938:	b903      	cbnz	r3, 800a93c <__sflush_r+0x78>
 800a93a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a93c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a93e:	602f      	str	r7, [r5, #0]
 800a940:	b1b9      	cbz	r1, 800a972 <__sflush_r+0xae>
 800a942:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a946:	4299      	cmp	r1, r3
 800a948:	d002      	beq.n	800a950 <__sflush_r+0x8c>
 800a94a:	4628      	mov	r0, r5
 800a94c:	f7ff f9e8 	bl	8009d20 <_free_r>
 800a950:	2300      	movs	r3, #0
 800a952:	6363      	str	r3, [r4, #52]	@ 0x34
 800a954:	e00d      	b.n	800a972 <__sflush_r+0xae>
 800a956:	2301      	movs	r3, #1
 800a958:	4628      	mov	r0, r5
 800a95a:	47b0      	blx	r6
 800a95c:	4602      	mov	r2, r0
 800a95e:	1c50      	adds	r0, r2, #1
 800a960:	d1c9      	bne.n	800a8f6 <__sflush_r+0x32>
 800a962:	682b      	ldr	r3, [r5, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d0c6      	beq.n	800a8f6 <__sflush_r+0x32>
 800a968:	2b1d      	cmp	r3, #29
 800a96a:	d001      	beq.n	800a970 <__sflush_r+0xac>
 800a96c:	2b16      	cmp	r3, #22
 800a96e:	d11e      	bne.n	800a9ae <__sflush_r+0xea>
 800a970:	602f      	str	r7, [r5, #0]
 800a972:	2000      	movs	r0, #0
 800a974:	e022      	b.n	800a9bc <__sflush_r+0xf8>
 800a976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a97a:	b21b      	sxth	r3, r3
 800a97c:	e01b      	b.n	800a9b6 <__sflush_r+0xf2>
 800a97e:	690f      	ldr	r7, [r1, #16]
 800a980:	2f00      	cmp	r7, #0
 800a982:	d0f6      	beq.n	800a972 <__sflush_r+0xae>
 800a984:	0793      	lsls	r3, r2, #30
 800a986:	680e      	ldr	r6, [r1, #0]
 800a988:	bf08      	it	eq
 800a98a:	694b      	ldreq	r3, [r1, #20]
 800a98c:	600f      	str	r7, [r1, #0]
 800a98e:	bf18      	it	ne
 800a990:	2300      	movne	r3, #0
 800a992:	eba6 0807 	sub.w	r8, r6, r7
 800a996:	608b      	str	r3, [r1, #8]
 800a998:	f1b8 0f00 	cmp.w	r8, #0
 800a99c:	dde9      	ble.n	800a972 <__sflush_r+0xae>
 800a99e:	6a21      	ldr	r1, [r4, #32]
 800a9a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a9a2:	4643      	mov	r3, r8
 800a9a4:	463a      	mov	r2, r7
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	47b0      	blx	r6
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	dc08      	bgt.n	800a9c0 <__sflush_r+0xfc>
 800a9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9b6:	81a3      	strh	r3, [r4, #12]
 800a9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c0:	4407      	add	r7, r0
 800a9c2:	eba8 0800 	sub.w	r8, r8, r0
 800a9c6:	e7e7      	b.n	800a998 <__sflush_r+0xd4>
 800a9c8:	20400001 	.word	0x20400001

0800a9cc <_fflush_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	690b      	ldr	r3, [r1, #16]
 800a9d0:	4605      	mov	r5, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	b913      	cbnz	r3, 800a9dc <_fflush_r+0x10>
 800a9d6:	2500      	movs	r5, #0
 800a9d8:	4628      	mov	r0, r5
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	b118      	cbz	r0, 800a9e6 <_fflush_r+0x1a>
 800a9de:	6a03      	ldr	r3, [r0, #32]
 800a9e0:	b90b      	cbnz	r3, 800a9e6 <_fflush_r+0x1a>
 800a9e2:	f7fe fa27 	bl	8008e34 <__sinit>
 800a9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d0f3      	beq.n	800a9d6 <_fflush_r+0xa>
 800a9ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9f0:	07d0      	lsls	r0, r2, #31
 800a9f2:	d404      	bmi.n	800a9fe <_fflush_r+0x32>
 800a9f4:	0599      	lsls	r1, r3, #22
 800a9f6:	d402      	bmi.n	800a9fe <_fflush_r+0x32>
 800a9f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9fa:	f7fe fb34 	bl	8009066 <__retarget_lock_acquire_recursive>
 800a9fe:	4628      	mov	r0, r5
 800aa00:	4621      	mov	r1, r4
 800aa02:	f7ff ff5f 	bl	800a8c4 <__sflush_r>
 800aa06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa08:	07da      	lsls	r2, r3, #31
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	d4e4      	bmi.n	800a9d8 <_fflush_r+0xc>
 800aa0e:	89a3      	ldrh	r3, [r4, #12]
 800aa10:	059b      	lsls	r3, r3, #22
 800aa12:	d4e1      	bmi.n	800a9d8 <_fflush_r+0xc>
 800aa14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa16:	f7fe fb27 	bl	8009068 <__retarget_lock_release_recursive>
 800aa1a:	e7dd      	b.n	800a9d8 <_fflush_r+0xc>

0800aa1c <memmove>:
 800aa1c:	4288      	cmp	r0, r1
 800aa1e:	b510      	push	{r4, lr}
 800aa20:	eb01 0402 	add.w	r4, r1, r2
 800aa24:	d902      	bls.n	800aa2c <memmove+0x10>
 800aa26:	4284      	cmp	r4, r0
 800aa28:	4623      	mov	r3, r4
 800aa2a:	d807      	bhi.n	800aa3c <memmove+0x20>
 800aa2c:	1e43      	subs	r3, r0, #1
 800aa2e:	42a1      	cmp	r1, r4
 800aa30:	d008      	beq.n	800aa44 <memmove+0x28>
 800aa32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa3a:	e7f8      	b.n	800aa2e <memmove+0x12>
 800aa3c:	4402      	add	r2, r0
 800aa3e:	4601      	mov	r1, r0
 800aa40:	428a      	cmp	r2, r1
 800aa42:	d100      	bne.n	800aa46 <memmove+0x2a>
 800aa44:	bd10      	pop	{r4, pc}
 800aa46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa4e:	e7f7      	b.n	800aa40 <memmove+0x24>

0800aa50 <_sbrk_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4d06      	ldr	r5, [pc, #24]	@ (800aa6c <_sbrk_r+0x1c>)
 800aa54:	2300      	movs	r3, #0
 800aa56:	4604      	mov	r4, r0
 800aa58:	4608      	mov	r0, r1
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	f7f7 fdc6 	bl	80025ec <_sbrk>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_sbrk_r+0x1a>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_sbrk_r+0x1a>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	2000a72c 	.word	0x2000a72c

0800aa70 <memcpy>:
 800aa70:	440a      	add	r2, r1
 800aa72:	4291      	cmp	r1, r2
 800aa74:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa78:	d100      	bne.n	800aa7c <memcpy+0xc>
 800aa7a:	4770      	bx	lr
 800aa7c:	b510      	push	{r4, lr}
 800aa7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa86:	4291      	cmp	r1, r2
 800aa88:	d1f9      	bne.n	800aa7e <memcpy+0xe>
 800aa8a:	bd10      	pop	{r4, pc}

0800aa8c <__assert_func>:
 800aa8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa8e:	4614      	mov	r4, r2
 800aa90:	461a      	mov	r2, r3
 800aa92:	4b09      	ldr	r3, [pc, #36]	@ (800aab8 <__assert_func+0x2c>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4605      	mov	r5, r0
 800aa98:	68d8      	ldr	r0, [r3, #12]
 800aa9a:	b14c      	cbz	r4, 800aab0 <__assert_func+0x24>
 800aa9c:	4b07      	ldr	r3, [pc, #28]	@ (800aabc <__assert_func+0x30>)
 800aa9e:	9100      	str	r1, [sp, #0]
 800aaa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aaa4:	4906      	ldr	r1, [pc, #24]	@ (800aac0 <__assert_func+0x34>)
 800aaa6:	462b      	mov	r3, r5
 800aaa8:	f000 f870 	bl	800ab8c <fiprintf>
 800aaac:	f000 f880 	bl	800abb0 <abort>
 800aab0:	4b04      	ldr	r3, [pc, #16]	@ (800aac4 <__assert_func+0x38>)
 800aab2:	461c      	mov	r4, r3
 800aab4:	e7f3      	b.n	800aa9e <__assert_func+0x12>
 800aab6:	bf00      	nop
 800aab8:	200001fc 	.word	0x200001fc
 800aabc:	0800c3bd 	.word	0x0800c3bd
 800aac0:	0800c3ca 	.word	0x0800c3ca
 800aac4:	0800c3f8 	.word	0x0800c3f8

0800aac8 <_calloc_r>:
 800aac8:	b570      	push	{r4, r5, r6, lr}
 800aaca:	fba1 5402 	umull	r5, r4, r1, r2
 800aace:	b934      	cbnz	r4, 800aade <_calloc_r+0x16>
 800aad0:	4629      	mov	r1, r5
 800aad2:	f7ff f999 	bl	8009e08 <_malloc_r>
 800aad6:	4606      	mov	r6, r0
 800aad8:	b928      	cbnz	r0, 800aae6 <_calloc_r+0x1e>
 800aada:	4630      	mov	r0, r6
 800aadc:	bd70      	pop	{r4, r5, r6, pc}
 800aade:	220c      	movs	r2, #12
 800aae0:	6002      	str	r2, [r0, #0]
 800aae2:	2600      	movs	r6, #0
 800aae4:	e7f9      	b.n	800aada <_calloc_r+0x12>
 800aae6:	462a      	mov	r2, r5
 800aae8:	4621      	mov	r1, r4
 800aaea:	f7fe fa3e 	bl	8008f6a <memset>
 800aaee:	e7f4      	b.n	800aada <_calloc_r+0x12>

0800aaf0 <__ascii_mbtowc>:
 800aaf0:	b082      	sub	sp, #8
 800aaf2:	b901      	cbnz	r1, 800aaf6 <__ascii_mbtowc+0x6>
 800aaf4:	a901      	add	r1, sp, #4
 800aaf6:	b142      	cbz	r2, 800ab0a <__ascii_mbtowc+0x1a>
 800aaf8:	b14b      	cbz	r3, 800ab0e <__ascii_mbtowc+0x1e>
 800aafa:	7813      	ldrb	r3, [r2, #0]
 800aafc:	600b      	str	r3, [r1, #0]
 800aafe:	7812      	ldrb	r2, [r2, #0]
 800ab00:	1e10      	subs	r0, r2, #0
 800ab02:	bf18      	it	ne
 800ab04:	2001      	movne	r0, #1
 800ab06:	b002      	add	sp, #8
 800ab08:	4770      	bx	lr
 800ab0a:	4610      	mov	r0, r2
 800ab0c:	e7fb      	b.n	800ab06 <__ascii_mbtowc+0x16>
 800ab0e:	f06f 0001 	mvn.w	r0, #1
 800ab12:	e7f8      	b.n	800ab06 <__ascii_mbtowc+0x16>

0800ab14 <_realloc_r>:
 800ab14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab18:	4607      	mov	r7, r0
 800ab1a:	4614      	mov	r4, r2
 800ab1c:	460d      	mov	r5, r1
 800ab1e:	b921      	cbnz	r1, 800ab2a <_realloc_r+0x16>
 800ab20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab24:	4611      	mov	r1, r2
 800ab26:	f7ff b96f 	b.w	8009e08 <_malloc_r>
 800ab2a:	b92a      	cbnz	r2, 800ab38 <_realloc_r+0x24>
 800ab2c:	f7ff f8f8 	bl	8009d20 <_free_r>
 800ab30:	4625      	mov	r5, r4
 800ab32:	4628      	mov	r0, r5
 800ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab38:	f000 f841 	bl	800abbe <_malloc_usable_size_r>
 800ab3c:	4284      	cmp	r4, r0
 800ab3e:	4606      	mov	r6, r0
 800ab40:	d802      	bhi.n	800ab48 <_realloc_r+0x34>
 800ab42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab46:	d8f4      	bhi.n	800ab32 <_realloc_r+0x1e>
 800ab48:	4621      	mov	r1, r4
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	f7ff f95c 	bl	8009e08 <_malloc_r>
 800ab50:	4680      	mov	r8, r0
 800ab52:	b908      	cbnz	r0, 800ab58 <_realloc_r+0x44>
 800ab54:	4645      	mov	r5, r8
 800ab56:	e7ec      	b.n	800ab32 <_realloc_r+0x1e>
 800ab58:	42b4      	cmp	r4, r6
 800ab5a:	4622      	mov	r2, r4
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	bf28      	it	cs
 800ab60:	4632      	movcs	r2, r6
 800ab62:	f7ff ff85 	bl	800aa70 <memcpy>
 800ab66:	4629      	mov	r1, r5
 800ab68:	4638      	mov	r0, r7
 800ab6a:	f7ff f8d9 	bl	8009d20 <_free_r>
 800ab6e:	e7f1      	b.n	800ab54 <_realloc_r+0x40>

0800ab70 <__ascii_wctomb>:
 800ab70:	4603      	mov	r3, r0
 800ab72:	4608      	mov	r0, r1
 800ab74:	b141      	cbz	r1, 800ab88 <__ascii_wctomb+0x18>
 800ab76:	2aff      	cmp	r2, #255	@ 0xff
 800ab78:	d904      	bls.n	800ab84 <__ascii_wctomb+0x14>
 800ab7a:	228a      	movs	r2, #138	@ 0x8a
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab82:	4770      	bx	lr
 800ab84:	700a      	strb	r2, [r1, #0]
 800ab86:	2001      	movs	r0, #1
 800ab88:	4770      	bx	lr
	...

0800ab8c <fiprintf>:
 800ab8c:	b40e      	push	{r1, r2, r3}
 800ab8e:	b503      	push	{r0, r1, lr}
 800ab90:	4601      	mov	r1, r0
 800ab92:	ab03      	add	r3, sp, #12
 800ab94:	4805      	ldr	r0, [pc, #20]	@ (800abac <fiprintf+0x20>)
 800ab96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab9a:	6800      	ldr	r0, [r0, #0]
 800ab9c:	9301      	str	r3, [sp, #4]
 800ab9e:	f000 f83f 	bl	800ac20 <_vfiprintf_r>
 800aba2:	b002      	add	sp, #8
 800aba4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aba8:	b003      	add	sp, #12
 800abaa:	4770      	bx	lr
 800abac:	200001fc 	.word	0x200001fc

0800abb0 <abort>:
 800abb0:	b508      	push	{r3, lr}
 800abb2:	2006      	movs	r0, #6
 800abb4:	f000 fa08 	bl	800afc8 <raise>
 800abb8:	2001      	movs	r0, #1
 800abba:	f7f7 fc9f 	bl	80024fc <_exit>

0800abbe <_malloc_usable_size_r>:
 800abbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abc2:	1f18      	subs	r0, r3, #4
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	bfbc      	itt	lt
 800abc8:	580b      	ldrlt	r3, [r1, r0]
 800abca:	18c0      	addlt	r0, r0, r3
 800abcc:	4770      	bx	lr

0800abce <__sfputc_r>:
 800abce:	6893      	ldr	r3, [r2, #8]
 800abd0:	3b01      	subs	r3, #1
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	b410      	push	{r4}
 800abd6:	6093      	str	r3, [r2, #8]
 800abd8:	da08      	bge.n	800abec <__sfputc_r+0x1e>
 800abda:	6994      	ldr	r4, [r2, #24]
 800abdc:	42a3      	cmp	r3, r4
 800abde:	db01      	blt.n	800abe4 <__sfputc_r+0x16>
 800abe0:	290a      	cmp	r1, #10
 800abe2:	d103      	bne.n	800abec <__sfputc_r+0x1e>
 800abe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abe8:	f000 b932 	b.w	800ae50 <__swbuf_r>
 800abec:	6813      	ldr	r3, [r2, #0]
 800abee:	1c58      	adds	r0, r3, #1
 800abf0:	6010      	str	r0, [r2, #0]
 800abf2:	7019      	strb	r1, [r3, #0]
 800abf4:	4608      	mov	r0, r1
 800abf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <__sfputs_r>:
 800abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfe:	4606      	mov	r6, r0
 800ac00:	460f      	mov	r7, r1
 800ac02:	4614      	mov	r4, r2
 800ac04:	18d5      	adds	r5, r2, r3
 800ac06:	42ac      	cmp	r4, r5
 800ac08:	d101      	bne.n	800ac0e <__sfputs_r+0x12>
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	e007      	b.n	800ac1e <__sfputs_r+0x22>
 800ac0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac12:	463a      	mov	r2, r7
 800ac14:	4630      	mov	r0, r6
 800ac16:	f7ff ffda 	bl	800abce <__sfputc_r>
 800ac1a:	1c43      	adds	r3, r0, #1
 800ac1c:	d1f3      	bne.n	800ac06 <__sfputs_r+0xa>
 800ac1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac20 <_vfiprintf_r>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	460d      	mov	r5, r1
 800ac26:	b09d      	sub	sp, #116	@ 0x74
 800ac28:	4614      	mov	r4, r2
 800ac2a:	4698      	mov	r8, r3
 800ac2c:	4606      	mov	r6, r0
 800ac2e:	b118      	cbz	r0, 800ac38 <_vfiprintf_r+0x18>
 800ac30:	6a03      	ldr	r3, [r0, #32]
 800ac32:	b90b      	cbnz	r3, 800ac38 <_vfiprintf_r+0x18>
 800ac34:	f7fe f8fe 	bl	8008e34 <__sinit>
 800ac38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac3a:	07d9      	lsls	r1, r3, #31
 800ac3c:	d405      	bmi.n	800ac4a <_vfiprintf_r+0x2a>
 800ac3e:	89ab      	ldrh	r3, [r5, #12]
 800ac40:	059a      	lsls	r2, r3, #22
 800ac42:	d402      	bmi.n	800ac4a <_vfiprintf_r+0x2a>
 800ac44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac46:	f7fe fa0e 	bl	8009066 <__retarget_lock_acquire_recursive>
 800ac4a:	89ab      	ldrh	r3, [r5, #12]
 800ac4c:	071b      	lsls	r3, r3, #28
 800ac4e:	d501      	bpl.n	800ac54 <_vfiprintf_r+0x34>
 800ac50:	692b      	ldr	r3, [r5, #16]
 800ac52:	b99b      	cbnz	r3, 800ac7c <_vfiprintf_r+0x5c>
 800ac54:	4629      	mov	r1, r5
 800ac56:	4630      	mov	r0, r6
 800ac58:	f000 f938 	bl	800aecc <__swsetup_r>
 800ac5c:	b170      	cbz	r0, 800ac7c <_vfiprintf_r+0x5c>
 800ac5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac60:	07dc      	lsls	r4, r3, #31
 800ac62:	d504      	bpl.n	800ac6e <_vfiprintf_r+0x4e>
 800ac64:	f04f 30ff 	mov.w	r0, #4294967295
 800ac68:	b01d      	add	sp, #116	@ 0x74
 800ac6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6e:	89ab      	ldrh	r3, [r5, #12]
 800ac70:	0598      	lsls	r0, r3, #22
 800ac72:	d4f7      	bmi.n	800ac64 <_vfiprintf_r+0x44>
 800ac74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac76:	f7fe f9f7 	bl	8009068 <__retarget_lock_release_recursive>
 800ac7a:	e7f3      	b.n	800ac64 <_vfiprintf_r+0x44>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac80:	2320      	movs	r3, #32
 800ac82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac8a:	2330      	movs	r3, #48	@ 0x30
 800ac8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ae3c <_vfiprintf_r+0x21c>
 800ac90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac94:	f04f 0901 	mov.w	r9, #1
 800ac98:	4623      	mov	r3, r4
 800ac9a:	469a      	mov	sl, r3
 800ac9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aca0:	b10a      	cbz	r2, 800aca6 <_vfiprintf_r+0x86>
 800aca2:	2a25      	cmp	r2, #37	@ 0x25
 800aca4:	d1f9      	bne.n	800ac9a <_vfiprintf_r+0x7a>
 800aca6:	ebba 0b04 	subs.w	fp, sl, r4
 800acaa:	d00b      	beq.n	800acc4 <_vfiprintf_r+0xa4>
 800acac:	465b      	mov	r3, fp
 800acae:	4622      	mov	r2, r4
 800acb0:	4629      	mov	r1, r5
 800acb2:	4630      	mov	r0, r6
 800acb4:	f7ff ffa2 	bl	800abfc <__sfputs_r>
 800acb8:	3001      	adds	r0, #1
 800acba:	f000 80a7 	beq.w	800ae0c <_vfiprintf_r+0x1ec>
 800acbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acc0:	445a      	add	r2, fp
 800acc2:	9209      	str	r2, [sp, #36]	@ 0x24
 800acc4:	f89a 3000 	ldrb.w	r3, [sl]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f000 809f 	beq.w	800ae0c <_vfiprintf_r+0x1ec>
 800acce:	2300      	movs	r3, #0
 800acd0:	f04f 32ff 	mov.w	r2, #4294967295
 800acd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acd8:	f10a 0a01 	add.w	sl, sl, #1
 800acdc:	9304      	str	r3, [sp, #16]
 800acde:	9307      	str	r3, [sp, #28]
 800ace0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ace4:	931a      	str	r3, [sp, #104]	@ 0x68
 800ace6:	4654      	mov	r4, sl
 800ace8:	2205      	movs	r2, #5
 800acea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acee:	4853      	ldr	r0, [pc, #332]	@ (800ae3c <_vfiprintf_r+0x21c>)
 800acf0:	f7f5 fa6e 	bl	80001d0 <memchr>
 800acf4:	9a04      	ldr	r2, [sp, #16]
 800acf6:	b9d8      	cbnz	r0, 800ad30 <_vfiprintf_r+0x110>
 800acf8:	06d1      	lsls	r1, r2, #27
 800acfa:	bf44      	itt	mi
 800acfc:	2320      	movmi	r3, #32
 800acfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad02:	0713      	lsls	r3, r2, #28
 800ad04:	bf44      	itt	mi
 800ad06:	232b      	movmi	r3, #43	@ 0x2b
 800ad08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad10:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad12:	d015      	beq.n	800ad40 <_vfiprintf_r+0x120>
 800ad14:	9a07      	ldr	r2, [sp, #28]
 800ad16:	4654      	mov	r4, sl
 800ad18:	2000      	movs	r0, #0
 800ad1a:	f04f 0c0a 	mov.w	ip, #10
 800ad1e:	4621      	mov	r1, r4
 800ad20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad24:	3b30      	subs	r3, #48	@ 0x30
 800ad26:	2b09      	cmp	r3, #9
 800ad28:	d94b      	bls.n	800adc2 <_vfiprintf_r+0x1a2>
 800ad2a:	b1b0      	cbz	r0, 800ad5a <_vfiprintf_r+0x13a>
 800ad2c:	9207      	str	r2, [sp, #28]
 800ad2e:	e014      	b.n	800ad5a <_vfiprintf_r+0x13a>
 800ad30:	eba0 0308 	sub.w	r3, r0, r8
 800ad34:	fa09 f303 	lsl.w	r3, r9, r3
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	9304      	str	r3, [sp, #16]
 800ad3c:	46a2      	mov	sl, r4
 800ad3e:	e7d2      	b.n	800ace6 <_vfiprintf_r+0xc6>
 800ad40:	9b03      	ldr	r3, [sp, #12]
 800ad42:	1d19      	adds	r1, r3, #4
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	9103      	str	r1, [sp, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	bfbb      	ittet	lt
 800ad4c:	425b      	neglt	r3, r3
 800ad4e:	f042 0202 	orrlt.w	r2, r2, #2
 800ad52:	9307      	strge	r3, [sp, #28]
 800ad54:	9307      	strlt	r3, [sp, #28]
 800ad56:	bfb8      	it	lt
 800ad58:	9204      	strlt	r2, [sp, #16]
 800ad5a:	7823      	ldrb	r3, [r4, #0]
 800ad5c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad5e:	d10a      	bne.n	800ad76 <_vfiprintf_r+0x156>
 800ad60:	7863      	ldrb	r3, [r4, #1]
 800ad62:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad64:	d132      	bne.n	800adcc <_vfiprintf_r+0x1ac>
 800ad66:	9b03      	ldr	r3, [sp, #12]
 800ad68:	1d1a      	adds	r2, r3, #4
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	9203      	str	r2, [sp, #12]
 800ad6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad72:	3402      	adds	r4, #2
 800ad74:	9305      	str	r3, [sp, #20]
 800ad76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ae4c <_vfiprintf_r+0x22c>
 800ad7a:	7821      	ldrb	r1, [r4, #0]
 800ad7c:	2203      	movs	r2, #3
 800ad7e:	4650      	mov	r0, sl
 800ad80:	f7f5 fa26 	bl	80001d0 <memchr>
 800ad84:	b138      	cbz	r0, 800ad96 <_vfiprintf_r+0x176>
 800ad86:	9b04      	ldr	r3, [sp, #16]
 800ad88:	eba0 000a 	sub.w	r0, r0, sl
 800ad8c:	2240      	movs	r2, #64	@ 0x40
 800ad8e:	4082      	lsls	r2, r0
 800ad90:	4313      	orrs	r3, r2
 800ad92:	3401      	adds	r4, #1
 800ad94:	9304      	str	r3, [sp, #16]
 800ad96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad9a:	4829      	ldr	r0, [pc, #164]	@ (800ae40 <_vfiprintf_r+0x220>)
 800ad9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ada0:	2206      	movs	r2, #6
 800ada2:	f7f5 fa15 	bl	80001d0 <memchr>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d03f      	beq.n	800ae2a <_vfiprintf_r+0x20a>
 800adaa:	4b26      	ldr	r3, [pc, #152]	@ (800ae44 <_vfiprintf_r+0x224>)
 800adac:	bb1b      	cbnz	r3, 800adf6 <_vfiprintf_r+0x1d6>
 800adae:	9b03      	ldr	r3, [sp, #12]
 800adb0:	3307      	adds	r3, #7
 800adb2:	f023 0307 	bic.w	r3, r3, #7
 800adb6:	3308      	adds	r3, #8
 800adb8:	9303      	str	r3, [sp, #12]
 800adba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adbc:	443b      	add	r3, r7
 800adbe:	9309      	str	r3, [sp, #36]	@ 0x24
 800adc0:	e76a      	b.n	800ac98 <_vfiprintf_r+0x78>
 800adc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800adc6:	460c      	mov	r4, r1
 800adc8:	2001      	movs	r0, #1
 800adca:	e7a8      	b.n	800ad1e <_vfiprintf_r+0xfe>
 800adcc:	2300      	movs	r3, #0
 800adce:	3401      	adds	r4, #1
 800add0:	9305      	str	r3, [sp, #20]
 800add2:	4619      	mov	r1, r3
 800add4:	f04f 0c0a 	mov.w	ip, #10
 800add8:	4620      	mov	r0, r4
 800adda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adde:	3a30      	subs	r2, #48	@ 0x30
 800ade0:	2a09      	cmp	r2, #9
 800ade2:	d903      	bls.n	800adec <_vfiprintf_r+0x1cc>
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d0c6      	beq.n	800ad76 <_vfiprintf_r+0x156>
 800ade8:	9105      	str	r1, [sp, #20]
 800adea:	e7c4      	b.n	800ad76 <_vfiprintf_r+0x156>
 800adec:	fb0c 2101 	mla	r1, ip, r1, r2
 800adf0:	4604      	mov	r4, r0
 800adf2:	2301      	movs	r3, #1
 800adf4:	e7f0      	b.n	800add8 <_vfiprintf_r+0x1b8>
 800adf6:	ab03      	add	r3, sp, #12
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	462a      	mov	r2, r5
 800adfc:	4b12      	ldr	r3, [pc, #72]	@ (800ae48 <_vfiprintf_r+0x228>)
 800adfe:	a904      	add	r1, sp, #16
 800ae00:	4630      	mov	r0, r6
 800ae02:	f7fd fbd5 	bl	80085b0 <_printf_float>
 800ae06:	4607      	mov	r7, r0
 800ae08:	1c78      	adds	r0, r7, #1
 800ae0a:	d1d6      	bne.n	800adba <_vfiprintf_r+0x19a>
 800ae0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae0e:	07d9      	lsls	r1, r3, #31
 800ae10:	d405      	bmi.n	800ae1e <_vfiprintf_r+0x1fe>
 800ae12:	89ab      	ldrh	r3, [r5, #12]
 800ae14:	059a      	lsls	r2, r3, #22
 800ae16:	d402      	bmi.n	800ae1e <_vfiprintf_r+0x1fe>
 800ae18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae1a:	f7fe f925 	bl	8009068 <__retarget_lock_release_recursive>
 800ae1e:	89ab      	ldrh	r3, [r5, #12]
 800ae20:	065b      	lsls	r3, r3, #25
 800ae22:	f53f af1f 	bmi.w	800ac64 <_vfiprintf_r+0x44>
 800ae26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae28:	e71e      	b.n	800ac68 <_vfiprintf_r+0x48>
 800ae2a:	ab03      	add	r3, sp, #12
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	462a      	mov	r2, r5
 800ae30:	4b05      	ldr	r3, [pc, #20]	@ (800ae48 <_vfiprintf_r+0x228>)
 800ae32:	a904      	add	r1, sp, #16
 800ae34:	4630      	mov	r0, r6
 800ae36:	f7fd fe53 	bl	8008ae0 <_printf_i>
 800ae3a:	e7e4      	b.n	800ae06 <_vfiprintf_r+0x1e6>
 800ae3c:	0800c3a2 	.word	0x0800c3a2
 800ae40:	0800c3ac 	.word	0x0800c3ac
 800ae44:	080085b1 	.word	0x080085b1
 800ae48:	0800abfd 	.word	0x0800abfd
 800ae4c:	0800c3a8 	.word	0x0800c3a8

0800ae50 <__swbuf_r>:
 800ae50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae52:	460e      	mov	r6, r1
 800ae54:	4614      	mov	r4, r2
 800ae56:	4605      	mov	r5, r0
 800ae58:	b118      	cbz	r0, 800ae62 <__swbuf_r+0x12>
 800ae5a:	6a03      	ldr	r3, [r0, #32]
 800ae5c:	b90b      	cbnz	r3, 800ae62 <__swbuf_r+0x12>
 800ae5e:	f7fd ffe9 	bl	8008e34 <__sinit>
 800ae62:	69a3      	ldr	r3, [r4, #24]
 800ae64:	60a3      	str	r3, [r4, #8]
 800ae66:	89a3      	ldrh	r3, [r4, #12]
 800ae68:	071a      	lsls	r2, r3, #28
 800ae6a:	d501      	bpl.n	800ae70 <__swbuf_r+0x20>
 800ae6c:	6923      	ldr	r3, [r4, #16]
 800ae6e:	b943      	cbnz	r3, 800ae82 <__swbuf_r+0x32>
 800ae70:	4621      	mov	r1, r4
 800ae72:	4628      	mov	r0, r5
 800ae74:	f000 f82a 	bl	800aecc <__swsetup_r>
 800ae78:	b118      	cbz	r0, 800ae82 <__swbuf_r+0x32>
 800ae7a:	f04f 37ff 	mov.w	r7, #4294967295
 800ae7e:	4638      	mov	r0, r7
 800ae80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	6922      	ldr	r2, [r4, #16]
 800ae86:	1a98      	subs	r0, r3, r2
 800ae88:	6963      	ldr	r3, [r4, #20]
 800ae8a:	b2f6      	uxtb	r6, r6
 800ae8c:	4283      	cmp	r3, r0
 800ae8e:	4637      	mov	r7, r6
 800ae90:	dc05      	bgt.n	800ae9e <__swbuf_r+0x4e>
 800ae92:	4621      	mov	r1, r4
 800ae94:	4628      	mov	r0, r5
 800ae96:	f7ff fd99 	bl	800a9cc <_fflush_r>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d1ed      	bne.n	800ae7a <__swbuf_r+0x2a>
 800ae9e:	68a3      	ldr	r3, [r4, #8]
 800aea0:	3b01      	subs	r3, #1
 800aea2:	60a3      	str	r3, [r4, #8]
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	1c5a      	adds	r2, r3, #1
 800aea8:	6022      	str	r2, [r4, #0]
 800aeaa:	701e      	strb	r6, [r3, #0]
 800aeac:	6962      	ldr	r2, [r4, #20]
 800aeae:	1c43      	adds	r3, r0, #1
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d004      	beq.n	800aebe <__swbuf_r+0x6e>
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	07db      	lsls	r3, r3, #31
 800aeb8:	d5e1      	bpl.n	800ae7e <__swbuf_r+0x2e>
 800aeba:	2e0a      	cmp	r6, #10
 800aebc:	d1df      	bne.n	800ae7e <__swbuf_r+0x2e>
 800aebe:	4621      	mov	r1, r4
 800aec0:	4628      	mov	r0, r5
 800aec2:	f7ff fd83 	bl	800a9cc <_fflush_r>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d0d9      	beq.n	800ae7e <__swbuf_r+0x2e>
 800aeca:	e7d6      	b.n	800ae7a <__swbuf_r+0x2a>

0800aecc <__swsetup_r>:
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	4b29      	ldr	r3, [pc, #164]	@ (800af74 <__swsetup_r+0xa8>)
 800aed0:	4605      	mov	r5, r0
 800aed2:	6818      	ldr	r0, [r3, #0]
 800aed4:	460c      	mov	r4, r1
 800aed6:	b118      	cbz	r0, 800aee0 <__swsetup_r+0x14>
 800aed8:	6a03      	ldr	r3, [r0, #32]
 800aeda:	b90b      	cbnz	r3, 800aee0 <__swsetup_r+0x14>
 800aedc:	f7fd ffaa 	bl	8008e34 <__sinit>
 800aee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aee4:	0719      	lsls	r1, r3, #28
 800aee6:	d422      	bmi.n	800af2e <__swsetup_r+0x62>
 800aee8:	06da      	lsls	r2, r3, #27
 800aeea:	d407      	bmi.n	800aefc <__swsetup_r+0x30>
 800aeec:	2209      	movs	r2, #9
 800aeee:	602a      	str	r2, [r5, #0]
 800aef0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aef4:	81a3      	strh	r3, [r4, #12]
 800aef6:	f04f 30ff 	mov.w	r0, #4294967295
 800aefa:	e033      	b.n	800af64 <__swsetup_r+0x98>
 800aefc:	0758      	lsls	r0, r3, #29
 800aefe:	d512      	bpl.n	800af26 <__swsetup_r+0x5a>
 800af00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af02:	b141      	cbz	r1, 800af16 <__swsetup_r+0x4a>
 800af04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af08:	4299      	cmp	r1, r3
 800af0a:	d002      	beq.n	800af12 <__swsetup_r+0x46>
 800af0c:	4628      	mov	r0, r5
 800af0e:	f7fe ff07 	bl	8009d20 <_free_r>
 800af12:	2300      	movs	r3, #0
 800af14:	6363      	str	r3, [r4, #52]	@ 0x34
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af1c:	81a3      	strh	r3, [r4, #12]
 800af1e:	2300      	movs	r3, #0
 800af20:	6063      	str	r3, [r4, #4]
 800af22:	6923      	ldr	r3, [r4, #16]
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	89a3      	ldrh	r3, [r4, #12]
 800af28:	f043 0308 	orr.w	r3, r3, #8
 800af2c:	81a3      	strh	r3, [r4, #12]
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	b94b      	cbnz	r3, 800af46 <__swsetup_r+0x7a>
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af3c:	d003      	beq.n	800af46 <__swsetup_r+0x7a>
 800af3e:	4621      	mov	r1, r4
 800af40:	4628      	mov	r0, r5
 800af42:	f000 f883 	bl	800b04c <__smakebuf_r>
 800af46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af4a:	f013 0201 	ands.w	r2, r3, #1
 800af4e:	d00a      	beq.n	800af66 <__swsetup_r+0x9a>
 800af50:	2200      	movs	r2, #0
 800af52:	60a2      	str	r2, [r4, #8]
 800af54:	6962      	ldr	r2, [r4, #20]
 800af56:	4252      	negs	r2, r2
 800af58:	61a2      	str	r2, [r4, #24]
 800af5a:	6922      	ldr	r2, [r4, #16]
 800af5c:	b942      	cbnz	r2, 800af70 <__swsetup_r+0xa4>
 800af5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af62:	d1c5      	bne.n	800aef0 <__swsetup_r+0x24>
 800af64:	bd38      	pop	{r3, r4, r5, pc}
 800af66:	0799      	lsls	r1, r3, #30
 800af68:	bf58      	it	pl
 800af6a:	6962      	ldrpl	r2, [r4, #20]
 800af6c:	60a2      	str	r2, [r4, #8]
 800af6e:	e7f4      	b.n	800af5a <__swsetup_r+0x8e>
 800af70:	2000      	movs	r0, #0
 800af72:	e7f7      	b.n	800af64 <__swsetup_r+0x98>
 800af74:	200001fc 	.word	0x200001fc

0800af78 <_raise_r>:
 800af78:	291f      	cmp	r1, #31
 800af7a:	b538      	push	{r3, r4, r5, lr}
 800af7c:	4605      	mov	r5, r0
 800af7e:	460c      	mov	r4, r1
 800af80:	d904      	bls.n	800af8c <_raise_r+0x14>
 800af82:	2316      	movs	r3, #22
 800af84:	6003      	str	r3, [r0, #0]
 800af86:	f04f 30ff 	mov.w	r0, #4294967295
 800af8a:	bd38      	pop	{r3, r4, r5, pc}
 800af8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af8e:	b112      	cbz	r2, 800af96 <_raise_r+0x1e>
 800af90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af94:	b94b      	cbnz	r3, 800afaa <_raise_r+0x32>
 800af96:	4628      	mov	r0, r5
 800af98:	f000 f830 	bl	800affc <_getpid_r>
 800af9c:	4622      	mov	r2, r4
 800af9e:	4601      	mov	r1, r0
 800afa0:	4628      	mov	r0, r5
 800afa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afa6:	f000 b817 	b.w	800afd8 <_kill_r>
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d00a      	beq.n	800afc4 <_raise_r+0x4c>
 800afae:	1c59      	adds	r1, r3, #1
 800afb0:	d103      	bne.n	800afba <_raise_r+0x42>
 800afb2:	2316      	movs	r3, #22
 800afb4:	6003      	str	r3, [r0, #0]
 800afb6:	2001      	movs	r0, #1
 800afb8:	e7e7      	b.n	800af8a <_raise_r+0x12>
 800afba:	2100      	movs	r1, #0
 800afbc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800afc0:	4620      	mov	r0, r4
 800afc2:	4798      	blx	r3
 800afc4:	2000      	movs	r0, #0
 800afc6:	e7e0      	b.n	800af8a <_raise_r+0x12>

0800afc8 <raise>:
 800afc8:	4b02      	ldr	r3, [pc, #8]	@ (800afd4 <raise+0xc>)
 800afca:	4601      	mov	r1, r0
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	f7ff bfd3 	b.w	800af78 <_raise_r>
 800afd2:	bf00      	nop
 800afd4:	200001fc 	.word	0x200001fc

0800afd8 <_kill_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d07      	ldr	r5, [pc, #28]	@ (800aff8 <_kill_r+0x20>)
 800afdc:	2300      	movs	r3, #0
 800afde:	4604      	mov	r4, r0
 800afe0:	4608      	mov	r0, r1
 800afe2:	4611      	mov	r1, r2
 800afe4:	602b      	str	r3, [r5, #0]
 800afe6:	f7f7 fa79 	bl	80024dc <_kill>
 800afea:	1c43      	adds	r3, r0, #1
 800afec:	d102      	bne.n	800aff4 <_kill_r+0x1c>
 800afee:	682b      	ldr	r3, [r5, #0]
 800aff0:	b103      	cbz	r3, 800aff4 <_kill_r+0x1c>
 800aff2:	6023      	str	r3, [r4, #0]
 800aff4:	bd38      	pop	{r3, r4, r5, pc}
 800aff6:	bf00      	nop
 800aff8:	2000a72c 	.word	0x2000a72c

0800affc <_getpid_r>:
 800affc:	f7f7 ba66 	b.w	80024cc <_getpid>

0800b000 <__swhatbuf_r>:
 800b000:	b570      	push	{r4, r5, r6, lr}
 800b002:	460c      	mov	r4, r1
 800b004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b008:	2900      	cmp	r1, #0
 800b00a:	b096      	sub	sp, #88	@ 0x58
 800b00c:	4615      	mov	r5, r2
 800b00e:	461e      	mov	r6, r3
 800b010:	da0d      	bge.n	800b02e <__swhatbuf_r+0x2e>
 800b012:	89a3      	ldrh	r3, [r4, #12]
 800b014:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b018:	f04f 0100 	mov.w	r1, #0
 800b01c:	bf14      	ite	ne
 800b01e:	2340      	movne	r3, #64	@ 0x40
 800b020:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b024:	2000      	movs	r0, #0
 800b026:	6031      	str	r1, [r6, #0]
 800b028:	602b      	str	r3, [r5, #0]
 800b02a:	b016      	add	sp, #88	@ 0x58
 800b02c:	bd70      	pop	{r4, r5, r6, pc}
 800b02e:	466a      	mov	r2, sp
 800b030:	f000 f848 	bl	800b0c4 <_fstat_r>
 800b034:	2800      	cmp	r0, #0
 800b036:	dbec      	blt.n	800b012 <__swhatbuf_r+0x12>
 800b038:	9901      	ldr	r1, [sp, #4]
 800b03a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b03e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b042:	4259      	negs	r1, r3
 800b044:	4159      	adcs	r1, r3
 800b046:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b04a:	e7eb      	b.n	800b024 <__swhatbuf_r+0x24>

0800b04c <__smakebuf_r>:
 800b04c:	898b      	ldrh	r3, [r1, #12]
 800b04e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b050:	079d      	lsls	r5, r3, #30
 800b052:	4606      	mov	r6, r0
 800b054:	460c      	mov	r4, r1
 800b056:	d507      	bpl.n	800b068 <__smakebuf_r+0x1c>
 800b058:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	6123      	str	r3, [r4, #16]
 800b060:	2301      	movs	r3, #1
 800b062:	6163      	str	r3, [r4, #20]
 800b064:	b003      	add	sp, #12
 800b066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b068:	ab01      	add	r3, sp, #4
 800b06a:	466a      	mov	r2, sp
 800b06c:	f7ff ffc8 	bl	800b000 <__swhatbuf_r>
 800b070:	9f00      	ldr	r7, [sp, #0]
 800b072:	4605      	mov	r5, r0
 800b074:	4639      	mov	r1, r7
 800b076:	4630      	mov	r0, r6
 800b078:	f7fe fec6 	bl	8009e08 <_malloc_r>
 800b07c:	b948      	cbnz	r0, 800b092 <__smakebuf_r+0x46>
 800b07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b082:	059a      	lsls	r2, r3, #22
 800b084:	d4ee      	bmi.n	800b064 <__smakebuf_r+0x18>
 800b086:	f023 0303 	bic.w	r3, r3, #3
 800b08a:	f043 0302 	orr.w	r3, r3, #2
 800b08e:	81a3      	strh	r3, [r4, #12]
 800b090:	e7e2      	b.n	800b058 <__smakebuf_r+0xc>
 800b092:	89a3      	ldrh	r3, [r4, #12]
 800b094:	6020      	str	r0, [r4, #0]
 800b096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b09a:	81a3      	strh	r3, [r4, #12]
 800b09c:	9b01      	ldr	r3, [sp, #4]
 800b09e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b0a2:	b15b      	cbz	r3, 800b0bc <__smakebuf_r+0x70>
 800b0a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f000 f81d 	bl	800b0e8 <_isatty_r>
 800b0ae:	b128      	cbz	r0, 800b0bc <__smakebuf_r+0x70>
 800b0b0:	89a3      	ldrh	r3, [r4, #12]
 800b0b2:	f023 0303 	bic.w	r3, r3, #3
 800b0b6:	f043 0301 	orr.w	r3, r3, #1
 800b0ba:	81a3      	strh	r3, [r4, #12]
 800b0bc:	89a3      	ldrh	r3, [r4, #12]
 800b0be:	431d      	orrs	r5, r3
 800b0c0:	81a5      	strh	r5, [r4, #12]
 800b0c2:	e7cf      	b.n	800b064 <__smakebuf_r+0x18>

0800b0c4 <_fstat_r>:
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	4d07      	ldr	r5, [pc, #28]	@ (800b0e4 <_fstat_r+0x20>)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	4608      	mov	r0, r1
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	602b      	str	r3, [r5, #0]
 800b0d2:	f7f7 fa63 	bl	800259c <_fstat>
 800b0d6:	1c43      	adds	r3, r0, #1
 800b0d8:	d102      	bne.n	800b0e0 <_fstat_r+0x1c>
 800b0da:	682b      	ldr	r3, [r5, #0]
 800b0dc:	b103      	cbz	r3, 800b0e0 <_fstat_r+0x1c>
 800b0de:	6023      	str	r3, [r4, #0]
 800b0e0:	bd38      	pop	{r3, r4, r5, pc}
 800b0e2:	bf00      	nop
 800b0e4:	2000a72c 	.word	0x2000a72c

0800b0e8 <_isatty_r>:
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	4d06      	ldr	r5, [pc, #24]	@ (800b104 <_isatty_r+0x1c>)
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	602b      	str	r3, [r5, #0]
 800b0f4:	f7f7 fa62 	bl	80025bc <_isatty>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	d102      	bne.n	800b102 <_isatty_r+0x1a>
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	b103      	cbz	r3, 800b102 <_isatty_r+0x1a>
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	bd38      	pop	{r3, r4, r5, pc}
 800b104:	2000a72c 	.word	0x2000a72c

0800b108 <cos>:
 800b108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b10a:	ec53 2b10 	vmov	r2, r3, d0
 800b10e:	4826      	ldr	r0, [pc, #152]	@ (800b1a8 <cos+0xa0>)
 800b110:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b114:	4281      	cmp	r1, r0
 800b116:	d806      	bhi.n	800b126 <cos+0x1e>
 800b118:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b1a0 <cos+0x98>
 800b11c:	b005      	add	sp, #20
 800b11e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b122:	f000 b899 	b.w	800b258 <__kernel_cos>
 800b126:	4821      	ldr	r0, [pc, #132]	@ (800b1ac <cos+0xa4>)
 800b128:	4281      	cmp	r1, r0
 800b12a:	d908      	bls.n	800b13e <cos+0x36>
 800b12c:	4610      	mov	r0, r2
 800b12e:	4619      	mov	r1, r3
 800b130:	f7f5 f8aa 	bl	8000288 <__aeabi_dsub>
 800b134:	ec41 0b10 	vmov	d0, r0, r1
 800b138:	b005      	add	sp, #20
 800b13a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b13e:	4668      	mov	r0, sp
 800b140:	f000 fa0e 	bl	800b560 <__ieee754_rem_pio2>
 800b144:	f000 0003 	and.w	r0, r0, #3
 800b148:	2801      	cmp	r0, #1
 800b14a:	d00b      	beq.n	800b164 <cos+0x5c>
 800b14c:	2802      	cmp	r0, #2
 800b14e:	d015      	beq.n	800b17c <cos+0x74>
 800b150:	b9d8      	cbnz	r0, 800b18a <cos+0x82>
 800b152:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b156:	ed9d 0b00 	vldr	d0, [sp]
 800b15a:	f000 f87d 	bl	800b258 <__kernel_cos>
 800b15e:	ec51 0b10 	vmov	r0, r1, d0
 800b162:	e7e7      	b.n	800b134 <cos+0x2c>
 800b164:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b168:	ed9d 0b00 	vldr	d0, [sp]
 800b16c:	f000 f93c 	bl	800b3e8 <__kernel_sin>
 800b170:	ec53 2b10 	vmov	r2, r3, d0
 800b174:	4610      	mov	r0, r2
 800b176:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b17a:	e7db      	b.n	800b134 <cos+0x2c>
 800b17c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b180:	ed9d 0b00 	vldr	d0, [sp]
 800b184:	f000 f868 	bl	800b258 <__kernel_cos>
 800b188:	e7f2      	b.n	800b170 <cos+0x68>
 800b18a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b18e:	ed9d 0b00 	vldr	d0, [sp]
 800b192:	2001      	movs	r0, #1
 800b194:	f000 f928 	bl	800b3e8 <__kernel_sin>
 800b198:	e7e1      	b.n	800b15e <cos+0x56>
 800b19a:	bf00      	nop
 800b19c:	f3af 8000 	nop.w
	...
 800b1a8:	3fe921fb 	.word	0x3fe921fb
 800b1ac:	7fefffff 	.word	0x7fefffff

0800b1b0 <sin>:
 800b1b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1b2:	ec53 2b10 	vmov	r2, r3, d0
 800b1b6:	4826      	ldr	r0, [pc, #152]	@ (800b250 <sin+0xa0>)
 800b1b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b1bc:	4281      	cmp	r1, r0
 800b1be:	d807      	bhi.n	800b1d0 <sin+0x20>
 800b1c0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b248 <sin+0x98>
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	b005      	add	sp, #20
 800b1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1cc:	f000 b90c 	b.w	800b3e8 <__kernel_sin>
 800b1d0:	4820      	ldr	r0, [pc, #128]	@ (800b254 <sin+0xa4>)
 800b1d2:	4281      	cmp	r1, r0
 800b1d4:	d908      	bls.n	800b1e8 <sin+0x38>
 800b1d6:	4610      	mov	r0, r2
 800b1d8:	4619      	mov	r1, r3
 800b1da:	f7f5 f855 	bl	8000288 <__aeabi_dsub>
 800b1de:	ec41 0b10 	vmov	d0, r0, r1
 800b1e2:	b005      	add	sp, #20
 800b1e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1e8:	4668      	mov	r0, sp
 800b1ea:	f000 f9b9 	bl	800b560 <__ieee754_rem_pio2>
 800b1ee:	f000 0003 	and.w	r0, r0, #3
 800b1f2:	2801      	cmp	r0, #1
 800b1f4:	d00c      	beq.n	800b210 <sin+0x60>
 800b1f6:	2802      	cmp	r0, #2
 800b1f8:	d011      	beq.n	800b21e <sin+0x6e>
 800b1fa:	b9e8      	cbnz	r0, 800b238 <sin+0x88>
 800b1fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b200:	ed9d 0b00 	vldr	d0, [sp]
 800b204:	2001      	movs	r0, #1
 800b206:	f000 f8ef 	bl	800b3e8 <__kernel_sin>
 800b20a:	ec51 0b10 	vmov	r0, r1, d0
 800b20e:	e7e6      	b.n	800b1de <sin+0x2e>
 800b210:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b214:	ed9d 0b00 	vldr	d0, [sp]
 800b218:	f000 f81e 	bl	800b258 <__kernel_cos>
 800b21c:	e7f5      	b.n	800b20a <sin+0x5a>
 800b21e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b222:	ed9d 0b00 	vldr	d0, [sp]
 800b226:	2001      	movs	r0, #1
 800b228:	f000 f8de 	bl	800b3e8 <__kernel_sin>
 800b22c:	ec53 2b10 	vmov	r2, r3, d0
 800b230:	4610      	mov	r0, r2
 800b232:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b236:	e7d2      	b.n	800b1de <sin+0x2e>
 800b238:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b23c:	ed9d 0b00 	vldr	d0, [sp]
 800b240:	f000 f80a 	bl	800b258 <__kernel_cos>
 800b244:	e7f2      	b.n	800b22c <sin+0x7c>
 800b246:	bf00      	nop
	...
 800b250:	3fe921fb 	.word	0x3fe921fb
 800b254:	7fefffff 	.word	0x7fefffff

0800b258 <__kernel_cos>:
 800b258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	ec57 6b10 	vmov	r6, r7, d0
 800b260:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b264:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b268:	ed8d 1b00 	vstr	d1, [sp]
 800b26c:	d206      	bcs.n	800b27c <__kernel_cos+0x24>
 800b26e:	4630      	mov	r0, r6
 800b270:	4639      	mov	r1, r7
 800b272:	f7f5 fc71 	bl	8000b58 <__aeabi_d2iz>
 800b276:	2800      	cmp	r0, #0
 800b278:	f000 8088 	beq.w	800b38c <__kernel_cos+0x134>
 800b27c:	4632      	mov	r2, r6
 800b27e:	463b      	mov	r3, r7
 800b280:	4630      	mov	r0, r6
 800b282:	4639      	mov	r1, r7
 800b284:	f7f5 f9b8 	bl	80005f8 <__aeabi_dmul>
 800b288:	4b51      	ldr	r3, [pc, #324]	@ (800b3d0 <__kernel_cos+0x178>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	4604      	mov	r4, r0
 800b28e:	460d      	mov	r5, r1
 800b290:	f7f5 f9b2 	bl	80005f8 <__aeabi_dmul>
 800b294:	a340      	add	r3, pc, #256	@ (adr r3, 800b398 <__kernel_cos+0x140>)
 800b296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29a:	4682      	mov	sl, r0
 800b29c:	468b      	mov	fp, r1
 800b29e:	4620      	mov	r0, r4
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	f7f5 f9a9 	bl	80005f8 <__aeabi_dmul>
 800b2a6:	a33e      	add	r3, pc, #248	@ (adr r3, 800b3a0 <__kernel_cos+0x148>)
 800b2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ac:	f7f4 ffee 	bl	800028c <__adddf3>
 800b2b0:	4622      	mov	r2, r4
 800b2b2:	462b      	mov	r3, r5
 800b2b4:	f7f5 f9a0 	bl	80005f8 <__aeabi_dmul>
 800b2b8:	a33b      	add	r3, pc, #236	@ (adr r3, 800b3a8 <__kernel_cos+0x150>)
 800b2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2be:	f7f4 ffe3 	bl	8000288 <__aeabi_dsub>
 800b2c2:	4622      	mov	r2, r4
 800b2c4:	462b      	mov	r3, r5
 800b2c6:	f7f5 f997 	bl	80005f8 <__aeabi_dmul>
 800b2ca:	a339      	add	r3, pc, #228	@ (adr r3, 800b3b0 <__kernel_cos+0x158>)
 800b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d0:	f7f4 ffdc 	bl	800028c <__adddf3>
 800b2d4:	4622      	mov	r2, r4
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	f7f5 f98e 	bl	80005f8 <__aeabi_dmul>
 800b2dc:	a336      	add	r3, pc, #216	@ (adr r3, 800b3b8 <__kernel_cos+0x160>)
 800b2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e2:	f7f4 ffd1 	bl	8000288 <__aeabi_dsub>
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	462b      	mov	r3, r5
 800b2ea:	f7f5 f985 	bl	80005f8 <__aeabi_dmul>
 800b2ee:	a334      	add	r3, pc, #208	@ (adr r3, 800b3c0 <__kernel_cos+0x168>)
 800b2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f4:	f7f4 ffca 	bl	800028c <__adddf3>
 800b2f8:	4622      	mov	r2, r4
 800b2fa:	462b      	mov	r3, r5
 800b2fc:	f7f5 f97c 	bl	80005f8 <__aeabi_dmul>
 800b300:	4622      	mov	r2, r4
 800b302:	462b      	mov	r3, r5
 800b304:	f7f5 f978 	bl	80005f8 <__aeabi_dmul>
 800b308:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b30c:	4604      	mov	r4, r0
 800b30e:	460d      	mov	r5, r1
 800b310:	4630      	mov	r0, r6
 800b312:	4639      	mov	r1, r7
 800b314:	f7f5 f970 	bl	80005f8 <__aeabi_dmul>
 800b318:	460b      	mov	r3, r1
 800b31a:	4602      	mov	r2, r0
 800b31c:	4629      	mov	r1, r5
 800b31e:	4620      	mov	r0, r4
 800b320:	f7f4 ffb2 	bl	8000288 <__aeabi_dsub>
 800b324:	4b2b      	ldr	r3, [pc, #172]	@ (800b3d4 <__kernel_cos+0x17c>)
 800b326:	4598      	cmp	r8, r3
 800b328:	4606      	mov	r6, r0
 800b32a:	460f      	mov	r7, r1
 800b32c:	d810      	bhi.n	800b350 <__kernel_cos+0xf8>
 800b32e:	4602      	mov	r2, r0
 800b330:	460b      	mov	r3, r1
 800b332:	4650      	mov	r0, sl
 800b334:	4659      	mov	r1, fp
 800b336:	f7f4 ffa7 	bl	8000288 <__aeabi_dsub>
 800b33a:	460b      	mov	r3, r1
 800b33c:	4926      	ldr	r1, [pc, #152]	@ (800b3d8 <__kernel_cos+0x180>)
 800b33e:	4602      	mov	r2, r0
 800b340:	2000      	movs	r0, #0
 800b342:	f7f4 ffa1 	bl	8000288 <__aeabi_dsub>
 800b346:	ec41 0b10 	vmov	d0, r0, r1
 800b34a:	b003      	add	sp, #12
 800b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b350:	4b22      	ldr	r3, [pc, #136]	@ (800b3dc <__kernel_cos+0x184>)
 800b352:	4921      	ldr	r1, [pc, #132]	@ (800b3d8 <__kernel_cos+0x180>)
 800b354:	4598      	cmp	r8, r3
 800b356:	bf8c      	ite	hi
 800b358:	4d21      	ldrhi	r5, [pc, #132]	@ (800b3e0 <__kernel_cos+0x188>)
 800b35a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b35e:	2400      	movs	r4, #0
 800b360:	4622      	mov	r2, r4
 800b362:	462b      	mov	r3, r5
 800b364:	2000      	movs	r0, #0
 800b366:	f7f4 ff8f 	bl	8000288 <__aeabi_dsub>
 800b36a:	4622      	mov	r2, r4
 800b36c:	4680      	mov	r8, r0
 800b36e:	4689      	mov	r9, r1
 800b370:	462b      	mov	r3, r5
 800b372:	4650      	mov	r0, sl
 800b374:	4659      	mov	r1, fp
 800b376:	f7f4 ff87 	bl	8000288 <__aeabi_dsub>
 800b37a:	4632      	mov	r2, r6
 800b37c:	463b      	mov	r3, r7
 800b37e:	f7f4 ff83 	bl	8000288 <__aeabi_dsub>
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	4640      	mov	r0, r8
 800b388:	4649      	mov	r1, r9
 800b38a:	e7da      	b.n	800b342 <__kernel_cos+0xea>
 800b38c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b3c8 <__kernel_cos+0x170>
 800b390:	e7db      	b.n	800b34a <__kernel_cos+0xf2>
 800b392:	bf00      	nop
 800b394:	f3af 8000 	nop.w
 800b398:	be8838d4 	.word	0xbe8838d4
 800b39c:	bda8fae9 	.word	0xbda8fae9
 800b3a0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b3a4:	3e21ee9e 	.word	0x3e21ee9e
 800b3a8:	809c52ad 	.word	0x809c52ad
 800b3ac:	3e927e4f 	.word	0x3e927e4f
 800b3b0:	19cb1590 	.word	0x19cb1590
 800b3b4:	3efa01a0 	.word	0x3efa01a0
 800b3b8:	16c15177 	.word	0x16c15177
 800b3bc:	3f56c16c 	.word	0x3f56c16c
 800b3c0:	5555554c 	.word	0x5555554c
 800b3c4:	3fa55555 	.word	0x3fa55555
 800b3c8:	00000000 	.word	0x00000000
 800b3cc:	3ff00000 	.word	0x3ff00000
 800b3d0:	3fe00000 	.word	0x3fe00000
 800b3d4:	3fd33332 	.word	0x3fd33332
 800b3d8:	3ff00000 	.word	0x3ff00000
 800b3dc:	3fe90000 	.word	0x3fe90000
 800b3e0:	3fd20000 	.word	0x3fd20000
 800b3e4:	00000000 	.word	0x00000000

0800b3e8 <__kernel_sin>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	ec55 4b10 	vmov	r4, r5, d0
 800b3f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b3f4:	b085      	sub	sp, #20
 800b3f6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b3fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b3fe:	4680      	mov	r8, r0
 800b400:	d205      	bcs.n	800b40e <__kernel_sin+0x26>
 800b402:	4620      	mov	r0, r4
 800b404:	4629      	mov	r1, r5
 800b406:	f7f5 fba7 	bl	8000b58 <__aeabi_d2iz>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d052      	beq.n	800b4b4 <__kernel_sin+0xcc>
 800b40e:	4622      	mov	r2, r4
 800b410:	462b      	mov	r3, r5
 800b412:	4620      	mov	r0, r4
 800b414:	4629      	mov	r1, r5
 800b416:	f7f5 f8ef 	bl	80005f8 <__aeabi_dmul>
 800b41a:	4682      	mov	sl, r0
 800b41c:	468b      	mov	fp, r1
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	4620      	mov	r0, r4
 800b424:	4629      	mov	r1, r5
 800b426:	f7f5 f8e7 	bl	80005f8 <__aeabi_dmul>
 800b42a:	a342      	add	r3, pc, #264	@ (adr r3, 800b534 <__kernel_sin+0x14c>)
 800b42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b430:	e9cd 0100 	strd	r0, r1, [sp]
 800b434:	4650      	mov	r0, sl
 800b436:	4659      	mov	r1, fp
 800b438:	f7f5 f8de 	bl	80005f8 <__aeabi_dmul>
 800b43c:	a33f      	add	r3, pc, #252	@ (adr r3, 800b53c <__kernel_sin+0x154>)
 800b43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b442:	f7f4 ff21 	bl	8000288 <__aeabi_dsub>
 800b446:	4652      	mov	r2, sl
 800b448:	465b      	mov	r3, fp
 800b44a:	f7f5 f8d5 	bl	80005f8 <__aeabi_dmul>
 800b44e:	a33d      	add	r3, pc, #244	@ (adr r3, 800b544 <__kernel_sin+0x15c>)
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	f7f4 ff1a 	bl	800028c <__adddf3>
 800b458:	4652      	mov	r2, sl
 800b45a:	465b      	mov	r3, fp
 800b45c:	f7f5 f8cc 	bl	80005f8 <__aeabi_dmul>
 800b460:	a33a      	add	r3, pc, #232	@ (adr r3, 800b54c <__kernel_sin+0x164>)
 800b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b466:	f7f4 ff0f 	bl	8000288 <__aeabi_dsub>
 800b46a:	4652      	mov	r2, sl
 800b46c:	465b      	mov	r3, fp
 800b46e:	f7f5 f8c3 	bl	80005f8 <__aeabi_dmul>
 800b472:	a338      	add	r3, pc, #224	@ (adr r3, 800b554 <__kernel_sin+0x16c>)
 800b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b478:	f7f4 ff08 	bl	800028c <__adddf3>
 800b47c:	4606      	mov	r6, r0
 800b47e:	460f      	mov	r7, r1
 800b480:	f1b8 0f00 	cmp.w	r8, #0
 800b484:	d11b      	bne.n	800b4be <__kernel_sin+0xd6>
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	4650      	mov	r0, sl
 800b48c:	4659      	mov	r1, fp
 800b48e:	f7f5 f8b3 	bl	80005f8 <__aeabi_dmul>
 800b492:	a325      	add	r3, pc, #148	@ (adr r3, 800b528 <__kernel_sin+0x140>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	f7f4 fef6 	bl	8000288 <__aeabi_dsub>
 800b49c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4a0:	f7f5 f8aa 	bl	80005f8 <__aeabi_dmul>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	f7f4 feee 	bl	800028c <__adddf3>
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	460d      	mov	r5, r1
 800b4b4:	ec45 4b10 	vmov	d0, r4, r5
 800b4b8:	b005      	add	sp, #20
 800b4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4c2:	4b1b      	ldr	r3, [pc, #108]	@ (800b530 <__kernel_sin+0x148>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f7f5 f897 	bl	80005f8 <__aeabi_dmul>
 800b4ca:	4632      	mov	r2, r6
 800b4cc:	4680      	mov	r8, r0
 800b4ce:	4689      	mov	r9, r1
 800b4d0:	463b      	mov	r3, r7
 800b4d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4d6:	f7f5 f88f 	bl	80005f8 <__aeabi_dmul>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	4640      	mov	r0, r8
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	f7f4 fed1 	bl	8000288 <__aeabi_dsub>
 800b4e6:	4652      	mov	r2, sl
 800b4e8:	465b      	mov	r3, fp
 800b4ea:	f7f5 f885 	bl	80005f8 <__aeabi_dmul>
 800b4ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4f2:	f7f4 fec9 	bl	8000288 <__aeabi_dsub>
 800b4f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b528 <__kernel_sin+0x140>)
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	460f      	mov	r7, r1
 800b500:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b504:	f7f5 f878 	bl	80005f8 <__aeabi_dmul>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	4630      	mov	r0, r6
 800b50e:	4639      	mov	r1, r7
 800b510:	f7f4 febc 	bl	800028c <__adddf3>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	4620      	mov	r0, r4
 800b51a:	4629      	mov	r1, r5
 800b51c:	f7f4 feb4 	bl	8000288 <__aeabi_dsub>
 800b520:	e7c6      	b.n	800b4b0 <__kernel_sin+0xc8>
 800b522:	bf00      	nop
 800b524:	f3af 8000 	nop.w
 800b528:	55555549 	.word	0x55555549
 800b52c:	3fc55555 	.word	0x3fc55555
 800b530:	3fe00000 	.word	0x3fe00000
 800b534:	5acfd57c 	.word	0x5acfd57c
 800b538:	3de5d93a 	.word	0x3de5d93a
 800b53c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b540:	3e5ae5e6 	.word	0x3e5ae5e6
 800b544:	57b1fe7d 	.word	0x57b1fe7d
 800b548:	3ec71de3 	.word	0x3ec71de3
 800b54c:	19c161d5 	.word	0x19c161d5
 800b550:	3f2a01a0 	.word	0x3f2a01a0
 800b554:	1110f8a6 	.word	0x1110f8a6
 800b558:	3f811111 	.word	0x3f811111
 800b55c:	00000000 	.word	0x00000000

0800b560 <__ieee754_rem_pio2>:
 800b560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b564:	ec57 6b10 	vmov	r6, r7, d0
 800b568:	4bc5      	ldr	r3, [pc, #788]	@ (800b880 <__ieee754_rem_pio2+0x320>)
 800b56a:	b08d      	sub	sp, #52	@ 0x34
 800b56c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b570:	4598      	cmp	r8, r3
 800b572:	4604      	mov	r4, r0
 800b574:	9704      	str	r7, [sp, #16]
 800b576:	d807      	bhi.n	800b588 <__ieee754_rem_pio2+0x28>
 800b578:	2200      	movs	r2, #0
 800b57a:	2300      	movs	r3, #0
 800b57c:	ed80 0b00 	vstr	d0, [r0]
 800b580:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b584:	2500      	movs	r5, #0
 800b586:	e028      	b.n	800b5da <__ieee754_rem_pio2+0x7a>
 800b588:	4bbe      	ldr	r3, [pc, #760]	@ (800b884 <__ieee754_rem_pio2+0x324>)
 800b58a:	4598      	cmp	r8, r3
 800b58c:	d878      	bhi.n	800b680 <__ieee754_rem_pio2+0x120>
 800b58e:	9b04      	ldr	r3, [sp, #16]
 800b590:	4dbd      	ldr	r5, [pc, #756]	@ (800b888 <__ieee754_rem_pio2+0x328>)
 800b592:	2b00      	cmp	r3, #0
 800b594:	4630      	mov	r0, r6
 800b596:	a3ac      	add	r3, pc, #688	@ (adr r3, 800b848 <__ieee754_rem_pio2+0x2e8>)
 800b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59c:	4639      	mov	r1, r7
 800b59e:	dd38      	ble.n	800b612 <__ieee754_rem_pio2+0xb2>
 800b5a0:	f7f4 fe72 	bl	8000288 <__aeabi_dsub>
 800b5a4:	45a8      	cmp	r8, r5
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	460f      	mov	r7, r1
 800b5aa:	d01a      	beq.n	800b5e2 <__ieee754_rem_pio2+0x82>
 800b5ac:	a3a8      	add	r3, pc, #672	@ (adr r3, 800b850 <__ieee754_rem_pio2+0x2f0>)
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f7f4 fe69 	bl	8000288 <__aeabi_dsub>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4680      	mov	r8, r0
 800b5bc:	4689      	mov	r9, r1
 800b5be:	4630      	mov	r0, r6
 800b5c0:	4639      	mov	r1, r7
 800b5c2:	f7f4 fe61 	bl	8000288 <__aeabi_dsub>
 800b5c6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800b850 <__ieee754_rem_pio2+0x2f0>)
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	f7f4 fe5c 	bl	8000288 <__aeabi_dsub>
 800b5d0:	e9c4 8900 	strd	r8, r9, [r4]
 800b5d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b5d8:	2501      	movs	r5, #1
 800b5da:	4628      	mov	r0, r5
 800b5dc:	b00d      	add	sp, #52	@ 0x34
 800b5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e2:	a39d      	add	r3, pc, #628	@ (adr r3, 800b858 <__ieee754_rem_pio2+0x2f8>)
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	f7f4 fe4e 	bl	8000288 <__aeabi_dsub>
 800b5ec:	a39c      	add	r3, pc, #624	@ (adr r3, 800b860 <__ieee754_rem_pio2+0x300>)
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	460f      	mov	r7, r1
 800b5f6:	f7f4 fe47 	bl	8000288 <__aeabi_dsub>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	4680      	mov	r8, r0
 800b600:	4689      	mov	r9, r1
 800b602:	4630      	mov	r0, r6
 800b604:	4639      	mov	r1, r7
 800b606:	f7f4 fe3f 	bl	8000288 <__aeabi_dsub>
 800b60a:	a395      	add	r3, pc, #596	@ (adr r3, 800b860 <__ieee754_rem_pio2+0x300>)
 800b60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b610:	e7dc      	b.n	800b5cc <__ieee754_rem_pio2+0x6c>
 800b612:	f7f4 fe3b 	bl	800028c <__adddf3>
 800b616:	45a8      	cmp	r8, r5
 800b618:	4606      	mov	r6, r0
 800b61a:	460f      	mov	r7, r1
 800b61c:	d018      	beq.n	800b650 <__ieee754_rem_pio2+0xf0>
 800b61e:	a38c      	add	r3, pc, #560	@ (adr r3, 800b850 <__ieee754_rem_pio2+0x2f0>)
 800b620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b624:	f7f4 fe32 	bl	800028c <__adddf3>
 800b628:	4602      	mov	r2, r0
 800b62a:	460b      	mov	r3, r1
 800b62c:	4680      	mov	r8, r0
 800b62e:	4689      	mov	r9, r1
 800b630:	4630      	mov	r0, r6
 800b632:	4639      	mov	r1, r7
 800b634:	f7f4 fe28 	bl	8000288 <__aeabi_dsub>
 800b638:	a385      	add	r3, pc, #532	@ (adr r3, 800b850 <__ieee754_rem_pio2+0x2f0>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	f7f4 fe25 	bl	800028c <__adddf3>
 800b642:	f04f 35ff 	mov.w	r5, #4294967295
 800b646:	e9c4 8900 	strd	r8, r9, [r4]
 800b64a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b64e:	e7c4      	b.n	800b5da <__ieee754_rem_pio2+0x7a>
 800b650:	a381      	add	r3, pc, #516	@ (adr r3, 800b858 <__ieee754_rem_pio2+0x2f8>)
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	f7f4 fe19 	bl	800028c <__adddf3>
 800b65a:	a381      	add	r3, pc, #516	@ (adr r3, 800b860 <__ieee754_rem_pio2+0x300>)
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	4606      	mov	r6, r0
 800b662:	460f      	mov	r7, r1
 800b664:	f7f4 fe12 	bl	800028c <__adddf3>
 800b668:	4602      	mov	r2, r0
 800b66a:	460b      	mov	r3, r1
 800b66c:	4680      	mov	r8, r0
 800b66e:	4689      	mov	r9, r1
 800b670:	4630      	mov	r0, r6
 800b672:	4639      	mov	r1, r7
 800b674:	f7f4 fe08 	bl	8000288 <__aeabi_dsub>
 800b678:	a379      	add	r3, pc, #484	@ (adr r3, 800b860 <__ieee754_rem_pio2+0x300>)
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	e7de      	b.n	800b63e <__ieee754_rem_pio2+0xde>
 800b680:	4b82      	ldr	r3, [pc, #520]	@ (800b88c <__ieee754_rem_pio2+0x32c>)
 800b682:	4598      	cmp	r8, r3
 800b684:	f200 80d1 	bhi.w	800b82a <__ieee754_rem_pio2+0x2ca>
 800b688:	f000 f966 	bl	800b958 <fabs>
 800b68c:	ec57 6b10 	vmov	r6, r7, d0
 800b690:	a375      	add	r3, pc, #468	@ (adr r3, 800b868 <__ieee754_rem_pio2+0x308>)
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	4630      	mov	r0, r6
 800b698:	4639      	mov	r1, r7
 800b69a:	f7f4 ffad 	bl	80005f8 <__aeabi_dmul>
 800b69e:	4b7c      	ldr	r3, [pc, #496]	@ (800b890 <__ieee754_rem_pio2+0x330>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f7f4 fdf3 	bl	800028c <__adddf3>
 800b6a6:	f7f5 fa57 	bl	8000b58 <__aeabi_d2iz>
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	f7f4 ff3a 	bl	8000524 <__aeabi_i2d>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6b8:	a363      	add	r3, pc, #396	@ (adr r3, 800b848 <__ieee754_rem_pio2+0x2e8>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f7f4 ff9b 	bl	80005f8 <__aeabi_dmul>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	f7f4 fddd 	bl	8000288 <__aeabi_dsub>
 800b6ce:	a360      	add	r3, pc, #384	@ (adr r3, 800b850 <__ieee754_rem_pio2+0x2f0>)
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	4682      	mov	sl, r0
 800b6d6:	468b      	mov	fp, r1
 800b6d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6dc:	f7f4 ff8c 	bl	80005f8 <__aeabi_dmul>
 800b6e0:	2d1f      	cmp	r5, #31
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	460f      	mov	r7, r1
 800b6e6:	dc0c      	bgt.n	800b702 <__ieee754_rem_pio2+0x1a2>
 800b6e8:	4b6a      	ldr	r3, [pc, #424]	@ (800b894 <__ieee754_rem_pio2+0x334>)
 800b6ea:	1e6a      	subs	r2, r5, #1
 800b6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6f0:	4543      	cmp	r3, r8
 800b6f2:	d006      	beq.n	800b702 <__ieee754_rem_pio2+0x1a2>
 800b6f4:	4632      	mov	r2, r6
 800b6f6:	463b      	mov	r3, r7
 800b6f8:	4650      	mov	r0, sl
 800b6fa:	4659      	mov	r1, fp
 800b6fc:	f7f4 fdc4 	bl	8000288 <__aeabi_dsub>
 800b700:	e00e      	b.n	800b720 <__ieee754_rem_pio2+0x1c0>
 800b702:	463b      	mov	r3, r7
 800b704:	4632      	mov	r2, r6
 800b706:	4650      	mov	r0, sl
 800b708:	4659      	mov	r1, fp
 800b70a:	f7f4 fdbd 	bl	8000288 <__aeabi_dsub>
 800b70e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b712:	9305      	str	r3, [sp, #20]
 800b714:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b718:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b71c:	2b10      	cmp	r3, #16
 800b71e:	dc02      	bgt.n	800b726 <__ieee754_rem_pio2+0x1c6>
 800b720:	e9c4 0100 	strd	r0, r1, [r4]
 800b724:	e039      	b.n	800b79a <__ieee754_rem_pio2+0x23a>
 800b726:	a34c      	add	r3, pc, #304	@ (adr r3, 800b858 <__ieee754_rem_pio2+0x2f8>)
 800b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b730:	f7f4 ff62 	bl	80005f8 <__aeabi_dmul>
 800b734:	4606      	mov	r6, r0
 800b736:	460f      	mov	r7, r1
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	4650      	mov	r0, sl
 800b73e:	4659      	mov	r1, fp
 800b740:	f7f4 fda2 	bl	8000288 <__aeabi_dsub>
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	4680      	mov	r8, r0
 800b74a:	4689      	mov	r9, r1
 800b74c:	4650      	mov	r0, sl
 800b74e:	4659      	mov	r1, fp
 800b750:	f7f4 fd9a 	bl	8000288 <__aeabi_dsub>
 800b754:	4632      	mov	r2, r6
 800b756:	463b      	mov	r3, r7
 800b758:	f7f4 fd96 	bl	8000288 <__aeabi_dsub>
 800b75c:	a340      	add	r3, pc, #256	@ (adr r3, 800b860 <__ieee754_rem_pio2+0x300>)
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	4606      	mov	r6, r0
 800b764:	460f      	mov	r7, r1
 800b766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b76a:	f7f4 ff45 	bl	80005f8 <__aeabi_dmul>
 800b76e:	4632      	mov	r2, r6
 800b770:	463b      	mov	r3, r7
 800b772:	f7f4 fd89 	bl	8000288 <__aeabi_dsub>
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	4606      	mov	r6, r0
 800b77c:	460f      	mov	r7, r1
 800b77e:	4640      	mov	r0, r8
 800b780:	4649      	mov	r1, r9
 800b782:	f7f4 fd81 	bl	8000288 <__aeabi_dsub>
 800b786:	9a05      	ldr	r2, [sp, #20]
 800b788:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	2b31      	cmp	r3, #49	@ 0x31
 800b790:	dc20      	bgt.n	800b7d4 <__ieee754_rem_pio2+0x274>
 800b792:	e9c4 0100 	strd	r0, r1, [r4]
 800b796:	46c2      	mov	sl, r8
 800b798:	46cb      	mov	fp, r9
 800b79a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b79e:	4650      	mov	r0, sl
 800b7a0:	4642      	mov	r2, r8
 800b7a2:	464b      	mov	r3, r9
 800b7a4:	4659      	mov	r1, fp
 800b7a6:	f7f4 fd6f 	bl	8000288 <__aeabi_dsub>
 800b7aa:	463b      	mov	r3, r7
 800b7ac:	4632      	mov	r2, r6
 800b7ae:	f7f4 fd6b 	bl	8000288 <__aeabi_dsub>
 800b7b2:	9b04      	ldr	r3, [sp, #16]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b7ba:	f6bf af0e 	bge.w	800b5da <__ieee754_rem_pio2+0x7a>
 800b7be:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800b7c2:	6063      	str	r3, [r4, #4]
 800b7c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b7c8:	f8c4 8000 	str.w	r8, [r4]
 800b7cc:	60a0      	str	r0, [r4, #8]
 800b7ce:	60e3      	str	r3, [r4, #12]
 800b7d0:	426d      	negs	r5, r5
 800b7d2:	e702      	b.n	800b5da <__ieee754_rem_pio2+0x7a>
 800b7d4:	a326      	add	r3, pc, #152	@ (adr r3, 800b870 <__ieee754_rem_pio2+0x310>)
 800b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7de:	f7f4 ff0b 	bl	80005f8 <__aeabi_dmul>
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	460f      	mov	r7, r1
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	f7f4 fd4b 	bl	8000288 <__aeabi_dsub>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	4682      	mov	sl, r0
 800b7f8:	468b      	mov	fp, r1
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	f7f4 fd43 	bl	8000288 <__aeabi_dsub>
 800b802:	4632      	mov	r2, r6
 800b804:	463b      	mov	r3, r7
 800b806:	f7f4 fd3f 	bl	8000288 <__aeabi_dsub>
 800b80a:	a31b      	add	r3, pc, #108	@ (adr r3, 800b878 <__ieee754_rem_pio2+0x318>)
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	4606      	mov	r6, r0
 800b812:	460f      	mov	r7, r1
 800b814:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b818:	f7f4 feee 	bl	80005f8 <__aeabi_dmul>
 800b81c:	4632      	mov	r2, r6
 800b81e:	463b      	mov	r3, r7
 800b820:	f7f4 fd32 	bl	8000288 <__aeabi_dsub>
 800b824:	4606      	mov	r6, r0
 800b826:	460f      	mov	r7, r1
 800b828:	e764      	b.n	800b6f4 <__ieee754_rem_pio2+0x194>
 800b82a:	4b1b      	ldr	r3, [pc, #108]	@ (800b898 <__ieee754_rem_pio2+0x338>)
 800b82c:	4598      	cmp	r8, r3
 800b82e:	d935      	bls.n	800b89c <__ieee754_rem_pio2+0x33c>
 800b830:	4632      	mov	r2, r6
 800b832:	463b      	mov	r3, r7
 800b834:	4630      	mov	r0, r6
 800b836:	4639      	mov	r1, r7
 800b838:	f7f4 fd26 	bl	8000288 <__aeabi_dsub>
 800b83c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b840:	e9c4 0100 	strd	r0, r1, [r4]
 800b844:	e69e      	b.n	800b584 <__ieee754_rem_pio2+0x24>
 800b846:	bf00      	nop
 800b848:	54400000 	.word	0x54400000
 800b84c:	3ff921fb 	.word	0x3ff921fb
 800b850:	1a626331 	.word	0x1a626331
 800b854:	3dd0b461 	.word	0x3dd0b461
 800b858:	1a600000 	.word	0x1a600000
 800b85c:	3dd0b461 	.word	0x3dd0b461
 800b860:	2e037073 	.word	0x2e037073
 800b864:	3ba3198a 	.word	0x3ba3198a
 800b868:	6dc9c883 	.word	0x6dc9c883
 800b86c:	3fe45f30 	.word	0x3fe45f30
 800b870:	2e000000 	.word	0x2e000000
 800b874:	3ba3198a 	.word	0x3ba3198a
 800b878:	252049c1 	.word	0x252049c1
 800b87c:	397b839a 	.word	0x397b839a
 800b880:	3fe921fb 	.word	0x3fe921fb
 800b884:	4002d97b 	.word	0x4002d97b
 800b888:	3ff921fb 	.word	0x3ff921fb
 800b88c:	413921fb 	.word	0x413921fb
 800b890:	3fe00000 	.word	0x3fe00000
 800b894:	0800c5fc 	.word	0x0800c5fc
 800b898:	7fefffff 	.word	0x7fefffff
 800b89c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b8a0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800b8a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	460f      	mov	r7, r1
 800b8ac:	f7f5 f954 	bl	8000b58 <__aeabi_d2iz>
 800b8b0:	f7f4 fe38 	bl	8000524 <__aeabi_i2d>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	4639      	mov	r1, r7
 800b8bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b8c0:	f7f4 fce2 	bl	8000288 <__aeabi_dsub>
 800b8c4:	4b22      	ldr	r3, [pc, #136]	@ (800b950 <__ieee754_rem_pio2+0x3f0>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f7f4 fe96 	bl	80005f8 <__aeabi_dmul>
 800b8cc:	460f      	mov	r7, r1
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	f7f5 f942 	bl	8000b58 <__aeabi_d2iz>
 800b8d4:	f7f4 fe26 	bl	8000524 <__aeabi_i2d>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4630      	mov	r0, r6
 800b8de:	4639      	mov	r1, r7
 800b8e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b8e4:	f7f4 fcd0 	bl	8000288 <__aeabi_dsub>
 800b8e8:	4b19      	ldr	r3, [pc, #100]	@ (800b950 <__ieee754_rem_pio2+0x3f0>)
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f7f4 fe84 	bl	80005f8 <__aeabi_dmul>
 800b8f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800b8f4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800b8f8:	f04f 0803 	mov.w	r8, #3
 800b8fc:	2600      	movs	r6, #0
 800b8fe:	2700      	movs	r7, #0
 800b900:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b904:	4632      	mov	r2, r6
 800b906:	463b      	mov	r3, r7
 800b908:	46c2      	mov	sl, r8
 800b90a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b90e:	f7f5 f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 800b912:	2800      	cmp	r0, #0
 800b914:	d1f4      	bne.n	800b900 <__ieee754_rem_pio2+0x3a0>
 800b916:	4b0f      	ldr	r3, [pc, #60]	@ (800b954 <__ieee754_rem_pio2+0x3f4>)
 800b918:	9301      	str	r3, [sp, #4]
 800b91a:	2302      	movs	r3, #2
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	462a      	mov	r2, r5
 800b920:	4653      	mov	r3, sl
 800b922:	4621      	mov	r1, r4
 800b924:	a806      	add	r0, sp, #24
 800b926:	f000 f81f 	bl	800b968 <__kernel_rem_pio2>
 800b92a:	9b04      	ldr	r3, [sp, #16]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	4605      	mov	r5, r0
 800b930:	f6bf ae53 	bge.w	800b5da <__ieee754_rem_pio2+0x7a>
 800b934:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b938:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b93c:	e9c4 2300 	strd	r2, r3, [r4]
 800b940:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b944:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b948:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b94c:	e740      	b.n	800b7d0 <__ieee754_rem_pio2+0x270>
 800b94e:	bf00      	nop
 800b950:	41700000 	.word	0x41700000
 800b954:	0800c67c 	.word	0x0800c67c

0800b958 <fabs>:
 800b958:	ec51 0b10 	vmov	r0, r1, d0
 800b95c:	4602      	mov	r2, r0
 800b95e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b962:	ec43 2b10 	vmov	d0, r2, r3
 800b966:	4770      	bx	lr

0800b968 <__kernel_rem_pio2>:
 800b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	ed2d 8b02 	vpush	{d8}
 800b970:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b974:	f112 0f14 	cmn.w	r2, #20
 800b978:	9306      	str	r3, [sp, #24]
 800b97a:	9104      	str	r1, [sp, #16]
 800b97c:	4bc2      	ldr	r3, [pc, #776]	@ (800bc88 <__kernel_rem_pio2+0x320>)
 800b97e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800b980:	9008      	str	r0, [sp, #32]
 800b982:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	9b06      	ldr	r3, [sp, #24]
 800b98a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b98e:	bfa8      	it	ge
 800b990:	1ed4      	subge	r4, r2, #3
 800b992:	9305      	str	r3, [sp, #20]
 800b994:	bfb2      	itee	lt
 800b996:	2400      	movlt	r4, #0
 800b998:	2318      	movge	r3, #24
 800b99a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b99e:	f06f 0317 	mvn.w	r3, #23
 800b9a2:	fb04 3303 	mla	r3, r4, r3, r3
 800b9a6:	eb03 0b02 	add.w	fp, r3, r2
 800b9aa:	9b00      	ldr	r3, [sp, #0]
 800b9ac:	9a05      	ldr	r2, [sp, #20]
 800b9ae:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800bc78 <__kernel_rem_pio2+0x310>
 800b9b2:	eb03 0802 	add.w	r8, r3, r2
 800b9b6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b9b8:	1aa7      	subs	r7, r4, r2
 800b9ba:	ae20      	add	r6, sp, #128	@ 0x80
 800b9bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b9c0:	2500      	movs	r5, #0
 800b9c2:	4545      	cmp	r5, r8
 800b9c4:	dd12      	ble.n	800b9ec <__kernel_rem_pio2+0x84>
 800b9c6:	9b06      	ldr	r3, [sp, #24]
 800b9c8:	aa20      	add	r2, sp, #128	@ 0x80
 800b9ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b9ce:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800b9d2:	2700      	movs	r7, #0
 800b9d4:	9b00      	ldr	r3, [sp, #0]
 800b9d6:	429f      	cmp	r7, r3
 800b9d8:	dc2e      	bgt.n	800ba38 <__kernel_rem_pio2+0xd0>
 800b9da:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800bc78 <__kernel_rem_pio2+0x310>
 800b9de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b9e6:	46a8      	mov	r8, r5
 800b9e8:	2600      	movs	r6, #0
 800b9ea:	e01b      	b.n	800ba24 <__kernel_rem_pio2+0xbc>
 800b9ec:	42ef      	cmn	r7, r5
 800b9ee:	d407      	bmi.n	800ba00 <__kernel_rem_pio2+0x98>
 800b9f0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b9f4:	f7f4 fd96 	bl	8000524 <__aeabi_i2d>
 800b9f8:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b9fc:	3501      	adds	r5, #1
 800b9fe:	e7e0      	b.n	800b9c2 <__kernel_rem_pio2+0x5a>
 800ba00:	ec51 0b18 	vmov	r0, r1, d8
 800ba04:	e7f8      	b.n	800b9f8 <__kernel_rem_pio2+0x90>
 800ba06:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800ba0a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ba0e:	f7f4 fdf3 	bl	80005f8 <__aeabi_dmul>
 800ba12:	4602      	mov	r2, r0
 800ba14:	460b      	mov	r3, r1
 800ba16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba1a:	f7f4 fc37 	bl	800028c <__adddf3>
 800ba1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba22:	3601      	adds	r6, #1
 800ba24:	9b05      	ldr	r3, [sp, #20]
 800ba26:	429e      	cmp	r6, r3
 800ba28:	dded      	ble.n	800ba06 <__kernel_rem_pio2+0x9e>
 800ba2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba2e:	3701      	adds	r7, #1
 800ba30:	ecaa 7b02 	vstmia	sl!, {d7}
 800ba34:	3508      	adds	r5, #8
 800ba36:	e7cd      	b.n	800b9d4 <__kernel_rem_pio2+0x6c>
 800ba38:	9b00      	ldr	r3, [sp, #0]
 800ba3a:	f8dd 8000 	ldr.w	r8, [sp]
 800ba3e:	aa0c      	add	r2, sp, #48	@ 0x30
 800ba40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba44:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba46:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ba48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ba4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba4e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ba52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba54:	ab98      	add	r3, sp, #608	@ 0x260
 800ba56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ba5a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800ba5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba62:	ac0c      	add	r4, sp, #48	@ 0x30
 800ba64:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ba66:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ba6a:	46a1      	mov	r9, r4
 800ba6c:	46c2      	mov	sl, r8
 800ba6e:	f1ba 0f00 	cmp.w	sl, #0
 800ba72:	dc77      	bgt.n	800bb64 <__kernel_rem_pio2+0x1fc>
 800ba74:	4658      	mov	r0, fp
 800ba76:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ba7a:	f000 fac5 	bl	800c008 <scalbn>
 800ba7e:	ec57 6b10 	vmov	r6, r7, d0
 800ba82:	2200      	movs	r2, #0
 800ba84:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ba88:	4630      	mov	r0, r6
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	f7f4 fdb4 	bl	80005f8 <__aeabi_dmul>
 800ba90:	ec41 0b10 	vmov	d0, r0, r1
 800ba94:	f000 fb34 	bl	800c100 <floor>
 800ba98:	4b7c      	ldr	r3, [pc, #496]	@ (800bc8c <__kernel_rem_pio2+0x324>)
 800ba9a:	ec51 0b10 	vmov	r0, r1, d0
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f7f4 fdaa 	bl	80005f8 <__aeabi_dmul>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4630      	mov	r0, r6
 800baaa:	4639      	mov	r1, r7
 800baac:	f7f4 fbec 	bl	8000288 <__aeabi_dsub>
 800bab0:	460f      	mov	r7, r1
 800bab2:	4606      	mov	r6, r0
 800bab4:	f7f5 f850 	bl	8000b58 <__aeabi_d2iz>
 800bab8:	9002      	str	r0, [sp, #8]
 800baba:	f7f4 fd33 	bl	8000524 <__aeabi_i2d>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	4630      	mov	r0, r6
 800bac4:	4639      	mov	r1, r7
 800bac6:	f7f4 fbdf 	bl	8000288 <__aeabi_dsub>
 800baca:	f1bb 0f00 	cmp.w	fp, #0
 800bace:	4606      	mov	r6, r0
 800bad0:	460f      	mov	r7, r1
 800bad2:	dd6c      	ble.n	800bbae <__kernel_rem_pio2+0x246>
 800bad4:	f108 31ff 	add.w	r1, r8, #4294967295
 800bad8:	ab0c      	add	r3, sp, #48	@ 0x30
 800bada:	9d02      	ldr	r5, [sp, #8]
 800badc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bae0:	f1cb 0018 	rsb	r0, fp, #24
 800bae4:	fa43 f200 	asr.w	r2, r3, r0
 800bae8:	4415      	add	r5, r2
 800baea:	4082      	lsls	r2, r0
 800baec:	1a9b      	subs	r3, r3, r2
 800baee:	aa0c      	add	r2, sp, #48	@ 0x30
 800baf0:	9502      	str	r5, [sp, #8]
 800baf2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800baf6:	f1cb 0217 	rsb	r2, fp, #23
 800bafa:	fa43 f902 	asr.w	r9, r3, r2
 800bafe:	f1b9 0f00 	cmp.w	r9, #0
 800bb02:	dd64      	ble.n	800bbce <__kernel_rem_pio2+0x266>
 800bb04:	9b02      	ldr	r3, [sp, #8]
 800bb06:	2200      	movs	r2, #0
 800bb08:	3301      	adds	r3, #1
 800bb0a:	9302      	str	r3, [sp, #8]
 800bb0c:	4615      	mov	r5, r2
 800bb0e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800bb12:	4590      	cmp	r8, r2
 800bb14:	f300 80a1 	bgt.w	800bc5a <__kernel_rem_pio2+0x2f2>
 800bb18:	f1bb 0f00 	cmp.w	fp, #0
 800bb1c:	dd07      	ble.n	800bb2e <__kernel_rem_pio2+0x1c6>
 800bb1e:	f1bb 0f01 	cmp.w	fp, #1
 800bb22:	f000 80c1 	beq.w	800bca8 <__kernel_rem_pio2+0x340>
 800bb26:	f1bb 0f02 	cmp.w	fp, #2
 800bb2a:	f000 80c8 	beq.w	800bcbe <__kernel_rem_pio2+0x356>
 800bb2e:	f1b9 0f02 	cmp.w	r9, #2
 800bb32:	d14c      	bne.n	800bbce <__kernel_rem_pio2+0x266>
 800bb34:	4632      	mov	r2, r6
 800bb36:	463b      	mov	r3, r7
 800bb38:	4955      	ldr	r1, [pc, #340]	@ (800bc90 <__kernel_rem_pio2+0x328>)
 800bb3a:	2000      	movs	r0, #0
 800bb3c:	f7f4 fba4 	bl	8000288 <__aeabi_dsub>
 800bb40:	4606      	mov	r6, r0
 800bb42:	460f      	mov	r7, r1
 800bb44:	2d00      	cmp	r5, #0
 800bb46:	d042      	beq.n	800bbce <__kernel_rem_pio2+0x266>
 800bb48:	4658      	mov	r0, fp
 800bb4a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800bc80 <__kernel_rem_pio2+0x318>
 800bb4e:	f000 fa5b 	bl	800c008 <scalbn>
 800bb52:	4630      	mov	r0, r6
 800bb54:	4639      	mov	r1, r7
 800bb56:	ec53 2b10 	vmov	r2, r3, d0
 800bb5a:	f7f4 fb95 	bl	8000288 <__aeabi_dsub>
 800bb5e:	4606      	mov	r6, r0
 800bb60:	460f      	mov	r7, r1
 800bb62:	e034      	b.n	800bbce <__kernel_rem_pio2+0x266>
 800bb64:	4b4b      	ldr	r3, [pc, #300]	@ (800bc94 <__kernel_rem_pio2+0x32c>)
 800bb66:	2200      	movs	r2, #0
 800bb68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb6c:	f7f4 fd44 	bl	80005f8 <__aeabi_dmul>
 800bb70:	f7f4 fff2 	bl	8000b58 <__aeabi_d2iz>
 800bb74:	f7f4 fcd6 	bl	8000524 <__aeabi_i2d>
 800bb78:	4b47      	ldr	r3, [pc, #284]	@ (800bc98 <__kernel_rem_pio2+0x330>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	460f      	mov	r7, r1
 800bb80:	f7f4 fd3a 	bl	80005f8 <__aeabi_dmul>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb8c:	f7f4 fb7c 	bl	8000288 <__aeabi_dsub>
 800bb90:	f7f4 ffe2 	bl	8000b58 <__aeabi_d2iz>
 800bb94:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bb98:	f849 0b04 	str.w	r0, [r9], #4
 800bb9c:	4639      	mov	r1, r7
 800bb9e:	4630      	mov	r0, r6
 800bba0:	f7f4 fb74 	bl	800028c <__adddf3>
 800bba4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbac:	e75f      	b.n	800ba6e <__kernel_rem_pio2+0x106>
 800bbae:	d107      	bne.n	800bbc0 <__kernel_rem_pio2+0x258>
 800bbb0:	f108 33ff 	add.w	r3, r8, #4294967295
 800bbb4:	aa0c      	add	r2, sp, #48	@ 0x30
 800bbb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbba:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800bbbe:	e79e      	b.n	800bafe <__kernel_rem_pio2+0x196>
 800bbc0:	4b36      	ldr	r3, [pc, #216]	@ (800bc9c <__kernel_rem_pio2+0x334>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f7f4 ff9e 	bl	8000b04 <__aeabi_dcmpge>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d143      	bne.n	800bc54 <__kernel_rem_pio2+0x2ec>
 800bbcc:	4681      	mov	r9, r0
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	f7f4 ff77 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	f000 80c1 	beq.w	800bd62 <__kernel_rem_pio2+0x3fa>
 800bbe0:	f108 33ff 	add.w	r3, r8, #4294967295
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	9900      	ldr	r1, [sp, #0]
 800bbe8:	428b      	cmp	r3, r1
 800bbea:	da70      	bge.n	800bcce <__kernel_rem_pio2+0x366>
 800bbec:	2a00      	cmp	r2, #0
 800bbee:	f000 808b 	beq.w	800bd08 <__kernel_rem_pio2+0x3a0>
 800bbf2:	f108 38ff 	add.w	r8, r8, #4294967295
 800bbf6:	ab0c      	add	r3, sp, #48	@ 0x30
 800bbf8:	f1ab 0b18 	sub.w	fp, fp, #24
 800bbfc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d0f6      	beq.n	800bbf2 <__kernel_rem_pio2+0x28a>
 800bc04:	4658      	mov	r0, fp
 800bc06:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800bc80 <__kernel_rem_pio2+0x318>
 800bc0a:	f000 f9fd 	bl	800c008 <scalbn>
 800bc0e:	f108 0301 	add.w	r3, r8, #1
 800bc12:	00da      	lsls	r2, r3, #3
 800bc14:	9205      	str	r2, [sp, #20]
 800bc16:	ec55 4b10 	vmov	r4, r5, d0
 800bc1a:	aa70      	add	r2, sp, #448	@ 0x1c0
 800bc1c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800bc94 <__kernel_rem_pio2+0x32c>
 800bc20:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800bc24:	4646      	mov	r6, r8
 800bc26:	f04f 0a00 	mov.w	sl, #0
 800bc2a:	2e00      	cmp	r6, #0
 800bc2c:	f280 80d1 	bge.w	800bdd2 <__kernel_rem_pio2+0x46a>
 800bc30:	4644      	mov	r4, r8
 800bc32:	2c00      	cmp	r4, #0
 800bc34:	f2c0 80ff 	blt.w	800be36 <__kernel_rem_pio2+0x4ce>
 800bc38:	4b19      	ldr	r3, [pc, #100]	@ (800bca0 <__kernel_rem_pio2+0x338>)
 800bc3a:	461f      	mov	r7, r3
 800bc3c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bc3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc42:	9306      	str	r3, [sp, #24]
 800bc44:	f04f 0a00 	mov.w	sl, #0
 800bc48:	f04f 0b00 	mov.w	fp, #0
 800bc4c:	2600      	movs	r6, #0
 800bc4e:	eba8 0504 	sub.w	r5, r8, r4
 800bc52:	e0e4      	b.n	800be1e <__kernel_rem_pio2+0x4b6>
 800bc54:	f04f 0902 	mov.w	r9, #2
 800bc58:	e754      	b.n	800bb04 <__kernel_rem_pio2+0x19c>
 800bc5a:	f854 3b04 	ldr.w	r3, [r4], #4
 800bc5e:	bb0d      	cbnz	r5, 800bca4 <__kernel_rem_pio2+0x33c>
 800bc60:	b123      	cbz	r3, 800bc6c <__kernel_rem_pio2+0x304>
 800bc62:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800bc66:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	3201      	adds	r2, #1
 800bc6e:	461d      	mov	r5, r3
 800bc70:	e74f      	b.n	800bb12 <__kernel_rem_pio2+0x1aa>
 800bc72:	bf00      	nop
 800bc74:	f3af 8000 	nop.w
	...
 800bc84:	3ff00000 	.word	0x3ff00000
 800bc88:	0800c7c8 	.word	0x0800c7c8
 800bc8c:	40200000 	.word	0x40200000
 800bc90:	3ff00000 	.word	0x3ff00000
 800bc94:	3e700000 	.word	0x3e700000
 800bc98:	41700000 	.word	0x41700000
 800bc9c:	3fe00000 	.word	0x3fe00000
 800bca0:	0800c788 	.word	0x0800c788
 800bca4:	1acb      	subs	r3, r1, r3
 800bca6:	e7de      	b.n	800bc66 <__kernel_rem_pio2+0x2fe>
 800bca8:	f108 32ff 	add.w	r2, r8, #4294967295
 800bcac:	ab0c      	add	r3, sp, #48	@ 0x30
 800bcae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bcb6:	a90c      	add	r1, sp, #48	@ 0x30
 800bcb8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bcbc:	e737      	b.n	800bb2e <__kernel_rem_pio2+0x1c6>
 800bcbe:	f108 32ff 	add.w	r2, r8, #4294967295
 800bcc2:	ab0c      	add	r3, sp, #48	@ 0x30
 800bcc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bccc:	e7f3      	b.n	800bcb6 <__kernel_rem_pio2+0x34e>
 800bcce:	a90c      	add	r1, sp, #48	@ 0x30
 800bcd0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	e785      	b.n	800bbe6 <__kernel_rem_pio2+0x27e>
 800bcda:	3401      	adds	r4, #1
 800bcdc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bce0:	2a00      	cmp	r2, #0
 800bce2:	d0fa      	beq.n	800bcda <__kernel_rem_pio2+0x372>
 800bce4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bce6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bcea:	eb0d 0503 	add.w	r5, sp, r3
 800bcee:	9b06      	ldr	r3, [sp, #24]
 800bcf0:	aa20      	add	r2, sp, #128	@ 0x80
 800bcf2:	4443      	add	r3, r8
 800bcf4:	f108 0701 	add.w	r7, r8, #1
 800bcf8:	3d98      	subs	r5, #152	@ 0x98
 800bcfa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800bcfe:	4444      	add	r4, r8
 800bd00:	42bc      	cmp	r4, r7
 800bd02:	da04      	bge.n	800bd0e <__kernel_rem_pio2+0x3a6>
 800bd04:	46a0      	mov	r8, r4
 800bd06:	e6a2      	b.n	800ba4e <__kernel_rem_pio2+0xe6>
 800bd08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd0a:	2401      	movs	r4, #1
 800bd0c:	e7e6      	b.n	800bcdc <__kernel_rem_pio2+0x374>
 800bd0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd10:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bd14:	f7f4 fc06 	bl	8000524 <__aeabi_i2d>
 800bd18:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800bfd8 <__kernel_rem_pio2+0x670>
 800bd1c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bd20:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd28:	46b2      	mov	sl, r6
 800bd2a:	f04f 0800 	mov.w	r8, #0
 800bd2e:	9b05      	ldr	r3, [sp, #20]
 800bd30:	4598      	cmp	r8, r3
 800bd32:	dd05      	ble.n	800bd40 <__kernel_rem_pio2+0x3d8>
 800bd34:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd38:	3701      	adds	r7, #1
 800bd3a:	eca5 7b02 	vstmia	r5!, {d7}
 800bd3e:	e7df      	b.n	800bd00 <__kernel_rem_pio2+0x398>
 800bd40:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800bd44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bd48:	f7f4 fc56 	bl	80005f8 <__aeabi_dmul>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd54:	f7f4 fa9a 	bl	800028c <__adddf3>
 800bd58:	f108 0801 	add.w	r8, r8, #1
 800bd5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd60:	e7e5      	b.n	800bd2e <__kernel_rem_pio2+0x3c6>
 800bd62:	f1cb 0000 	rsb	r0, fp, #0
 800bd66:	ec47 6b10 	vmov	d0, r6, r7
 800bd6a:	f000 f94d 	bl	800c008 <scalbn>
 800bd6e:	ec55 4b10 	vmov	r4, r5, d0
 800bd72:	4b9b      	ldr	r3, [pc, #620]	@ (800bfe0 <__kernel_rem_pio2+0x678>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	4620      	mov	r0, r4
 800bd78:	4629      	mov	r1, r5
 800bd7a:	f7f4 fec3 	bl	8000b04 <__aeabi_dcmpge>
 800bd7e:	b300      	cbz	r0, 800bdc2 <__kernel_rem_pio2+0x45a>
 800bd80:	4b98      	ldr	r3, [pc, #608]	@ (800bfe4 <__kernel_rem_pio2+0x67c>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	4620      	mov	r0, r4
 800bd86:	4629      	mov	r1, r5
 800bd88:	f7f4 fc36 	bl	80005f8 <__aeabi_dmul>
 800bd8c:	f7f4 fee4 	bl	8000b58 <__aeabi_d2iz>
 800bd90:	4606      	mov	r6, r0
 800bd92:	f7f4 fbc7 	bl	8000524 <__aeabi_i2d>
 800bd96:	4b92      	ldr	r3, [pc, #584]	@ (800bfe0 <__kernel_rem_pio2+0x678>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f7f4 fc2d 	bl	80005f8 <__aeabi_dmul>
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4602      	mov	r2, r0
 800bda2:	4629      	mov	r1, r5
 800bda4:	4620      	mov	r0, r4
 800bda6:	f7f4 fa6f 	bl	8000288 <__aeabi_dsub>
 800bdaa:	f7f4 fed5 	bl	8000b58 <__aeabi_d2iz>
 800bdae:	ab0c      	add	r3, sp, #48	@ 0x30
 800bdb0:	f10b 0b18 	add.w	fp, fp, #24
 800bdb4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800bdb8:	f108 0801 	add.w	r8, r8, #1
 800bdbc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800bdc0:	e720      	b.n	800bc04 <__kernel_rem_pio2+0x29c>
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	f7f4 fec7 	bl	8000b58 <__aeabi_d2iz>
 800bdca:	ab0c      	add	r3, sp, #48	@ 0x30
 800bdcc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800bdd0:	e718      	b.n	800bc04 <__kernel_rem_pio2+0x29c>
 800bdd2:	ab0c      	add	r3, sp, #48	@ 0x30
 800bdd4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bdd8:	f7f4 fba4 	bl	8000524 <__aeabi_i2d>
 800bddc:	4622      	mov	r2, r4
 800bdde:	462b      	mov	r3, r5
 800bde0:	f7f4 fc0a 	bl	80005f8 <__aeabi_dmul>
 800bde4:	4652      	mov	r2, sl
 800bde6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800bdea:	465b      	mov	r3, fp
 800bdec:	4620      	mov	r0, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	f7f4 fc02 	bl	80005f8 <__aeabi_dmul>
 800bdf4:	3e01      	subs	r6, #1
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	460d      	mov	r5, r1
 800bdfa:	e716      	b.n	800bc2a <__kernel_rem_pio2+0x2c2>
 800bdfc:	9906      	ldr	r1, [sp, #24]
 800bdfe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800be02:	9106      	str	r1, [sp, #24]
 800be04:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800be08:	f7f4 fbf6 	bl	80005f8 <__aeabi_dmul>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4650      	mov	r0, sl
 800be12:	4659      	mov	r1, fp
 800be14:	f7f4 fa3a 	bl	800028c <__adddf3>
 800be18:	3601      	adds	r6, #1
 800be1a:	4682      	mov	sl, r0
 800be1c:	468b      	mov	fp, r1
 800be1e:	9b00      	ldr	r3, [sp, #0]
 800be20:	429e      	cmp	r6, r3
 800be22:	dc01      	bgt.n	800be28 <__kernel_rem_pio2+0x4c0>
 800be24:	42ae      	cmp	r6, r5
 800be26:	dde9      	ble.n	800bdfc <__kernel_rem_pio2+0x494>
 800be28:	ab48      	add	r3, sp, #288	@ 0x120
 800be2a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800be2e:	e9c5 ab00 	strd	sl, fp, [r5]
 800be32:	3c01      	subs	r4, #1
 800be34:	e6fd      	b.n	800bc32 <__kernel_rem_pio2+0x2ca>
 800be36:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800be38:	2b02      	cmp	r3, #2
 800be3a:	dc0b      	bgt.n	800be54 <__kernel_rem_pio2+0x4ec>
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	dc35      	bgt.n	800beac <__kernel_rem_pio2+0x544>
 800be40:	d059      	beq.n	800bef6 <__kernel_rem_pio2+0x58e>
 800be42:	9b02      	ldr	r3, [sp, #8]
 800be44:	f003 0007 	and.w	r0, r3, #7
 800be48:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800be4c:	ecbd 8b02 	vpop	{d8}
 800be50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be54:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800be56:	2b03      	cmp	r3, #3
 800be58:	d1f3      	bne.n	800be42 <__kernel_rem_pio2+0x4da>
 800be5a:	9b05      	ldr	r3, [sp, #20]
 800be5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800be60:	eb0d 0403 	add.w	r4, sp, r3
 800be64:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800be68:	4625      	mov	r5, r4
 800be6a:	46c2      	mov	sl, r8
 800be6c:	f1ba 0f00 	cmp.w	sl, #0
 800be70:	dc69      	bgt.n	800bf46 <__kernel_rem_pio2+0x5de>
 800be72:	4645      	mov	r5, r8
 800be74:	2d01      	cmp	r5, #1
 800be76:	f300 8087 	bgt.w	800bf88 <__kernel_rem_pio2+0x620>
 800be7a:	9c05      	ldr	r4, [sp, #20]
 800be7c:	ab48      	add	r3, sp, #288	@ 0x120
 800be7e:	441c      	add	r4, r3
 800be80:	2000      	movs	r0, #0
 800be82:	2100      	movs	r1, #0
 800be84:	f1b8 0f01 	cmp.w	r8, #1
 800be88:	f300 809c 	bgt.w	800bfc4 <__kernel_rem_pio2+0x65c>
 800be8c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800be90:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800be94:	f1b9 0f00 	cmp.w	r9, #0
 800be98:	f040 80a6 	bne.w	800bfe8 <__kernel_rem_pio2+0x680>
 800be9c:	9b04      	ldr	r3, [sp, #16]
 800be9e:	e9c3 5600 	strd	r5, r6, [r3]
 800bea2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800bea6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800beaa:	e7ca      	b.n	800be42 <__kernel_rem_pio2+0x4da>
 800beac:	9d05      	ldr	r5, [sp, #20]
 800beae:	ab48      	add	r3, sp, #288	@ 0x120
 800beb0:	441d      	add	r5, r3
 800beb2:	4644      	mov	r4, r8
 800beb4:	2000      	movs	r0, #0
 800beb6:	2100      	movs	r1, #0
 800beb8:	2c00      	cmp	r4, #0
 800beba:	da35      	bge.n	800bf28 <__kernel_rem_pio2+0x5c0>
 800bebc:	f1b9 0f00 	cmp.w	r9, #0
 800bec0:	d038      	beq.n	800bf34 <__kernel_rem_pio2+0x5cc>
 800bec2:	4602      	mov	r2, r0
 800bec4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bec8:	9c04      	ldr	r4, [sp, #16]
 800beca:	e9c4 2300 	strd	r2, r3, [r4]
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800bed6:	f7f4 f9d7 	bl	8000288 <__aeabi_dsub>
 800beda:	ad4a      	add	r5, sp, #296	@ 0x128
 800bedc:	2401      	movs	r4, #1
 800bede:	45a0      	cmp	r8, r4
 800bee0:	da2b      	bge.n	800bf3a <__kernel_rem_pio2+0x5d2>
 800bee2:	f1b9 0f00 	cmp.w	r9, #0
 800bee6:	d002      	beq.n	800beee <__kernel_rem_pio2+0x586>
 800bee8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800beec:	4619      	mov	r1, r3
 800beee:	9b04      	ldr	r3, [sp, #16]
 800bef0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bef4:	e7a5      	b.n	800be42 <__kernel_rem_pio2+0x4da>
 800bef6:	9c05      	ldr	r4, [sp, #20]
 800bef8:	ab48      	add	r3, sp, #288	@ 0x120
 800befa:	441c      	add	r4, r3
 800befc:	2000      	movs	r0, #0
 800befe:	2100      	movs	r1, #0
 800bf00:	f1b8 0f00 	cmp.w	r8, #0
 800bf04:	da09      	bge.n	800bf1a <__kernel_rem_pio2+0x5b2>
 800bf06:	f1b9 0f00 	cmp.w	r9, #0
 800bf0a:	d002      	beq.n	800bf12 <__kernel_rem_pio2+0x5aa>
 800bf0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf10:	4619      	mov	r1, r3
 800bf12:	9b04      	ldr	r3, [sp, #16]
 800bf14:	e9c3 0100 	strd	r0, r1, [r3]
 800bf18:	e793      	b.n	800be42 <__kernel_rem_pio2+0x4da>
 800bf1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bf1e:	f7f4 f9b5 	bl	800028c <__adddf3>
 800bf22:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf26:	e7eb      	b.n	800bf00 <__kernel_rem_pio2+0x598>
 800bf28:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bf2c:	f7f4 f9ae 	bl	800028c <__adddf3>
 800bf30:	3c01      	subs	r4, #1
 800bf32:	e7c1      	b.n	800beb8 <__kernel_rem_pio2+0x550>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	e7c6      	b.n	800bec8 <__kernel_rem_pio2+0x560>
 800bf3a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800bf3e:	f7f4 f9a5 	bl	800028c <__adddf3>
 800bf42:	3401      	adds	r4, #1
 800bf44:	e7cb      	b.n	800bede <__kernel_rem_pio2+0x576>
 800bf46:	ed35 7b02 	vldmdb	r5!, {d7}
 800bf4a:	ed8d 7b00 	vstr	d7, [sp]
 800bf4e:	ed95 7b02 	vldr	d7, [r5, #8]
 800bf52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf56:	ec53 2b17 	vmov	r2, r3, d7
 800bf5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf5e:	f7f4 f995 	bl	800028c <__adddf3>
 800bf62:	4602      	mov	r2, r0
 800bf64:	460b      	mov	r3, r1
 800bf66:	4606      	mov	r6, r0
 800bf68:	460f      	mov	r7, r1
 800bf6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf6e:	f7f4 f98b 	bl	8000288 <__aeabi_dsub>
 800bf72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf76:	f7f4 f989 	bl	800028c <__adddf3>
 800bf7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf7e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bf82:	e9c5 6700 	strd	r6, r7, [r5]
 800bf86:	e771      	b.n	800be6c <__kernel_rem_pio2+0x504>
 800bf88:	ed34 7b02 	vldmdb	r4!, {d7}
 800bf8c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800bf90:	ec51 0b17 	vmov	r0, r1, d7
 800bf94:	4652      	mov	r2, sl
 800bf96:	465b      	mov	r3, fp
 800bf98:	ed8d 7b00 	vstr	d7, [sp]
 800bf9c:	f7f4 f976 	bl	800028c <__adddf3>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4606      	mov	r6, r0
 800bfa6:	460f      	mov	r7, r1
 800bfa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfac:	f7f4 f96c 	bl	8000288 <__aeabi_dsub>
 800bfb0:	4652      	mov	r2, sl
 800bfb2:	465b      	mov	r3, fp
 800bfb4:	f7f4 f96a 	bl	800028c <__adddf3>
 800bfb8:	3d01      	subs	r5, #1
 800bfba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bfbe:	e9c4 6700 	strd	r6, r7, [r4]
 800bfc2:	e757      	b.n	800be74 <__kernel_rem_pio2+0x50c>
 800bfc4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bfc8:	f7f4 f960 	bl	800028c <__adddf3>
 800bfcc:	f108 38ff 	add.w	r8, r8, #4294967295
 800bfd0:	e758      	b.n	800be84 <__kernel_rem_pio2+0x51c>
 800bfd2:	bf00      	nop
 800bfd4:	f3af 8000 	nop.w
	...
 800bfe0:	41700000 	.word	0x41700000
 800bfe4:	3e700000 	.word	0x3e700000
 800bfe8:	9b04      	ldr	r3, [sp, #16]
 800bfea:	9a04      	ldr	r2, [sp, #16]
 800bfec:	601d      	str	r5, [r3, #0]
 800bfee:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800bff2:	605c      	str	r4, [r3, #4]
 800bff4:	609f      	str	r7, [r3, #8]
 800bff6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800bffa:	60d3      	str	r3, [r2, #12]
 800bffc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c000:	6110      	str	r0, [r2, #16]
 800c002:	6153      	str	r3, [r2, #20]
 800c004:	e71d      	b.n	800be42 <__kernel_rem_pio2+0x4da>
 800c006:	bf00      	nop

0800c008 <scalbn>:
 800c008:	b570      	push	{r4, r5, r6, lr}
 800c00a:	ec55 4b10 	vmov	r4, r5, d0
 800c00e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c012:	4606      	mov	r6, r0
 800c014:	462b      	mov	r3, r5
 800c016:	b991      	cbnz	r1, 800c03e <scalbn+0x36>
 800c018:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c01c:	4323      	orrs	r3, r4
 800c01e:	d03b      	beq.n	800c098 <scalbn+0x90>
 800c020:	4b33      	ldr	r3, [pc, #204]	@ (800c0f0 <scalbn+0xe8>)
 800c022:	4620      	mov	r0, r4
 800c024:	4629      	mov	r1, r5
 800c026:	2200      	movs	r2, #0
 800c028:	f7f4 fae6 	bl	80005f8 <__aeabi_dmul>
 800c02c:	4b31      	ldr	r3, [pc, #196]	@ (800c0f4 <scalbn+0xec>)
 800c02e:	429e      	cmp	r6, r3
 800c030:	4604      	mov	r4, r0
 800c032:	460d      	mov	r5, r1
 800c034:	da0f      	bge.n	800c056 <scalbn+0x4e>
 800c036:	a326      	add	r3, pc, #152	@ (adr r3, 800c0d0 <scalbn+0xc8>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	e01e      	b.n	800c07c <scalbn+0x74>
 800c03e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c042:	4291      	cmp	r1, r2
 800c044:	d10b      	bne.n	800c05e <scalbn+0x56>
 800c046:	4622      	mov	r2, r4
 800c048:	4620      	mov	r0, r4
 800c04a:	4629      	mov	r1, r5
 800c04c:	f7f4 f91e 	bl	800028c <__adddf3>
 800c050:	4604      	mov	r4, r0
 800c052:	460d      	mov	r5, r1
 800c054:	e020      	b.n	800c098 <scalbn+0x90>
 800c056:	460b      	mov	r3, r1
 800c058:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c05c:	3936      	subs	r1, #54	@ 0x36
 800c05e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c062:	4296      	cmp	r6, r2
 800c064:	dd0d      	ble.n	800c082 <scalbn+0x7a>
 800c066:	2d00      	cmp	r5, #0
 800c068:	a11b      	add	r1, pc, #108	@ (adr r1, 800c0d8 <scalbn+0xd0>)
 800c06a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c06e:	da02      	bge.n	800c076 <scalbn+0x6e>
 800c070:	a11b      	add	r1, pc, #108	@ (adr r1, 800c0e0 <scalbn+0xd8>)
 800c072:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c076:	a318      	add	r3, pc, #96	@ (adr r3, 800c0d8 <scalbn+0xd0>)
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	f7f4 fabc 	bl	80005f8 <__aeabi_dmul>
 800c080:	e7e6      	b.n	800c050 <scalbn+0x48>
 800c082:	1872      	adds	r2, r6, r1
 800c084:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c088:	428a      	cmp	r2, r1
 800c08a:	dcec      	bgt.n	800c066 <scalbn+0x5e>
 800c08c:	2a00      	cmp	r2, #0
 800c08e:	dd06      	ble.n	800c09e <scalbn+0x96>
 800c090:	f36f 531e 	bfc	r3, #20, #11
 800c094:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c098:	ec45 4b10 	vmov	d0, r4, r5
 800c09c:	bd70      	pop	{r4, r5, r6, pc}
 800c09e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c0a2:	da08      	bge.n	800c0b6 <scalbn+0xae>
 800c0a4:	2d00      	cmp	r5, #0
 800c0a6:	a10a      	add	r1, pc, #40	@ (adr r1, 800c0d0 <scalbn+0xc8>)
 800c0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0ac:	dac3      	bge.n	800c036 <scalbn+0x2e>
 800c0ae:	a10e      	add	r1, pc, #56	@ (adr r1, 800c0e8 <scalbn+0xe0>)
 800c0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0b4:	e7bf      	b.n	800c036 <scalbn+0x2e>
 800c0b6:	3236      	adds	r2, #54	@ 0x36
 800c0b8:	f36f 531e 	bfc	r3, #20, #11
 800c0bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c0f8 <scalbn+0xf0>)
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	e7d8      	b.n	800c07c <scalbn+0x74>
 800c0ca:	bf00      	nop
 800c0cc:	f3af 8000 	nop.w
 800c0d0:	c2f8f359 	.word	0xc2f8f359
 800c0d4:	01a56e1f 	.word	0x01a56e1f
 800c0d8:	8800759c 	.word	0x8800759c
 800c0dc:	7e37e43c 	.word	0x7e37e43c
 800c0e0:	8800759c 	.word	0x8800759c
 800c0e4:	fe37e43c 	.word	0xfe37e43c
 800c0e8:	c2f8f359 	.word	0xc2f8f359
 800c0ec:	81a56e1f 	.word	0x81a56e1f
 800c0f0:	43500000 	.word	0x43500000
 800c0f4:	ffff3cb0 	.word	0xffff3cb0
 800c0f8:	3c900000 	.word	0x3c900000
 800c0fc:	00000000 	.word	0x00000000

0800c100 <floor>:
 800c100:	ec51 0b10 	vmov	r0, r1, d0
 800c104:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c110:	2e13      	cmp	r6, #19
 800c112:	460c      	mov	r4, r1
 800c114:	4605      	mov	r5, r0
 800c116:	4680      	mov	r8, r0
 800c118:	dc34      	bgt.n	800c184 <floor+0x84>
 800c11a:	2e00      	cmp	r6, #0
 800c11c:	da17      	bge.n	800c14e <floor+0x4e>
 800c11e:	a332      	add	r3, pc, #200	@ (adr r3, 800c1e8 <floor+0xe8>)
 800c120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c124:	f7f4 f8b2 	bl	800028c <__adddf3>
 800c128:	2200      	movs	r2, #0
 800c12a:	2300      	movs	r3, #0
 800c12c:	f7f4 fcf4 	bl	8000b18 <__aeabi_dcmpgt>
 800c130:	b150      	cbz	r0, 800c148 <floor+0x48>
 800c132:	2c00      	cmp	r4, #0
 800c134:	da55      	bge.n	800c1e2 <floor+0xe2>
 800c136:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c13a:	432c      	orrs	r4, r5
 800c13c:	2500      	movs	r5, #0
 800c13e:	42ac      	cmp	r4, r5
 800c140:	4c2b      	ldr	r4, [pc, #172]	@ (800c1f0 <floor+0xf0>)
 800c142:	bf08      	it	eq
 800c144:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c148:	4621      	mov	r1, r4
 800c14a:	4628      	mov	r0, r5
 800c14c:	e023      	b.n	800c196 <floor+0x96>
 800c14e:	4f29      	ldr	r7, [pc, #164]	@ (800c1f4 <floor+0xf4>)
 800c150:	4137      	asrs	r7, r6
 800c152:	ea01 0307 	and.w	r3, r1, r7
 800c156:	4303      	orrs	r3, r0
 800c158:	d01d      	beq.n	800c196 <floor+0x96>
 800c15a:	a323      	add	r3, pc, #140	@ (adr r3, 800c1e8 <floor+0xe8>)
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	f7f4 f894 	bl	800028c <__adddf3>
 800c164:	2200      	movs	r2, #0
 800c166:	2300      	movs	r3, #0
 800c168:	f7f4 fcd6 	bl	8000b18 <__aeabi_dcmpgt>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	d0eb      	beq.n	800c148 <floor+0x48>
 800c170:	2c00      	cmp	r4, #0
 800c172:	bfbe      	ittt	lt
 800c174:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c178:	4133      	asrlt	r3, r6
 800c17a:	18e4      	addlt	r4, r4, r3
 800c17c:	ea24 0407 	bic.w	r4, r4, r7
 800c180:	2500      	movs	r5, #0
 800c182:	e7e1      	b.n	800c148 <floor+0x48>
 800c184:	2e33      	cmp	r6, #51	@ 0x33
 800c186:	dd0a      	ble.n	800c19e <floor+0x9e>
 800c188:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c18c:	d103      	bne.n	800c196 <floor+0x96>
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	f7f4 f87b 	bl	800028c <__adddf3>
 800c196:	ec41 0b10 	vmov	d0, r0, r1
 800c19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c19e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c1a2:	f04f 37ff 	mov.w	r7, #4294967295
 800c1a6:	40df      	lsrs	r7, r3
 800c1a8:	4207      	tst	r7, r0
 800c1aa:	d0f4      	beq.n	800c196 <floor+0x96>
 800c1ac:	a30e      	add	r3, pc, #56	@ (adr r3, 800c1e8 <floor+0xe8>)
 800c1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b2:	f7f4 f86b 	bl	800028c <__adddf3>
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f7f4 fcad 	bl	8000b18 <__aeabi_dcmpgt>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d0c2      	beq.n	800c148 <floor+0x48>
 800c1c2:	2c00      	cmp	r4, #0
 800c1c4:	da0a      	bge.n	800c1dc <floor+0xdc>
 800c1c6:	2e14      	cmp	r6, #20
 800c1c8:	d101      	bne.n	800c1ce <floor+0xce>
 800c1ca:	3401      	adds	r4, #1
 800c1cc:	e006      	b.n	800c1dc <floor+0xdc>
 800c1ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	40b3      	lsls	r3, r6
 800c1d6:	441d      	add	r5, r3
 800c1d8:	4545      	cmp	r5, r8
 800c1da:	d3f6      	bcc.n	800c1ca <floor+0xca>
 800c1dc:	ea25 0507 	bic.w	r5, r5, r7
 800c1e0:	e7b2      	b.n	800c148 <floor+0x48>
 800c1e2:	2500      	movs	r5, #0
 800c1e4:	462c      	mov	r4, r5
 800c1e6:	e7af      	b.n	800c148 <floor+0x48>
 800c1e8:	8800759c 	.word	0x8800759c
 800c1ec:	7e37e43c 	.word	0x7e37e43c
 800c1f0:	bff00000 	.word	0xbff00000
 800c1f4:	000fffff 	.word	0x000fffff

0800c1f8 <_init>:
 800c1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fa:	bf00      	nop
 800c1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1fe:	bc08      	pop	{r3}
 800c200:	469e      	mov	lr, r3
 800c202:	4770      	bx	lr

0800c204 <_fini>:
 800c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c206:	bf00      	nop
 800c208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c20a:	bc08      	pop	{r3}
 800c20c:	469e      	mov	lr, r3
 800c20e:	4770      	bx	lr
